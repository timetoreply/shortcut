<?php
/**
 * EpicStatsTest
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Timetoreply\Shortcut
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Shortcut API
 *
 * Shortcut API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace Timetoreply\Shortcut\Test\Model;

use PHPUnit\Framework\TestCase;

/**
 * EpicStatsTest Class Doc Comment
 *
 * @category    Class
 * @description A group of calculated values for this Epic.
 * @package     Timetoreply\Shortcut
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class EpicStatsTest extends TestCase
{

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test "EpicStats"
     */
    public function testEpicStats()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "numPointsDone"
     */
    public function testPropertyNumPointsDone()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "numRelatedDocuments"
     */
    public function testPropertyNumRelatedDocuments()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "numStoriesUnstarted"
     */
    public function testPropertyNumStoriesUnstarted()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "numStoriesTotal"
     */
    public function testPropertyNumStoriesTotal()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "lastStoryUpdate"
     */
    public function testPropertyLastStoryUpdate()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "numPointsStarted"
     */
    public function testPropertyNumPointsStarted()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "numPointsUnstarted"
     */
    public function testPropertyNumPointsUnstarted()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "numStoriesStarted"
     */
    public function testPropertyNumStoriesStarted()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "numStoriesUnestimated"
     */
    public function testPropertyNumStoriesUnestimated()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "numStoriesBacklog"
     */
    public function testPropertyNumStoriesBacklog()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "numPointsBacklog"
     */
    public function testPropertyNumPointsBacklog()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "numPoints"
     */
    public function testPropertyNumPoints()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "numStoriesDone"
     */
    public function testPropertyNumStoriesDone()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
