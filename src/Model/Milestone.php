<?php
/**
 * Milestone
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Timetoreply\Shortcut
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Shortcut API
 *
 * Shortcut API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Timetoreply\Shortcut\Model;

use \ArrayAccess;
use \Timetoreply\Shortcut\ObjectSerializer;

/**
 * Milestone Class Doc Comment
 *
 * @category Class
 * @description (Deprecated) A Milestone is a collection of Epics that represent a release or some other large initiative that you are working on. Milestones have become Objectives, so you should use Objective-related API resources instead of Milestone ones.
 * @package  Timetoreply\Shortcut
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Milestone implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Milestone';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'appUrl' => 'string',
        'description' => 'string',
        'archived' => 'bool',
        'started' => 'bool',
        'entityType' => 'string',
        'completedAtOverride' => '\DateTime',
        'startedAt' => '\DateTime',
        'completedAt' => '\DateTime',
        'name' => 'string',
        'globalId' => 'string',
        'completed' => 'bool',
        'state' => 'string',
        'startedAtOverride' => '\DateTime',
        'updatedAt' => '\DateTime',
        'categories' => '\Timetoreply\Shortcut\Model\Category[]',
        'id' => 'int',
        'keyResultIds' => 'string[]',
        'position' => 'int',
        'stats' => '\Timetoreply\Shortcut\Model\MilestoneStats',
        'createdAt' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'appUrl' => null,
        'description' => null,
        'archived' => null,
        'started' => null,
        'entityType' => null,
        'completedAtOverride' => 'date-time',
        'startedAt' => 'date-time',
        'completedAt' => 'date-time',
        'name' => null,
        'globalId' => null,
        'completed' => null,
        'state' => null,
        'startedAtOverride' => 'date-time',
        'updatedAt' => 'date-time',
        'categories' => null,
        'id' => 'int64',
        'keyResultIds' => 'uuid',
        'position' => 'int64',
        'stats' => null,
        'createdAt' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'appUrl' => false,
        'description' => false,
        'archived' => false,
        'started' => false,
        'entityType' => false,
        'completedAtOverride' => true,
        'startedAt' => true,
        'completedAt' => true,
        'name' => false,
        'globalId' => false,
        'completed' => false,
        'state' => false,
        'startedAtOverride' => true,
        'updatedAt' => false,
        'categories' => false,
        'id' => false,
        'keyResultIds' => false,
        'position' => false,
        'stats' => false,
        'createdAt' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'appUrl' => 'app_url',
        'description' => 'description',
        'archived' => 'archived',
        'started' => 'started',
        'entityType' => 'entity_type',
        'completedAtOverride' => 'completed_at_override',
        'startedAt' => 'started_at',
        'completedAt' => 'completed_at',
        'name' => 'name',
        'globalId' => 'global_id',
        'completed' => 'completed',
        'state' => 'state',
        'startedAtOverride' => 'started_at_override',
        'updatedAt' => 'updated_at',
        'categories' => 'categories',
        'id' => 'id',
        'keyResultIds' => 'key_result_ids',
        'position' => 'position',
        'stats' => 'stats',
        'createdAt' => 'created_at'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'appUrl' => 'setAppUrl',
        'description' => 'setDescription',
        'archived' => 'setArchived',
        'started' => 'setStarted',
        'entityType' => 'setEntityType',
        'completedAtOverride' => 'setCompletedAtOverride',
        'startedAt' => 'setStartedAt',
        'completedAt' => 'setCompletedAt',
        'name' => 'setName',
        'globalId' => 'setGlobalId',
        'completed' => 'setCompleted',
        'state' => 'setState',
        'startedAtOverride' => 'setStartedAtOverride',
        'updatedAt' => 'setUpdatedAt',
        'categories' => 'setCategories',
        'id' => 'setId',
        'keyResultIds' => 'setKeyResultIds',
        'position' => 'setPosition',
        'stats' => 'setStats',
        'createdAt' => 'setCreatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'appUrl' => 'getAppUrl',
        'description' => 'getDescription',
        'archived' => 'getArchived',
        'started' => 'getStarted',
        'entityType' => 'getEntityType',
        'completedAtOverride' => 'getCompletedAtOverride',
        'startedAt' => 'getStartedAt',
        'completedAt' => 'getCompletedAt',
        'name' => 'getName',
        'globalId' => 'getGlobalId',
        'completed' => 'getCompleted',
        'state' => 'getState',
        'startedAtOverride' => 'getStartedAtOverride',
        'updatedAt' => 'getUpdatedAt',
        'categories' => 'getCategories',
        'id' => 'getId',
        'keyResultIds' => 'getKeyResultIds',
        'position' => 'getPosition',
        'stats' => 'getStats',
        'createdAt' => 'getCreatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('appUrl', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('archived', $data ?? [], null);
        $this->setIfExists('started', $data ?? [], null);
        $this->setIfExists('entityType', $data ?? [], null);
        $this->setIfExists('completedAtOverride', $data ?? [], null);
        $this->setIfExists('startedAt', $data ?? [], null);
        $this->setIfExists('completedAt', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('globalId', $data ?? [], null);
        $this->setIfExists('completed', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('startedAtOverride', $data ?? [], null);
        $this->setIfExists('updatedAt', $data ?? [], null);
        $this->setIfExists('categories', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('keyResultIds', $data ?? [], null);
        $this->setIfExists('position', $data ?? [], null);
        $this->setIfExists('stats', $data ?? [], null);
        $this->setIfExists('createdAt', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['appUrl'] === null) {
            $invalidProperties[] = "'appUrl' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ($this->container['archived'] === null) {
            $invalidProperties[] = "'archived' can't be null";
        }
        if ($this->container['started'] === null) {
            $invalidProperties[] = "'started' can't be null";
        }
        if ($this->container['entityType'] === null) {
            $invalidProperties[] = "'entityType' can't be null";
        }
        if ($this->container['completedAtOverride'] === null) {
            $invalidProperties[] = "'completedAtOverride' can't be null";
        }
        if ($this->container['startedAt'] === null) {
            $invalidProperties[] = "'startedAt' can't be null";
        }
        if ($this->container['completedAt'] === null) {
            $invalidProperties[] = "'completedAt' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['globalId'] === null) {
            $invalidProperties[] = "'globalId' can't be null";
        }
        if ($this->container['completed'] === null) {
            $invalidProperties[] = "'completed' can't be null";
        }
        if ($this->container['state'] === null) {
            $invalidProperties[] = "'state' can't be null";
        }
        if ($this->container['startedAtOverride'] === null) {
            $invalidProperties[] = "'startedAtOverride' can't be null";
        }
        if ($this->container['updatedAt'] === null) {
            $invalidProperties[] = "'updatedAt' can't be null";
        }
        if ($this->container['categories'] === null) {
            $invalidProperties[] = "'categories' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['keyResultIds'] === null) {
            $invalidProperties[] = "'keyResultIds' can't be null";
        }
        if ($this->container['position'] === null) {
            $invalidProperties[] = "'position' can't be null";
        }
        if ($this->container['stats'] === null) {
            $invalidProperties[] = "'stats' can't be null";
        }
        if ($this->container['createdAt'] === null) {
            $invalidProperties[] = "'createdAt' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets appUrl
     *
     * @return string
     */
    public function getAppUrl()
    {
        return $this->container['appUrl'];
    }

    /**
     * Sets appUrl
     *
     * @param string $appUrl The Shortcut application url for the Milestone.
     *
     * @return self
     */
    public function setAppUrl($appUrl)
    {
        if (is_null($appUrl)) {
            throw new \InvalidArgumentException('non-nullable appUrl cannot be null');
        }
        $this->container['appUrl'] = $appUrl;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description The Milestone's description.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets archived
     *
     * @return bool
     */
    public function getArchived()
    {
        return $this->container['archived'];
    }

    /**
     * Sets archived
     *
     * @param bool $archived A boolean indicating whether the Milestone has been archived or not.
     *
     * @return self
     */
    public function setArchived($archived)
    {
        if (is_null($archived)) {
            throw new \InvalidArgumentException('non-nullable archived cannot be null');
        }
        $this->container['archived'] = $archived;

        return $this;
    }

    /**
     * Gets started
     *
     * @return bool
     */
    public function getStarted()
    {
        return $this->container['started'];
    }

    /**
     * Sets started
     *
     * @param bool $started A true/false boolean indicating if the Milestone has been started.
     *
     * @return self
     */
    public function setStarted($started)
    {
        if (is_null($started)) {
            throw new \InvalidArgumentException('non-nullable started cannot be null');
        }
        $this->container['started'] = $started;

        return $this;
    }

    /**
     * Gets entityType
     *
     * @return string
     */
    public function getEntityType()
    {
        return $this->container['entityType'];
    }

    /**
     * Sets entityType
     *
     * @param string $entityType A string description of this resource.
     *
     * @return self
     */
    public function setEntityType($entityType)
    {
        if (is_null($entityType)) {
            throw new \InvalidArgumentException('non-nullable entityType cannot be null');
        }
        $this->container['entityType'] = $entityType;

        return $this;
    }

    /**
     * Gets completedAtOverride
     *
     * @return \DateTime
     */
    public function getCompletedAtOverride()
    {
        return $this->container['completedAtOverride'];
    }

    /**
     * Sets completedAtOverride
     *
     * @param \DateTime $completedAtOverride A manual override for the time/date the Milestone was completed.
     *
     * @return self
     */
    public function setCompletedAtOverride($completedAtOverride)
    {
        if (is_null($completedAtOverride)) {
            array_push($this->openAPINullablesSetToNull, 'completedAtOverride');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('completedAtOverride', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['completedAtOverride'] = $completedAtOverride;

        return $this;
    }

    /**
     * Gets startedAt
     *
     * @return \DateTime
     */
    public function getStartedAt()
    {
        return $this->container['startedAt'];
    }

    /**
     * Sets startedAt
     *
     * @param \DateTime $startedAt The time/date the Milestone was started.
     *
     * @return self
     */
    public function setStartedAt($startedAt)
    {
        if (is_null($startedAt)) {
            array_push($this->openAPINullablesSetToNull, 'startedAt');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('startedAt', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['startedAt'] = $startedAt;

        return $this;
    }

    /**
     * Gets completedAt
     *
     * @return \DateTime
     */
    public function getCompletedAt()
    {
        return $this->container['completedAt'];
    }

    /**
     * Sets completedAt
     *
     * @param \DateTime $completedAt The time/date the Milestone was completed.
     *
     * @return self
     */
    public function setCompletedAt($completedAt)
    {
        if (is_null($completedAt)) {
            array_push($this->openAPINullablesSetToNull, 'completedAt');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('completedAt', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['completedAt'] = $completedAt;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the Milestone.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets globalId
     *
     * @return string
     */
    public function getGlobalId()
    {
        return $this->container['globalId'];
    }

    /**
     * Sets globalId
     *
     * @param string $globalId globalId
     *
     * @return self
     */
    public function setGlobalId($globalId)
    {
        if (is_null($globalId)) {
            throw new \InvalidArgumentException('non-nullable globalId cannot be null');
        }
        $this->container['globalId'] = $globalId;

        return $this;
    }

    /**
     * Gets completed
     *
     * @return bool
     */
    public function getCompleted()
    {
        return $this->container['completed'];
    }

    /**
     * Sets completed
     *
     * @param bool $completed A true/false boolean indicating if the Milestone has been completed.
     *
     * @return self
     */
    public function setCompleted($completed)
    {
        if (is_null($completed)) {
            throw new \InvalidArgumentException('non-nullable completed cannot be null');
        }
        $this->container['completed'] = $completed;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state The workflow state that the Milestone is in.
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets startedAtOverride
     *
     * @return \DateTime
     */
    public function getStartedAtOverride()
    {
        return $this->container['startedAtOverride'];
    }

    /**
     * Sets startedAtOverride
     *
     * @param \DateTime $startedAtOverride A manual override for the time/date the Milestone was started.
     *
     * @return self
     */
    public function setStartedAtOverride($startedAtOverride)
    {
        if (is_null($startedAtOverride)) {
            array_push($this->openAPINullablesSetToNull, 'startedAtOverride');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('startedAtOverride', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['startedAtOverride'] = $startedAtOverride;

        return $this;
    }

    /**
     * Gets updatedAt
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updatedAt'];
    }

    /**
     * Sets updatedAt
     *
     * @param \DateTime $updatedAt The time/date the Milestone was updated.
     *
     * @return self
     */
    public function setUpdatedAt($updatedAt)
    {
        if (is_null($updatedAt)) {
            throw new \InvalidArgumentException('non-nullable updatedAt cannot be null');
        }
        $this->container['updatedAt'] = $updatedAt;

        return $this;
    }

    /**
     * Gets categories
     *
     * @return \Timetoreply\Shortcut\Model\Category[]
     */
    public function getCategories()
    {
        return $this->container['categories'];
    }

    /**
     * Sets categories
     *
     * @param \Timetoreply\Shortcut\Model\Category[] $categories An array of Categories attached to the Milestone.
     *
     * @return self
     */
    public function setCategories($categories)
    {
        if (is_null($categories)) {
            throw new \InvalidArgumentException('non-nullable categories cannot be null');
        }
        $this->container['categories'] = $categories;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The unique ID of the Milestone.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets keyResultIds
     *
     * @return string[]
     */
    public function getKeyResultIds()
    {
        return $this->container['keyResultIds'];
    }

    /**
     * Sets keyResultIds
     *
     * @param string[] $keyResultIds The IDs of the Key Results associated with the Objective.
     *
     * @return self
     */
    public function setKeyResultIds($keyResultIds)
    {
        if (is_null($keyResultIds)) {
            throw new \InvalidArgumentException('non-nullable keyResultIds cannot be null');
        }
        $this->container['keyResultIds'] = $keyResultIds;

        return $this;
    }

    /**
     * Gets position
     *
     * @return int
     */
    public function getPosition()
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     *
     * @param int $position A number representing the position of the Milestone in relation to every other Milestone within the Workspace.
     *
     * @return self
     */
    public function setPosition($position)
    {
        if (is_null($position)) {
            throw new \InvalidArgumentException('non-nullable position cannot be null');
        }
        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets stats
     *
     * @return \Timetoreply\Shortcut\Model\MilestoneStats
     */
    public function getStats()
    {
        return $this->container['stats'];
    }

    /**
     * Sets stats
     *
     * @param \Timetoreply\Shortcut\Model\MilestoneStats $stats stats
     *
     * @return self
     */
    public function setStats($stats)
    {
        if (is_null($stats)) {
            throw new \InvalidArgumentException('non-nullable stats cannot be null');
        }
        $this->container['stats'] = $stats;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param \DateTime $createdAt The time/date the Milestone was created.
     *
     * @return self
     */
    public function setCreatedAt($createdAt)
    {
        if (is_null($createdAt)) {
            throw new \InvalidArgumentException('non-nullable createdAt cannot be null');
        }
        $this->container['createdAt'] = $createdAt;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


