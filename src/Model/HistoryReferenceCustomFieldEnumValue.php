<?php
/**
 * HistoryReferenceCustomFieldEnumValue
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Timetoreply\Shortcut
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Shortcut API
 *
 * Shortcut API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Timetoreply\Shortcut\Model;

use \ArrayAccess;
use \Timetoreply\Shortcut\ObjectSerializer;

/**
 * HistoryReferenceCustomFieldEnumValue Class Doc Comment
 *
 * @category Class
 * @description A reference to a CustomField value asserted on a Story.
 * @package  Timetoreply\Shortcut
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class HistoryReferenceCustomFieldEnumValue implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'HistoryReferenceCustomFieldEnumValue';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => '\Timetoreply\Shortcut\Model\HistoryReferenceBranchId',
        'entityType' => 'string',
        'stringValue' => 'string',
        'enumValueEnabled' => 'bool',
        'fieldId' => 'string',
        'fieldType' => 'string',
        'fieldName' => 'string',
        'fieldEnabled' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'entityType' => null,
        'stringValue' => null,
        'enumValueEnabled' => null,
        'fieldId' => 'uuid',
        'fieldType' => null,
        'fieldName' => null,
        'fieldEnabled' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'entityType' => false,
        'stringValue' => true,
        'enumValueEnabled' => true,
        'fieldId' => false,
        'fieldType' => false,
        'fieldName' => false,
        'fieldEnabled' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'entityType' => 'entity_type',
        'stringValue' => 'string_value',
        'enumValueEnabled' => 'enum_value_enabled',
        'fieldId' => 'field_id',
        'fieldType' => 'field_type',
        'fieldName' => 'field_name',
        'fieldEnabled' => 'field_enabled'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'entityType' => 'setEntityType',
        'stringValue' => 'setStringValue',
        'enumValueEnabled' => 'setEnumValueEnabled',
        'fieldId' => 'setFieldId',
        'fieldType' => 'setFieldType',
        'fieldName' => 'setFieldName',
        'fieldEnabled' => 'setFieldEnabled'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'entityType' => 'getEntityType',
        'stringValue' => 'getStringValue',
        'enumValueEnabled' => 'getEnumValueEnabled',
        'fieldId' => 'getFieldId',
        'fieldType' => 'getFieldType',
        'fieldName' => 'getFieldName',
        'fieldEnabled' => 'getFieldEnabled'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('entityType', $data ?? [], null);
        $this->setIfExists('stringValue', $data ?? [], null);
        $this->setIfExists('enumValueEnabled', $data ?? [], null);
        $this->setIfExists('fieldId', $data ?? [], null);
        $this->setIfExists('fieldType', $data ?? [], null);
        $this->setIfExists('fieldName', $data ?? [], null);
        $this->setIfExists('fieldEnabled', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['entityType'] === null) {
            $invalidProperties[] = "'entityType' can't be null";
        }
        if ($this->container['stringValue'] === null) {
            $invalidProperties[] = "'stringValue' can't be null";
        }
        if ($this->container['enumValueEnabled'] === null) {
            $invalidProperties[] = "'enumValueEnabled' can't be null";
        }
        if ($this->container['fieldId'] === null) {
            $invalidProperties[] = "'fieldId' can't be null";
        }
        if ($this->container['fieldType'] === null) {
            $invalidProperties[] = "'fieldType' can't be null";
        }
        if ($this->container['fieldName'] === null) {
            $invalidProperties[] = "'fieldName' can't be null";
        }
        if ($this->container['fieldEnabled'] === null) {
            $invalidProperties[] = "'fieldEnabled' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return \Timetoreply\Shortcut\Model\HistoryReferenceBranchId
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param \Timetoreply\Shortcut\Model\HistoryReferenceBranchId $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets entityType
     *
     * @return string
     */
    public function getEntityType()
    {
        return $this->container['entityType'];
    }

    /**
     * Sets entityType
     *
     * @param string $entityType The type of entity referenced.
     *
     * @return self
     */
    public function setEntityType($entityType)
    {
        if (is_null($entityType)) {
            throw new \InvalidArgumentException('non-nullable entityType cannot be null');
        }
        $this->container['entityType'] = $entityType;

        return $this;
    }

    /**
     * Gets stringValue
     *
     * @return string
     */
    public function getStringValue()
    {
        return $this->container['stringValue'];
    }

    /**
     * Sets stringValue
     *
     * @param string $stringValue The custom-field enum value as a string.
     *
     * @return self
     */
    public function setStringValue($stringValue)
    {
        if (is_null($stringValue)) {
            array_push($this->openAPINullablesSetToNull, 'stringValue');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('stringValue', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['stringValue'] = $stringValue;

        return $this;
    }

    /**
     * Gets enumValueEnabled
     *
     * @return bool
     */
    public function getEnumValueEnabled()
    {
        return $this->container['enumValueEnabled'];
    }

    /**
     * Sets enumValueEnabled
     *
     * @param bool $enumValueEnabled Whether or not the custom-field enum value is enabled.
     *
     * @return self
     */
    public function setEnumValueEnabled($enumValueEnabled)
    {
        if (is_null($enumValueEnabled)) {
            array_push($this->openAPINullablesSetToNull, 'enumValueEnabled');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enumValueEnabled', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['enumValueEnabled'] = $enumValueEnabled;

        return $this;
    }

    /**
     * Gets fieldId
     *
     * @return string
     */
    public function getFieldId()
    {
        return $this->container['fieldId'];
    }

    /**
     * Sets fieldId
     *
     * @param string $fieldId The public-id of the parent custom-field of this enum value.
     *
     * @return self
     */
    public function setFieldId($fieldId)
    {
        if (is_null($fieldId)) {
            throw new \InvalidArgumentException('non-nullable fieldId cannot be null');
        }
        $this->container['fieldId'] = $fieldId;

        return $this;
    }

    /**
     * Gets fieldType
     *
     * @return string
     */
    public function getFieldType()
    {
        return $this->container['fieldType'];
    }

    /**
     * Sets fieldType
     *
     * @param string $fieldType The type variety of the parent custom-field of this enum value.
     *
     * @return self
     */
    public function setFieldType($fieldType)
    {
        if (is_null($fieldType)) {
            throw new \InvalidArgumentException('non-nullable fieldType cannot be null');
        }
        $this->container['fieldType'] = $fieldType;

        return $this;
    }

    /**
     * Gets fieldName
     *
     * @return string
     */
    public function getFieldName()
    {
        return $this->container['fieldName'];
    }

    /**
     * Sets fieldName
     *
     * @param string $fieldName The name as it is displayed to the user of the parent custom-field of this enum value.
     *
     * @return self
     */
    public function setFieldName($fieldName)
    {
        if (is_null($fieldName)) {
            throw new \InvalidArgumentException('non-nullable fieldName cannot be null');
        }
        $this->container['fieldName'] = $fieldName;

        return $this;
    }

    /**
     * Gets fieldEnabled
     *
     * @return bool
     */
    public function getFieldEnabled()
    {
        return $this->container['fieldEnabled'];
    }

    /**
     * Sets fieldEnabled
     *
     * @param bool $fieldEnabled Whether or not the custom-field is enabled.
     *
     * @return self
     */
    public function setFieldEnabled($fieldEnabled)
    {
        if (is_null($fieldEnabled)) {
            throw new \InvalidArgumentException('non-nullable fieldEnabled cannot be null');
        }
        $this->container['fieldEnabled'] = $fieldEnabled;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


