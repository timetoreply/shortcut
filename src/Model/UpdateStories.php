<?php
/**
 * UpdateStories
 *
 * PHP version 5
 *
 * @category Class
 * @package  Timetoreply\Shortcut
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Shortcut API
 *
 * Shortcut API
 *
 * OpenAPI spec version: 3.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.43-SNAPSHOT
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Timetoreply\Shortcut\Model;

use ArrayAccess;
use DateTime;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Timetoreply\Shortcut\ObjectSerializer;

/**
 * UpdateStories Class Doc Comment
 *
 * @category Class
 * @package  Timetoreply\Shortcut
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UpdateStories implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;
    const STORY_TYPE_FEATURE = 'feature';
    const STORY_TYPE_CHORE = 'chore';
    const STORY_TYPE_BUG = 'bug';
    const MOVE_TO_LAST = 'last';
    const MOVE_TO_FIRST = 'first';
    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'UpdateStories';
    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'archived' => 'bool',
        'storyIds' => 'int[]',
        'storyType' => 'string',
        'moveTo' => 'string',
        'followerIdsAdd' => 'string[]',
        'epicId' => 'int',
        'externalLinks' => 'string[]',
        'followerIdsRemove' => 'string[]',
        'requestedById' => 'string',
        'iterationId' => 'int',
        'customFieldsRemove' => '\Timetoreply\Shortcut\Model\CustomFieldValueParams[]',
        'labelsAdd' => '\Timetoreply\Shortcut\Model\CreateLabelParams[]',
        'groupId' => 'string',
        'workflowStateId' => 'int',
        'beforeId' => 'int',
        'estimate' => 'int',
        'afterId' => 'int',
        'ownerIdsRemove' => 'string[]',
        'customFieldsAdd' => '\Timetoreply\Shortcut\Model\CustomFieldValueParams[]',
        'projectId' => 'int',
        'labelsRemove' => '\Timetoreply\Shortcut\Model\CreateLabelParams[]',
        'deadline' => '\DateTime',
        'ownerIdsAdd' => 'string[]'];
    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'archived' => null,
        'storyIds' => 'int64',
        'storyType' => null,
        'moveTo' => null,
        'followerIdsAdd' => 'uuid',
        'epicId' => 'int64',
        'externalLinks' => null,
        'followerIdsRemove' => 'uuid',
        'requestedById' => 'uuid',
        'iterationId' => 'int64',
        'customFieldsRemove' => null,
        'labelsAdd' => null,
        'groupId' => 'uuid',
        'workflowStateId' => 'int64',
        'beforeId' => 'int64',
        'estimate' => 'int64',
        'afterId' => 'int64',
        'ownerIdsRemove' => 'uuid',
        'customFieldsAdd' => null,
        'projectId' => 'int64',
        'labelsRemove' => null,
        'deadline' => 'date-time',
        'ownerIdsAdd' => 'uuid'];
    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'archived' => 'archived',
        'storyIds' => 'story_ids',
        'storyType' => 'story_type',
        'moveTo' => 'move_to',
        'followerIdsAdd' => 'follower_ids_add',
        'epicId' => 'epic_id',
        'externalLinks' => 'external_links',
        'followerIdsRemove' => 'follower_ids_remove',
        'requestedById' => 'requested_by_id',
        'iterationId' => 'iteration_id',
        'customFieldsRemove' => 'custom_fields_remove',
        'labelsAdd' => 'labels_add',
        'groupId' => 'group_id',
        'workflowStateId' => 'workflow_state_id',
        'beforeId' => 'before_id',
        'estimate' => 'estimate',
        'afterId' => 'after_id',
        'ownerIdsRemove' => 'owner_ids_remove',
        'customFieldsAdd' => 'custom_fields_add',
        'projectId' => 'project_id',
        'labelsRemove' => 'labels_remove',
        'deadline' => 'deadline',
        'ownerIdsAdd' => 'owner_ids_add'];
    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'archived' => 'setArchived',
        'storyIds' => 'setStoryIds',
        'storyType' => 'setStoryType',
        'moveTo' => 'setMoveTo',
        'followerIdsAdd' => 'setFollowerIdsAdd',
        'epicId' => 'setEpicId',
        'externalLinks' => 'setExternalLinks',
        'followerIdsRemove' => 'setFollowerIdsRemove',
        'requestedById' => 'setRequestedById',
        'iterationId' => 'setIterationId',
        'customFieldsRemove' => 'setCustomFieldsRemove',
        'labelsAdd' => 'setLabelsAdd',
        'groupId' => 'setGroupId',
        'workflowStateId' => 'setWorkflowStateId',
        'beforeId' => 'setBeforeId',
        'estimate' => 'setEstimate',
        'afterId' => 'setAfterId',
        'ownerIdsRemove' => 'setOwnerIdsRemove',
        'customFieldsAdd' => 'setCustomFieldsAdd',
        'projectId' => 'setProjectId',
        'labelsRemove' => 'setLabelsRemove',
        'deadline' => 'setDeadline',
        'ownerIdsAdd' => 'setOwnerIdsAdd'];
    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'archived' => 'getArchived',
        'storyIds' => 'getStoryIds',
        'storyType' => 'getStoryType',
        'moveTo' => 'getMoveTo',
        'followerIdsAdd' => 'getFollowerIdsAdd',
        'epicId' => 'getEpicId',
        'externalLinks' => 'getExternalLinks',
        'followerIdsRemove' => 'getFollowerIdsRemove',
        'requestedById' => 'getRequestedById',
        'iterationId' => 'getIterationId',
        'customFieldsRemove' => 'getCustomFieldsRemove',
        'labelsAdd' => 'getLabelsAdd',
        'groupId' => 'getGroupId',
        'workflowStateId' => 'getWorkflowStateId',
        'beforeId' => 'getBeforeId',
        'estimate' => 'getEstimate',
        'afterId' => 'getAfterId',
        'ownerIdsRemove' => 'getOwnerIdsRemove',
        'customFieldsAdd' => 'getCustomFieldsAdd',
        'projectId' => 'getProjectId',
        'labelsRemove' => 'getLabelsRemove',
        'deadline' => 'getDeadline',
        'ownerIdsAdd' => 'getOwnerIdsAdd'];
    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['archived'] = isset($data['archived']) ? $data['archived'] : null;
        $this->container['storyIds'] = isset($data['storyIds']) ? $data['storyIds'] : null;
        $this->container['storyType'] = isset($data['storyType']) ? $data['storyType'] : null;
        $this->container['moveTo'] = isset($data['moveTo']) ? $data['moveTo'] : null;
        $this->container['followerIdsAdd'] = isset($data['followerIdsAdd']) ? $data['followerIdsAdd'] : null;
        $this->container['epicId'] = isset($data['epicId']) ? $data['epicId'] : null;
        $this->container['externalLinks'] = isset($data['externalLinks']) ? $data['externalLinks'] : null;
        $this->container['followerIdsRemove'] = isset($data['followerIdsRemove']) ? $data['followerIdsRemove'] : null;
        $this->container['requestedById'] = isset($data['requestedById']) ? $data['requestedById'] : null;
        $this->container['iterationId'] = isset($data['iterationId']) ? $data['iterationId'] : null;
        $this->container['customFieldsRemove'] = isset($data['customFieldsRemove']) ? $data['customFieldsRemove'] : null;
        $this->container['labelsAdd'] = isset($data['labelsAdd']) ? $data['labelsAdd'] : null;
        $this->container['groupId'] = isset($data['groupId']) ? $data['groupId'] : null;
        $this->container['workflowStateId'] = isset($data['workflowStateId']) ? $data['workflowStateId'] : null;
        $this->container['beforeId'] = isset($data['beforeId']) ? $data['beforeId'] : null;
        $this->container['estimate'] = isset($data['estimate']) ? $data['estimate'] : null;
        $this->container['afterId'] = isset($data['afterId']) ? $data['afterId'] : null;
        $this->container['ownerIdsRemove'] = isset($data['ownerIdsRemove']) ? $data['ownerIdsRemove'] : null;
        $this->container['customFieldsAdd'] = isset($data['customFieldsAdd']) ? $data['customFieldsAdd'] : null;
        $this->container['projectId'] = isset($data['projectId']) ? $data['projectId'] : null;
        $this->container['labelsRemove'] = isset($data['labelsRemove']) ? $data['labelsRemove'] : null;
        $this->container['deadline'] = isset($data['deadline']) ? $data['deadline'] : null;
        $this->container['ownerIdsAdd'] = isset($data['ownerIdsAdd']) ? $data['ownerIdsAdd'] : null;
    }

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['storyIds'] === null) {
            $invalidProperties[] = "'storyIds' can't be null";
        }
        $allowedValues = $this->getStoryTypeAllowableValues();
        if (!is_null($this->container['storyType']) && !in_array($this->container['storyType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'storyType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMoveToAllowableValues();
        if (!is_null($this->container['moveTo']) && !in_array($this->container['moveTo'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'moveTo', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStoryTypeAllowableValues()
    {
        return [
            self::STORY_TYPE_FEATURE,
            self::STORY_TYPE_CHORE,
            self::STORY_TYPE_BUG,];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMoveToAllowableValues()
    {
        return [
            self::MOVE_TO_LAST,
            self::MOVE_TO_FIRST,];
    }

    /**
     * Gets archived
     *
     * @return bool
     */
    public function getArchived()
    {
        return $this->container['archived'];
    }

    /**
     * Sets archived
     *
     * @param bool $archived If the Stories should be archived or not.
     *
     * @return $this
     */
    public function setArchived($archived)
    {
        $this->container['archived'] = $archived;

        return $this;
    }

    /**
     * Gets storyIds
     *
     * @return int[]
     */
    public function getStoryIds()
    {
        return $this->container['storyIds'];
    }

    /**
     * Sets storyIds
     *
     * @param int[] $storyIds The Ids of the Stories you wish to update.
     *
     * @return $this
     */
    public function setStoryIds($storyIds)
    {
        $this->container['storyIds'] = $storyIds;

        return $this;
    }

    /**
     * Gets storyType
     *
     * @return string
     */
    public function getStoryType()
    {
        return $this->container['storyType'];
    }

    /**
     * Sets storyType
     *
     * @param string $storyType The type of story (feature, bug, chore).
     *
     * @return $this
     */
    public function setStoryType($storyType)
    {
        $allowedValues = $this->getStoryTypeAllowableValues();
        if (!is_null($storyType) && !in_array($storyType, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value for 'storyType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['storyType'] = $storyType;

        return $this;
    }

    /**
     * Gets moveTo
     *
     * @return string
     */
    public function getMoveTo()
    {
        return $this->container['moveTo'];
    }

    /**
     * Sets moveTo
     *
     * @param string $moveTo One of \"first\" or \"last\". This can be used to move the given story to the first or last position in the workflow state.
     *
     * @return $this
     */
    public function setMoveTo($moveTo)
    {
        $allowedValues = $this->getMoveToAllowableValues();
        if (!is_null($moveTo) && !in_array($moveTo, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value for 'moveTo', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['moveTo'] = $moveTo;

        return $this;
    }

    /**
     * Gets followerIdsAdd
     *
     * @return string[]
     */
    public function getFollowerIdsAdd()
    {
        return $this->container['followerIdsAdd'];
    }

    /**
     * Sets followerIdsAdd
     *
     * @param string[] $followerIdsAdd The UUIDs of the new followers to be added.
     *
     * @return $this
     */
    public function setFollowerIdsAdd($followerIdsAdd)
    {
        $this->container['followerIdsAdd'] = $followerIdsAdd;

        return $this;
    }

    /**
     * Gets epicId
     *
     * @return int
     */
    public function getEpicId()
    {
        return $this->container['epicId'];
    }

    /**
     * Sets epicId
     *
     * @param int $epicId The ID of the epic the story belongs to.
     *
     * @return $this
     */
    public function setEpicId($epicId)
    {
        $this->container['epicId'] = $epicId;

        return $this;
    }

    /**
     * Gets externalLinks
     *
     * @return string[]
     */
    public function getExternalLinks()
    {
        return $this->container['externalLinks'];
    }

    /**
     * Sets externalLinks
     *
     * @param string[] $externalLinks An array of External Links associated with this story.
     *
     * @return $this
     */
    public function setExternalLinks($externalLinks)
    {
        $this->container['externalLinks'] = $externalLinks;

        return $this;
    }

    /**
     * Gets followerIdsRemove
     *
     * @return string[]
     */
    public function getFollowerIdsRemove()
    {
        return $this->container['followerIdsRemove'];
    }

    /**
     * Sets followerIdsRemove
     *
     * @param string[] $followerIdsRemove The UUIDs of the followers to be removed.
     *
     * @return $this
     */
    public function setFollowerIdsRemove($followerIdsRemove)
    {
        $this->container['followerIdsRemove'] = $followerIdsRemove;

        return $this;
    }

    /**
     * Gets requestedById
     *
     * @return string
     */
    public function getRequestedById()
    {
        return $this->container['requestedById'];
    }

    /**
     * Sets requestedById
     *
     * @param string $requestedById The ID of the member that requested the story.
     *
     * @return $this
     */
    public function setRequestedById($requestedById)
    {
        $this->container['requestedById'] = $requestedById;

        return $this;
    }

    /**
     * Gets iterationId
     *
     * @return int
     */
    public function getIterationId()
    {
        return $this->container['iterationId'];
    }

    /**
     * Sets iterationId
     *
     * @param int $iterationId The ID of the iteration the story belongs to.
     *
     * @return $this
     */
    public function setIterationId($iterationId)
    {
        $this->container['iterationId'] = $iterationId;

        return $this;
    }

    /**
     * Gets customFieldsRemove
     *
     * @return CustomFieldValueParams[]
     */
    public function getCustomFieldsRemove()
    {
        return $this->container['customFieldsRemove'];
    }

    /**
     * Sets customFieldsRemove
     *
     * @param CustomFieldValueParams[] $customFieldsRemove A map specifying a CustomField ID and CustomFieldEnumValue ID that represents an assertion of some value for a CustomField.
     *
     * @return $this
     */
    public function setCustomFieldsRemove($customFieldsRemove)
    {
        $this->container['customFieldsRemove'] = $customFieldsRemove;

        return $this;
    }

    /**
     * Gets labelsAdd
     *
     * @return CreateLabelParams[]
     */
    public function getLabelsAdd()
    {
        return $this->container['labelsAdd'];
    }

    /**
     * Sets labelsAdd
     *
     * @param CreateLabelParams[] $labelsAdd An array of labels to be added.
     *
     * @return $this
     */
    public function setLabelsAdd($labelsAdd)
    {
        $this->container['labelsAdd'] = $labelsAdd;

        return $this;
    }

    /**
     * Gets groupId
     *
     * @return string
     */
    public function getGroupId()
    {
        return $this->container['groupId'];
    }

    /**
     * Sets groupId
     *
     * @param string $groupId The Id of the Group the Stories should belong to.
     *
     * @return $this
     */
    public function setGroupId($groupId)
    {
        $this->container['groupId'] = $groupId;

        return $this;
    }

    /**
     * Gets workflowStateId
     *
     * @return int
     */
    public function getWorkflowStateId()
    {
        return $this->container['workflowStateId'];
    }

    /**
     * Sets workflowStateId
     *
     * @param int $workflowStateId The ID of the workflow state to put the stories in.
     *
     * @return $this
     */
    public function setWorkflowStateId($workflowStateId)
    {
        $this->container['workflowStateId'] = $workflowStateId;

        return $this;
    }

    /**
     * Gets beforeId
     *
     * @return int
     */
    public function getBeforeId()
    {
        return $this->container['beforeId'];
    }

    /**
     * Sets beforeId
     *
     * @param int $beforeId The ID of the story that the stories are to be moved before.
     *
     * @return $this
     */
    public function setBeforeId($beforeId)
    {
        $this->container['beforeId'] = $beforeId;

        return $this;
    }

    /**
     * Gets estimate
     *
     * @return int
     */
    public function getEstimate()
    {
        return $this->container['estimate'];
    }

    /**
     * Sets estimate
     *
     * @param int $estimate The numeric point estimate of the story. Can also be null, which means unestimated.
     *
     * @return $this
     */
    public function setEstimate($estimate)
    {
        $this->container['estimate'] = $estimate;

        return $this;
    }

    /**
     * Gets afterId
     *
     * @return int
     */
    public function getAfterId()
    {
        return $this->container['afterId'];
    }

    /**
     * Sets afterId
     *
     * @param int $afterId The ID of the story that the stories are to be moved below.
     *
     * @return $this
     */
    public function setAfterId($afterId)
    {
        $this->container['afterId'] = $afterId;

        return $this;
    }

    /**
     * Gets ownerIdsRemove
     *
     * @return string[]
     */
    public function getOwnerIdsRemove()
    {
        return $this->container['ownerIdsRemove'];
    }

    /**
     * Sets ownerIdsRemove
     *
     * @param string[] $ownerIdsRemove The UUIDs of the owners to be removed.
     *
     * @return $this
     */
    public function setOwnerIdsRemove($ownerIdsRemove)
    {
        $this->container['ownerIdsRemove'] = $ownerIdsRemove;

        return $this;
    }

    /**
     * Gets customFieldsAdd
     *
     * @return CustomFieldValueParams[]
     */
    public function getCustomFieldsAdd()
    {
        return $this->container['customFieldsAdd'];
    }

    /**
     * Sets customFieldsAdd
     *
     * @param CustomFieldValueParams[] $customFieldsAdd A map specifying a CustomField ID and CustomFieldEnumValue ID that represents an assertion of some value for a CustomField.
     *
     * @return $this
     */
    public function setCustomFieldsAdd($customFieldsAdd)
    {
        $this->container['customFieldsAdd'] = $customFieldsAdd;

        return $this;
    }

    /**
     * Gets projectId
     *
     * @return int
     */
    public function getProjectId()
    {
        return $this->container['projectId'];
    }

    /**
     * Sets projectId
     *
     * @param int $projectId The ID of the Project the Stories should belong to.
     *
     * @return $this
     */
    public function setProjectId($projectId)
    {
        $this->container['projectId'] = $projectId;

        return $this;
    }

    /**
     * Gets labelsRemove
     *
     * @return CreateLabelParams[]
     */
    public function getLabelsRemove()
    {
        return $this->container['labelsRemove'];
    }

    /**
     * Sets labelsRemove
     *
     * @param CreateLabelParams[] $labelsRemove An array of labels to be removed.
     *
     * @return $this
     */
    public function setLabelsRemove($labelsRemove)
    {
        $this->container['labelsRemove'] = $labelsRemove;

        return $this;
    }

    /**
     * Gets deadline
     *
     * @return DateTime
     */
    public function getDeadline()
    {
        return $this->container['deadline'];
    }

    /**
     * Sets deadline
     *
     * @param DateTime $deadline The due date of the story.
     *
     * @return $this
     */
    public function setDeadline($deadline)
    {
        $this->container['deadline'] = $deadline;

        return $this;
    }

    /**
     * Gets ownerIdsAdd
     *
     * @return string[]
     */
    public function getOwnerIdsAdd()
    {
        return $this->container['ownerIdsAdd'];
    }

    /**
     * Sets ownerIdsAdd
     *
     * @param string[] $ownerIdsAdd The UUIDs of the new owners to be added.
     *
     * @return $this
     */
    public function setOwnerIdsAdd($ownerIdsAdd)
    {
        $this->container['ownerIdsAdd'] = $ownerIdsAdd;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed $value Value to be set
     *
     * @return void
     */
    #[ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
