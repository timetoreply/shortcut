<?php
/**
 * CreateGroup
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Timetoreply\Shortcut
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Shortcut API
 *
 * Shortcut API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Timetoreply\Shortcut\Model;

use \ArrayAccess;
use \Timetoreply\Shortcut\ObjectSerializer;

/**
 * CreateGroup Class Doc Comment
 *
 * @category Class
 * @package  Timetoreply\Shortcut
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreateGroup implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CreateGroup';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'description' => 'string',
        'memberIds' => 'string[]',
        'workflowIds' => 'int[]',
        'name' => 'string',
        'mentionName' => 'string',
        'color' => 'string',
        'colorKey' => 'string',
        'displayIconId' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'description' => null,
        'memberIds' => 'uuid',
        'workflowIds' => 'int64',
        'name' => null,
        'mentionName' => null,
        'color' => 'css-color',
        'colorKey' => null,
        'displayIconId' => 'uuid'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'description' => false,
        'memberIds' => false,
        'workflowIds' => false,
        'name' => false,
        'mentionName' => false,
        'color' => false,
        'colorKey' => false,
        'displayIconId' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'description' => 'description',
        'memberIds' => 'member_ids',
        'workflowIds' => 'workflow_ids',
        'name' => 'name',
        'mentionName' => 'mention_name',
        'color' => 'color',
        'colorKey' => 'color_key',
        'displayIconId' => 'display_icon_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'description' => 'setDescription',
        'memberIds' => 'setMemberIds',
        'workflowIds' => 'setWorkflowIds',
        'name' => 'setName',
        'mentionName' => 'setMentionName',
        'color' => 'setColor',
        'colorKey' => 'setColorKey',
        'displayIconId' => 'setDisplayIconId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'description' => 'getDescription',
        'memberIds' => 'getMemberIds',
        'workflowIds' => 'getWorkflowIds',
        'name' => 'getName',
        'mentionName' => 'getMentionName',
        'color' => 'getColor',
        'colorKey' => 'getColorKey',
        'displayIconId' => 'getDisplayIconId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const COLOR_KEY_BLUE = 'blue';
    public const COLOR_KEY_PURPLE = 'purple';
    public const COLOR_KEY_MIDNIGHT_BLUE = 'midnight-blue';
    public const COLOR_KEY_ORANGE = 'orange';
    public const COLOR_KEY_YELLOW_GREEN = 'yellow-green';
    public const COLOR_KEY_BRASS = 'brass';
    public const COLOR_KEY_GRAY = 'gray';
    public const COLOR_KEY_FUCHSIA = 'fuchsia';
    public const COLOR_KEY_YELLOW = 'yellow';
    public const COLOR_KEY_PINK = 'pink';
    public const COLOR_KEY_SKY_BLUE = 'sky-blue';
    public const COLOR_KEY_GREEN = 'green';
    public const COLOR_KEY_RED = 'red';
    public const COLOR_KEY_BLACK = 'black';
    public const COLOR_KEY_SLATE = 'slate';
    public const COLOR_KEY_TURQUOISE = 'turquoise';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getColorKeyAllowableValues()
    {
        return [
            self::COLOR_KEY_BLUE,
            self::COLOR_KEY_PURPLE,
            self::COLOR_KEY_MIDNIGHT_BLUE,
            self::COLOR_KEY_ORANGE,
            self::COLOR_KEY_YELLOW_GREEN,
            self::COLOR_KEY_BRASS,
            self::COLOR_KEY_GRAY,
            self::COLOR_KEY_FUCHSIA,
            self::COLOR_KEY_YELLOW,
            self::COLOR_KEY_PINK,
            self::COLOR_KEY_SKY_BLUE,
            self::COLOR_KEY_GREEN,
            self::COLOR_KEY_RED,
            self::COLOR_KEY_BLACK,
            self::COLOR_KEY_SLATE,
            self::COLOR_KEY_TURQUOISE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('memberIds', $data ?? [], null);
        $this->setIfExists('workflowIds', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('mentionName', $data ?? [], null);
        $this->setIfExists('color', $data ?? [], null);
        $this->setIfExists('colorKey', $data ?? [], null);
        $this->setIfExists('displayIconId', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 4096)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 4096.";
        }

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 63)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 63.";
        }

        if ((mb_strlen($this->container['name']) < 1)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['mentionName'] === null) {
            $invalidProperties[] = "'mentionName' can't be null";
        }
        if ((mb_strlen($this->container['mentionName']) > 63)) {
            $invalidProperties[] = "invalid value for 'mentionName', the character length must be smaller than or equal to 63.";
        }

        if ((mb_strlen($this->container['mentionName']) < 1)) {
            $invalidProperties[] = "invalid value for 'mentionName', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['color']) && (mb_strlen($this->container['color']) < 1)) {
            $invalidProperties[] = "invalid value for 'color', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['color']) && !preg_match("/^#[a-fA-F0-9]{6}$/", $this->container['color'])) {
            $invalidProperties[] = "invalid value for 'color', must be conform to the pattern /^#[a-fA-F0-9]{6}$/.";
        }

        $allowedValues = $this->getColorKeyAllowableValues();
        if (!is_null($this->container['colorKey']) && !in_array($this->container['colorKey'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'colorKey', must be one of '%s'",
                $this->container['colorKey'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description The description of the Group.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        if ((mb_strlen($description) > 4096)) {
            throw new \InvalidArgumentException('invalid length for $description when calling CreateGroup., must be smaller than or equal to 4096.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets memberIds
     *
     * @return string[]|null
     */
    public function getMemberIds()
    {
        return $this->container['memberIds'];
    }

    /**
     * Sets memberIds
     *
     * @param string[]|null $memberIds The Member ids to add to this Group.
     *
     * @return self
     */
    public function setMemberIds($memberIds)
    {
        if (is_null($memberIds)) {
            throw new \InvalidArgumentException('non-nullable memberIds cannot be null');
        }


        $this->container['memberIds'] = $memberIds;

        return $this;
    }

    /**
     * Gets workflowIds
     *
     * @return int[]|null
     */
    public function getWorkflowIds()
    {
        return $this->container['workflowIds'];
    }

    /**
     * Sets workflowIds
     *
     * @param int[]|null $workflowIds The Workflow ids to add to the Group.
     *
     * @return self
     */
    public function setWorkflowIds($workflowIds)
    {
        if (is_null($workflowIds)) {
            throw new \InvalidArgumentException('non-nullable workflowIds cannot be null');
        }
        $this->container['workflowIds'] = $workflowIds;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of this Group.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        if ((mb_strlen($name) > 63)) {
            throw new \InvalidArgumentException('invalid length for $name when calling CreateGroup., must be smaller than or equal to 63.');
        }
        if ((mb_strlen($name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $name when calling CreateGroup., must be bigger than or equal to 1.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets mentionName
     *
     * @return string
     */
    public function getMentionName()
    {
        return $this->container['mentionName'];
    }

    /**
     * Sets mentionName
     *
     * @param string $mentionName The mention name of this Group.
     *
     * @return self
     */
    public function setMentionName($mentionName)
    {
        if (is_null($mentionName)) {
            throw new \InvalidArgumentException('non-nullable mentionName cannot be null');
        }
        if ((mb_strlen($mentionName) > 63)) {
            throw new \InvalidArgumentException('invalid length for $mentionName when calling CreateGroup., must be smaller than or equal to 63.');
        }
        if ((mb_strlen($mentionName) < 1)) {
            throw new \InvalidArgumentException('invalid length for $mentionName when calling CreateGroup., must be bigger than or equal to 1.');
        }

        $this->container['mentionName'] = $mentionName;

        return $this;
    }

    /**
     * Gets color
     *
     * @return string|null
     */
    public function getColor()
    {
        return $this->container['color'];
    }

    /**
     * Sets color
     *
     * @param string|null $color The color you wish to use for the Group in the system.
     *
     * @return self
     */
    public function setColor($color)
    {
        if (is_null($color)) {
            throw new \InvalidArgumentException('non-nullable color cannot be null');
        }

        if ((mb_strlen($color) < 1)) {
            throw new \InvalidArgumentException('invalid length for $color when calling CreateGroup., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/^#[a-fA-F0-9]{6}$/", ObjectSerializer::toString($color)))) {
            throw new \InvalidArgumentException("invalid value for \$color when calling CreateGroup., must conform to the pattern /^#[a-fA-F0-9]{6}$/.");
        }

        $this->container['color'] = $color;

        return $this;
    }

    /**
     * Gets colorKey
     *
     * @return string|null
     */
    public function getColorKey()
    {
        return $this->container['colorKey'];
    }

    /**
     * Sets colorKey
     *
     * @param string|null $colorKey The color key you wish to use for the Group in the system.
     *
     * @return self
     */
    public function setColorKey($colorKey)
    {
        if (is_null($colorKey)) {
            throw new \InvalidArgumentException('non-nullable colorKey cannot be null');
        }
        $allowedValues = $this->getColorKeyAllowableValues();
        if (!in_array($colorKey, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'colorKey', must be one of '%s'",
                    $colorKey,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['colorKey'] = $colorKey;

        return $this;
    }

    /**
     * Gets displayIconId
     *
     * @return string|null
     */
    public function getDisplayIconId()
    {
        return $this->container['displayIconId'];
    }

    /**
     * Sets displayIconId
     *
     * @param string|null $displayIconId The Icon id for the avatar of this Group.
     *
     * @return self
     */
    public function setDisplayIconId($displayIconId)
    {
        if (is_null($displayIconId)) {
            throw new \InvalidArgumentException('non-nullable displayIconId cannot be null');
        }
        $this->container['displayIconId'] = $displayIconId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


