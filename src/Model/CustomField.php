<?php
/**
 * CustomField
 *
 * PHP version 5
 *
 * @category Class
 * @package  Timetoreply\Shortcut
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Shortcut API
 *
 * Shortcut API
 *
 * OpenAPI spec version: 3.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.43-SNAPSHOT
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Timetoreply\Shortcut\Model;

use ArrayAccess;
use DateTime;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Timetoreply\Shortcut\ObjectSerializer;

/**
 * CustomField Class Doc Comment
 *
 * @category Class
 * @package  Timetoreply\Shortcut
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CustomField implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;
    const ENTITY_TYPE_CUSTOM_FIELD = 'custom-field';
    const FIELD_TYPE_ENUM = 'enum';
    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'CustomField';
    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'description' => 'string',
        'iconSetIdentifier' => 'string',
        'entityType' => 'string',
        'storyTypes' => 'string[]',
        'name' => 'string',
        'fixedPosition' => 'bool',
        'updatedAt' => '\DateTime',
        'id' => 'string',
        'values' => '\Timetoreply\Shortcut\Model\CustomFieldEnumValue[]',
        'fieldType' => 'string',
        'position' => 'int',
        'canonicalName' => 'string',
        'enabled' => 'bool',
        'createdAt' => '\DateTime'];
    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'description' => null,
        'iconSetIdentifier' => null,
        'entityType' => null,
        'storyTypes' => null,
        'name' => null,
        'fixedPosition' => null,
        'updatedAt' => 'date-time',
        'id' => 'uuid',
        'values' => null,
        'fieldType' => null,
        'position' => 'int64',
        'canonicalName' => null,
        'enabled' => null,
        'createdAt' => 'date-time'];
    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'description' => 'description',
        'iconSetIdentifier' => 'icon_set_identifier',
        'entityType' => 'entity_type',
        'storyTypes' => 'story_types',
        'name' => 'name',
        'fixedPosition' => 'fixed_position',
        'updatedAt' => 'updated_at',
        'id' => 'id',
        'values' => 'values',
        'fieldType' => 'field_type',
        'position' => 'position',
        'canonicalName' => 'canonical_name',
        'enabled' => 'enabled',
        'createdAt' => 'created_at'];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'description' => 'setDescription',
        'iconSetIdentifier' => 'setIconSetIdentifier',
        'entityType' => 'setEntityType',
        'storyTypes' => 'setStoryTypes',
        'name' => 'setName',
        'fixedPosition' => 'setFixedPosition',
        'updatedAt' => 'setUpdatedAt',
        'id' => 'setId',
        'values' => 'setValues',
        'fieldType' => 'setFieldType',
        'position' => 'setPosition',
        'canonicalName' => 'setCanonicalName',
        'enabled' => 'setEnabled',
        'createdAt' => 'setCreatedAt'];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'description' => 'getDescription',
        'iconSetIdentifier' => 'getIconSetIdentifier',
        'entityType' => 'getEntityType',
        'storyTypes' => 'getStoryTypes',
        'name' => 'getName',
        'fixedPosition' => 'getFixedPosition',
        'updatedAt' => 'getUpdatedAt',
        'id' => 'getId',
        'values' => 'getValues',
        'fieldType' => 'getFieldType',
        'position' => 'getPosition',
        'canonicalName' => 'getCanonicalName',
        'enabled' => 'getEnabled',
        'createdAt' => 'getCreatedAt'];
    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['iconSetIdentifier'] = isset($data['iconSetIdentifier']) ? $data['iconSetIdentifier'] : null;
        $this->container['entityType'] = isset($data['entityType']) ? $data['entityType'] : null;
        $this->container['storyTypes'] = isset($data['storyTypes']) ? $data['storyTypes'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['fixedPosition'] = isset($data['fixedPosition']) ? $data['fixedPosition'] : null;
        $this->container['updatedAt'] = isset($data['updatedAt']) ? $data['updatedAt'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['values'] = isset($data['values']) ? $data['values'] : null;
        $this->container['fieldType'] = isset($data['fieldType']) ? $data['fieldType'] : null;
        $this->container['position'] = isset($data['position']) ? $data['position'] : null;
        $this->container['canonicalName'] = isset($data['canonicalName']) ? $data['canonicalName'] : null;
        $this->container['enabled'] = isset($data['enabled']) ? $data['enabled'] : null;
        $this->container['createdAt'] = isset($data['createdAt']) ? $data['createdAt'] : null;
    }

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['entityType'] === null) {
            $invalidProperties[] = "'entityType' can't be null";
        }
        $allowedValues = $this->getEntityTypeAllowableValues();
        if (!is_null($this->container['entityType']) && !in_array($this->container['entityType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'entityType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['updatedAt'] === null) {
            $invalidProperties[] = "'updatedAt' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['fieldType'] === null) {
            $invalidProperties[] = "'fieldType' can't be null";
        }
        $allowedValues = $this->getFieldTypeAllowableValues();
        if (!is_null($this->container['fieldType']) && !in_array($this->container['fieldType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'fieldType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['position'] === null) {
            $invalidProperties[] = "'position' can't be null";
        }
        if ($this->container['enabled'] === null) {
            $invalidProperties[] = "'enabled' can't be null";
        }
        if ($this->container['createdAt'] === null) {
            $invalidProperties[] = "'createdAt' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEntityTypeAllowableValues()
    {
        return [
            self::ENTITY_TYPE_CUSTOM_FIELD,];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFieldTypeAllowableValues()
    {
        return [
            self::FIELD_TYPE_ENUM,];
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description A string description of the CustomField
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets iconSetIdentifier
     *
     * @return string
     */
    public function getIconSetIdentifier()
    {
        return $this->container['iconSetIdentifier'];
    }

    /**
     * Sets iconSetIdentifier
     *
     * @param string $iconSetIdentifier A string that represents the icon that corresponds to this custom field.
     *
     * @return $this
     */
    public function setIconSetIdentifier($iconSetIdentifier)
    {
        $this->container['iconSetIdentifier'] = $iconSetIdentifier;

        return $this;
    }

    /**
     * Gets entityType
     *
     * @return string
     */
    public function getEntityType()
    {
        return $this->container['entityType'];
    }

    /**
     * Sets entityType
     *
     * @param string $entityType A string description of this resource.
     *
     * @return $this
     */
    public function setEntityType($entityType)
    {
        $allowedValues = $this->getEntityTypeAllowableValues();
        if (!in_array($entityType, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value for 'entityType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['entityType'] = $entityType;

        return $this;
    }

    /**
     * Gets storyTypes
     *
     * @return string[]
     */
    public function getStoryTypes()
    {
        return $this->container['storyTypes'];
    }

    /**
     * Sets storyTypes
     *
     * @param string[] $storyTypes The types of stories this CustomField is scoped to.
     *
     * @return $this
     */
    public function setStoryTypes($storyTypes)
    {
        $this->container['storyTypes'] = $storyTypes;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the Custom Field.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets fixedPosition
     *
     * @return bool
     */
    public function getFixedPosition()
    {
        return $this->container['fixedPosition'];
    }

    /**
     * Sets fixedPosition
     *
     * @param bool $fixedPosition When true, the CustomFieldEnumValues may not be reordered.
     *
     * @return $this
     */
    public function setFixedPosition($fixedPosition)
    {
        $this->container['fixedPosition'] = $fixedPosition;

        return $this;
    }

    /**
     * Gets updatedAt
     *
     * @return DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updatedAt'];
    }

    /**
     * Sets updatedAt
     *
     * @param DateTime $updatedAt The instant when this CustomField was last updated.
     *
     * @return $this
     */
    public function setUpdatedAt($updatedAt)
    {
        $this->container['updatedAt'] = $updatedAt;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The unique public ID for the CustomField.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets values
     *
     * @return CustomFieldEnumValue[]
     */
    public function getValues()
    {
        return $this->container['values'];
    }

    /**
     * Sets values
     *
     * @param CustomFieldEnumValue[] $values A collection of legal values for a CustomField.
     *
     * @return $this
     */
    public function setValues($values)
    {
        $this->container['values'] = $values;

        return $this;
    }

    /**
     * Gets fieldType
     *
     * @return string
     */
    public function getFieldType()
    {
        return $this->container['fieldType'];
    }

    /**
     * Sets fieldType
     *
     * @param string $fieldType The type of Custom Field, eg. 'enum'.
     *
     * @return $this
     */
    public function setFieldType($fieldType)
    {
        $allowedValues = $this->getFieldTypeAllowableValues();
        if (!in_array($fieldType, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value for 'fieldType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fieldType'] = $fieldType;

        return $this;
    }

    /**
     * Gets position
     *
     * @return int
     */
    public function getPosition()
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     *
     * @param int $position An integer indicating the position of this Custom Field with respect to the other CustomField
     *
     * @return $this
     */
    public function setPosition($position)
    {
        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets canonicalName
     *
     * @return string
     */
    public function getCanonicalName()
    {
        return $this->container['canonicalName'];
    }

    /**
     * Sets canonicalName
     *
     * @param string $canonicalName The canonical name for a Shortcut-defined field.
     *
     * @return $this
     */
    public function setCanonicalName($canonicalName)
    {
        $this->container['canonicalName'] = $canonicalName;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool $enabled When true, the CustomField can be applied to entities in the Workspace.
     *
     * @return $this
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param DateTime $createdAt The instant when this CustomField was created.
     *
     * @return $this
     */
    public function setCreatedAt($createdAt)
    {
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed $value Value to be set
     *
     * @return void
     */
    #[ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
