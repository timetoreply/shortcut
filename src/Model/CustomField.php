<?php
/**
 * CustomField
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Timetoreply\Shortcut
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Shortcut API
 *
 * Shortcut API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Timetoreply\Shortcut\Model;

use \ArrayAccess;
use \Timetoreply\Shortcut\ObjectSerializer;

/**
 * CustomField Class Doc Comment
 *
 * @category Class
 * @package  Timetoreply\Shortcut
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CustomField implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CustomField';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'description' => 'string',
        'iconSetIdentifier' => 'string',
        'entityType' => 'string',
        'storyTypes' => 'string[]',
        'name' => 'string',
        'fixedPosition' => 'bool',
        'updatedAt' => '\DateTime',
        'id' => 'string',
        'values' => '\Timetoreply\Shortcut\Model\CustomFieldEnumValue[]',
        'fieldType' => 'string',
        'position' => 'int',
        'canonicalName' => 'string',
        'enabled' => 'bool',
        'createdAt' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'description' => null,
        'iconSetIdentifier' => null,
        'entityType' => null,
        'storyTypes' => null,
        'name' => null,
        'fixedPosition' => null,
        'updatedAt' => 'date-time',
        'id' => 'uuid',
        'values' => null,
        'fieldType' => null,
        'position' => 'int64',
        'canonicalName' => null,
        'enabled' => null,
        'createdAt' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'description' => false,
        'iconSetIdentifier' => false,
        'entityType' => false,
        'storyTypes' => false,
        'name' => false,
        'fixedPosition' => false,
        'updatedAt' => false,
        'id' => false,
        'values' => false,
        'fieldType' => false,
        'position' => false,
        'canonicalName' => false,
        'enabled' => false,
        'createdAt' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'description' => 'description',
        'iconSetIdentifier' => 'icon_set_identifier',
        'entityType' => 'entity_type',
        'storyTypes' => 'story_types',
        'name' => 'name',
        'fixedPosition' => 'fixed_position',
        'updatedAt' => 'updated_at',
        'id' => 'id',
        'values' => 'values',
        'fieldType' => 'field_type',
        'position' => 'position',
        'canonicalName' => 'canonical_name',
        'enabled' => 'enabled',
        'createdAt' => 'created_at'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'description' => 'setDescription',
        'iconSetIdentifier' => 'setIconSetIdentifier',
        'entityType' => 'setEntityType',
        'storyTypes' => 'setStoryTypes',
        'name' => 'setName',
        'fixedPosition' => 'setFixedPosition',
        'updatedAt' => 'setUpdatedAt',
        'id' => 'setId',
        'values' => 'setValues',
        'fieldType' => 'setFieldType',
        'position' => 'setPosition',
        'canonicalName' => 'setCanonicalName',
        'enabled' => 'setEnabled',
        'createdAt' => 'setCreatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'description' => 'getDescription',
        'iconSetIdentifier' => 'getIconSetIdentifier',
        'entityType' => 'getEntityType',
        'storyTypes' => 'getStoryTypes',
        'name' => 'getName',
        'fixedPosition' => 'getFixedPosition',
        'updatedAt' => 'getUpdatedAt',
        'id' => 'getId',
        'values' => 'getValues',
        'fieldType' => 'getFieldType',
        'position' => 'getPosition',
        'canonicalName' => 'getCanonicalName',
        'enabled' => 'getEnabled',
        'createdAt' => 'getCreatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const ENTITY_TYPE_CUSTOM_FIELD = 'custom-field';
    public const FIELD_TYPE_ENUM = 'enum';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEntityTypeAllowableValues()
    {
        return [
            self::ENTITY_TYPE_CUSTOM_FIELD,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFieldTypeAllowableValues()
    {
        return [
            self::FIELD_TYPE_ENUM,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('iconSetIdentifier', $data ?? [], null);
        $this->setIfExists('entityType', $data ?? [], null);
        $this->setIfExists('storyTypes', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('fixedPosition', $data ?? [], null);
        $this->setIfExists('updatedAt', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('values', $data ?? [], null);
        $this->setIfExists('fieldType', $data ?? [], null);
        $this->setIfExists('position', $data ?? [], null);
        $this->setIfExists('canonicalName', $data ?? [], null);
        $this->setIfExists('enabled', $data ?? [], null);
        $this->setIfExists('createdAt', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 512)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) < 1)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['iconSetIdentifier']) && (mb_strlen($this->container['iconSetIdentifier']) > 63)) {
            $invalidProperties[] = "invalid value for 'iconSetIdentifier', the character length must be smaller than or equal to 63.";
        }

        if (!is_null($this->container['iconSetIdentifier']) && (mb_strlen($this->container['iconSetIdentifier']) < 1)) {
            $invalidProperties[] = "invalid value for 'iconSetIdentifier', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['entityType'] === null) {
            $invalidProperties[] = "'entityType' can't be null";
        }
        $allowedValues = $this->getEntityTypeAllowableValues();
        if (!is_null($this->container['entityType']) && !in_array($this->container['entityType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'entityType', must be one of '%s'",
                $this->container['entityType'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 63)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 63.";
        }

        if ((mb_strlen($this->container['name']) < 1)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['updatedAt'] === null) {
            $invalidProperties[] = "'updatedAt' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['fieldType'] === null) {
            $invalidProperties[] = "'fieldType' can't be null";
        }
        $allowedValues = $this->getFieldTypeAllowableValues();
        if (!is_null($this->container['fieldType']) && !in_array($this->container['fieldType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'fieldType', must be one of '%s'",
                $this->container['fieldType'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['position'] === null) {
            $invalidProperties[] = "'position' can't be null";
        }
        if ($this->container['enabled'] === null) {
            $invalidProperties[] = "'enabled' can't be null";
        }
        if ($this->container['createdAt'] === null) {
            $invalidProperties[] = "'createdAt' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description A string description of the CustomField
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        if ((mb_strlen($description) > 512)) {
            throw new \InvalidArgumentException('invalid length for $description when calling CustomField., must be smaller than or equal to 512.');
        }
        if ((mb_strlen($description) < 1)) {
            throw new \InvalidArgumentException('invalid length for $description when calling CustomField., must be bigger than or equal to 1.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets iconSetIdentifier
     *
     * @return string|null
     */
    public function getIconSetIdentifier()
    {
        return $this->container['iconSetIdentifier'];
    }

    /**
     * Sets iconSetIdentifier
     *
     * @param string|null $iconSetIdentifier A string that represents the icon that corresponds to this custom field.
     *
     * @return self
     */
    public function setIconSetIdentifier($iconSetIdentifier)
    {
        if (is_null($iconSetIdentifier)) {
            throw new \InvalidArgumentException('non-nullable iconSetIdentifier cannot be null');
        }
        if ((mb_strlen($iconSetIdentifier) > 63)) {
            throw new \InvalidArgumentException('invalid length for $iconSetIdentifier when calling CustomField., must be smaller than or equal to 63.');
        }
        if ((mb_strlen($iconSetIdentifier) < 1)) {
            throw new \InvalidArgumentException('invalid length for $iconSetIdentifier when calling CustomField., must be bigger than or equal to 1.');
        }

        $this->container['iconSetIdentifier'] = $iconSetIdentifier;

        return $this;
    }

    /**
     * Gets entityType
     *
     * @return string
     */
    public function getEntityType()
    {
        return $this->container['entityType'];
    }

    /**
     * Sets entityType
     *
     * @param string $entityType A string description of this resource.
     *
     * @return self
     */
    public function setEntityType($entityType)
    {
        if (is_null($entityType)) {
            throw new \InvalidArgumentException('non-nullable entityType cannot be null');
        }
        $allowedValues = $this->getEntityTypeAllowableValues();
        if (!in_array($entityType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'entityType', must be one of '%s'",
                    $entityType,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['entityType'] = $entityType;

        return $this;
    }

    /**
     * Gets storyTypes
     *
     * @return string[]|null
     */
    public function getStoryTypes()
    {
        return $this->container['storyTypes'];
    }

    /**
     * Sets storyTypes
     *
     * @param string[]|null $storyTypes The types of stories this CustomField is scoped to.
     *
     * @return self
     */
    public function setStoryTypes($storyTypes)
    {
        if (is_null($storyTypes)) {
            throw new \InvalidArgumentException('non-nullable storyTypes cannot be null');
        }
        $this->container['storyTypes'] = $storyTypes;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the Custom Field.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        if ((mb_strlen($name) > 63)) {
            throw new \InvalidArgumentException('invalid length for $name when calling CustomField., must be smaller than or equal to 63.');
        }
        if ((mb_strlen($name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $name when calling CustomField., must be bigger than or equal to 1.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets fixedPosition
     *
     * @return bool|null
     */
    public function getFixedPosition()
    {
        return $this->container['fixedPosition'];
    }

    /**
     * Sets fixedPosition
     *
     * @param bool|null $fixedPosition When true, the CustomFieldEnumValues may not be reordered.
     *
     * @return self
     */
    public function setFixedPosition($fixedPosition)
    {
        if (is_null($fixedPosition)) {
            throw new \InvalidArgumentException('non-nullable fixedPosition cannot be null');
        }
        $this->container['fixedPosition'] = $fixedPosition;

        return $this;
    }

    /**
     * Gets updatedAt
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updatedAt'];
    }

    /**
     * Sets updatedAt
     *
     * @param \DateTime $updatedAt The instant when this CustomField was last updated.
     *
     * @return self
     */
    public function setUpdatedAt($updatedAt)
    {
        if (is_null($updatedAt)) {
            throw new \InvalidArgumentException('non-nullable updatedAt cannot be null');
        }
        $this->container['updatedAt'] = $updatedAt;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The unique public ID for the CustomField.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets values
     *
     * @return \Timetoreply\Shortcut\Model\CustomFieldEnumValue[]|null
     */
    public function getValues()
    {
        return $this->container['values'];
    }

    /**
     * Sets values
     *
     * @param \Timetoreply\Shortcut\Model\CustomFieldEnumValue[]|null $values A collection of legal values for a CustomField.
     *
     * @return self
     */
    public function setValues($values)
    {
        if (is_null($values)) {
            throw new \InvalidArgumentException('non-nullable values cannot be null');
        }
        $this->container['values'] = $values;

        return $this;
    }

    /**
     * Gets fieldType
     *
     * @return string
     */
    public function getFieldType()
    {
        return $this->container['fieldType'];
    }

    /**
     * Sets fieldType
     *
     * @param string $fieldType The type of Custom Field, eg. 'enum'.
     *
     * @return self
     */
    public function setFieldType($fieldType)
    {
        if (is_null($fieldType)) {
            throw new \InvalidArgumentException('non-nullable fieldType cannot be null');
        }
        $allowedValues = $this->getFieldTypeAllowableValues();
        if (!in_array($fieldType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'fieldType', must be one of '%s'",
                    $fieldType,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fieldType'] = $fieldType;

        return $this;
    }

    /**
     * Gets position
     *
     * @return int
     */
    public function getPosition()
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     *
     * @param int $position An integer indicating the position of this Custom Field with respect to the other CustomField
     *
     * @return self
     */
    public function setPosition($position)
    {
        if (is_null($position)) {
            throw new \InvalidArgumentException('non-nullable position cannot be null');
        }
        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets canonicalName
     *
     * @return string|null
     */
    public function getCanonicalName()
    {
        return $this->container['canonicalName'];
    }

    /**
     * Sets canonicalName
     *
     * @param string|null $canonicalName The canonical name for a Shortcut-defined field.
     *
     * @return self
     */
    public function setCanonicalName($canonicalName)
    {
        if (is_null($canonicalName)) {
            throw new \InvalidArgumentException('non-nullable canonicalName cannot be null');
        }
        $this->container['canonicalName'] = $canonicalName;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool $enabled When true, the CustomField can be applied to entities in the Workspace.
     *
     * @return self
     */
    public function setEnabled($enabled)
    {
        if (is_null($enabled)) {
            throw new \InvalidArgumentException('non-nullable enabled cannot be null');
        }
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param \DateTime $createdAt The instant when this CustomField was created.
     *
     * @return self
     */
    public function setCreatedAt($createdAt)
    {
        if (is_null($createdAt)) {
            throw new \InvalidArgumentException('non-nullable createdAt cannot be null');
        }
        $this->container['createdAt'] = $createdAt;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


