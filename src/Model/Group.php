<?php
/**
 * Group
 *
 * PHP version 5
 *
 * @category Class
 * @package  Timetoreply\Shortcut
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Shortcut API
 *
 * Shortcut API
 *
 * OpenAPI spec version: 3.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.43-SNAPSHOT
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Timetoreply\Shortcut\Model;

use ArrayAccess;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Timetoreply\Shortcut\ObjectSerializer;

/**
 * Group Class Doc Comment
 *
 * @category Class
 * @description A Group.
 * @package  Timetoreply\Shortcut
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Group implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;
    const COLOR_KEY_BLUE = 'blue';
    const COLOR_KEY_PURPLE = 'purple';
    const COLOR_KEY_MIDNIGHT_BLUE = 'midnight-blue';
    const COLOR_KEY_ORANGE = 'orange';
    const COLOR_KEY_YELLOW_GREEN = 'yellow-green';
    const COLOR_KEY_BRASS = 'brass';
    const COLOR_KEY_GRAY = 'gray';
    const COLOR_KEY_FUCHSIA = 'fuchsia';
    const COLOR_KEY_YELLOW = 'yellow';
    const COLOR_KEY_PINK = 'pink';
    const COLOR_KEY_SKY_BLUE = 'sky-blue';
    const COLOR_KEY_GREEN = 'green';
    const COLOR_KEY_RED = 'red';
    const COLOR_KEY_BLACK = 'black';
    const COLOR_KEY_SLATE = 'slate';
    const COLOR_KEY_TURQUOISE = 'turquoise';
    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'Group';
    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'appUrl' => 'string',
        'description' => 'string',
        'archived' => 'bool',
        'entityType' => 'string',
        'color' => 'string',
        'numStoriesStarted' => 'int',
        'mentionName' => 'string',
        'name' => 'string',
        'globalId' => 'string',
        'colorKey' => 'string',
        'numStories' => 'int',
        'numEpicsStarted' => 'int',
        'numStoriesBacklog' => 'int',
        'id' => 'string',
        'displayIcon' => '\Timetoreply\Shortcut\Model\Icon',
        'memberIds' => 'string[]',
        'workflowIds' => 'int[]'];
    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'appUrl' => null,
        'description' => null,
        'archived' => null,
        'entityType' => null,
        'color' => 'css-color',
        'numStoriesStarted' => 'int64',
        'mentionName' => null,
        'name' => null,
        'globalId' => null,
        'colorKey' => null,
        'numStories' => 'int64',
        'numEpicsStarted' => 'int64',
        'numStoriesBacklog' => 'int64',
        'id' => 'uuid',
        'displayIcon' => null,
        'memberIds' => 'uuid',
        'workflowIds' => 'int64'];
    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'appUrl' => 'app_url',
        'description' => 'description',
        'archived' => 'archived',
        'entityType' => 'entity_type',
        'color' => 'color',
        'numStoriesStarted' => 'num_stories_started',
        'mentionName' => 'mention_name',
        'name' => 'name',
        'globalId' => 'global_id',
        'colorKey' => 'color_key',
        'numStories' => 'num_stories',
        'numEpicsStarted' => 'num_epics_started',
        'numStoriesBacklog' => 'num_stories_backlog',
        'id' => 'id',
        'displayIcon' => 'display_icon',
        'memberIds' => 'member_ids',
        'workflowIds' => 'workflow_ids'];
    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'appUrl' => 'setAppUrl',
        'description' => 'setDescription',
        'archived' => 'setArchived',
        'entityType' => 'setEntityType',
        'color' => 'setColor',
        'numStoriesStarted' => 'setNumStoriesStarted',
        'mentionName' => 'setMentionName',
        'name' => 'setName',
        'globalId' => 'setGlobalId',
        'colorKey' => 'setColorKey',
        'numStories' => 'setNumStories',
        'numEpicsStarted' => 'setNumEpicsStarted',
        'numStoriesBacklog' => 'setNumStoriesBacklog',
        'id' => 'setId',
        'displayIcon' => 'setDisplayIcon',
        'memberIds' => 'setMemberIds',
        'workflowIds' => 'setWorkflowIds'];
    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'appUrl' => 'getAppUrl',
        'description' => 'getDescription',
        'archived' => 'getArchived',
        'entityType' => 'getEntityType',
        'color' => 'getColor',
        'numStoriesStarted' => 'getNumStoriesStarted',
        'mentionName' => 'getMentionName',
        'name' => 'getName',
        'globalId' => 'getGlobalId',
        'colorKey' => 'getColorKey',
        'numStories' => 'getNumStories',
        'numEpicsStarted' => 'getNumEpicsStarted',
        'numStoriesBacklog' => 'getNumStoriesBacklog',
        'id' => 'getId',
        'displayIcon' => 'getDisplayIcon',
        'memberIds' => 'getMemberIds',
        'workflowIds' => 'getWorkflowIds'];
    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['appUrl'] = isset($data['appUrl']) ? $data['appUrl'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['archived'] = isset($data['archived']) ? $data['archived'] : null;
        $this->container['entityType'] = isset($data['entityType']) ? $data['entityType'] : null;
        $this->container['color'] = isset($data['color']) ? $data['color'] : null;
        $this->container['numStoriesStarted'] = isset($data['numStoriesStarted']) ? $data['numStoriesStarted'] : null;
        $this->container['mentionName'] = isset($data['mentionName']) ? $data['mentionName'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['globalId'] = isset($data['globalId']) ? $data['globalId'] : null;
        $this->container['colorKey'] = isset($data['colorKey']) ? $data['colorKey'] : null;
        $this->container['numStories'] = isset($data['numStories']) ? $data['numStories'] : null;
        $this->container['numEpicsStarted'] = isset($data['numEpicsStarted']) ? $data['numEpicsStarted'] : null;
        $this->container['numStoriesBacklog'] = isset($data['numStoriesBacklog']) ? $data['numStoriesBacklog'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['displayIcon'] = isset($data['displayIcon']) ? $data['displayIcon'] : null;
        $this->container['memberIds'] = isset($data['memberIds']) ? $data['memberIds'] : null;
        $this->container['workflowIds'] = isset($data['workflowIds']) ? $data['workflowIds'] : null;
    }

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['appUrl'] === null) {
            $invalidProperties[] = "'appUrl' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ($this->container['archived'] === null) {
            $invalidProperties[] = "'archived' can't be null";
        }
        if ($this->container['entityType'] === null) {
            $invalidProperties[] = "'entityType' can't be null";
        }
        if ($this->container['color'] === null) {
            $invalidProperties[] = "'color' can't be null";
        }
        if ($this->container['numStoriesStarted'] === null) {
            $invalidProperties[] = "'numStoriesStarted' can't be null";
        }
        if ($this->container['mentionName'] === null) {
            $invalidProperties[] = "'mentionName' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['globalId'] === null) {
            $invalidProperties[] = "'globalId' can't be null";
        }
        if ($this->container['colorKey'] === null) {
            $invalidProperties[] = "'colorKey' can't be null";
        }
        $allowedValues = $this->getColorKeyAllowableValues();
        if (!is_null($this->container['colorKey']) && !in_array($this->container['colorKey'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'colorKey', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['numStories'] === null) {
            $invalidProperties[] = "'numStories' can't be null";
        }
        if ($this->container['numEpicsStarted'] === null) {
            $invalidProperties[] = "'numEpicsStarted' can't be null";
        }
        if ($this->container['numStoriesBacklog'] === null) {
            $invalidProperties[] = "'numStoriesBacklog' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['displayIcon'] === null) {
            $invalidProperties[] = "'displayIcon' can't be null";
        }
        if ($this->container['memberIds'] === null) {
            $invalidProperties[] = "'memberIds' can't be null";
        }
        if ($this->container['workflowIds'] === null) {
            $invalidProperties[] = "'workflowIds' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getColorKeyAllowableValues()
    {
        return [
            self::COLOR_KEY_BLUE,
            self::COLOR_KEY_PURPLE,
            self::COLOR_KEY_MIDNIGHT_BLUE,
            self::COLOR_KEY_ORANGE,
            self::COLOR_KEY_YELLOW_GREEN,
            self::COLOR_KEY_BRASS,
            self::COLOR_KEY_GRAY,
            self::COLOR_KEY_FUCHSIA,
            self::COLOR_KEY_YELLOW,
            self::COLOR_KEY_PINK,
            self::COLOR_KEY_SKY_BLUE,
            self::COLOR_KEY_GREEN,
            self::COLOR_KEY_RED,
            self::COLOR_KEY_BLACK,
            self::COLOR_KEY_SLATE,
            self::COLOR_KEY_TURQUOISE,];
    }

    /**
     * Gets appUrl
     *
     * @return string
     */
    public function getAppUrl()
    {
        return $this->container['appUrl'];
    }

    /**
     * Sets appUrl
     *
     * @param string $appUrl The Shortcut application url for the Group.
     *
     * @return $this
     */
    public function setAppUrl($appUrl)
    {
        $this->container['appUrl'] = $appUrl;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description The description of the Group.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets archived
     *
     * @return bool
     */
    public function getArchived()
    {
        return $this->container['archived'];
    }

    /**
     * Sets archived
     *
     * @param bool $archived Whether or not the Group is archived.
     *
     * @return $this
     */
    public function setArchived($archived)
    {
        $this->container['archived'] = $archived;

        return $this;
    }

    /**
     * Gets entityType
     *
     * @return string
     */
    public function getEntityType()
    {
        return $this->container['entityType'];
    }

    /**
     * Sets entityType
     *
     * @param string $entityType A string description of this resource.
     *
     * @return $this
     */
    public function setEntityType($entityType)
    {
        $this->container['entityType'] = $entityType;

        return $this;
    }

    /**
     * Gets color
     *
     * @return string
     */
    public function getColor()
    {
        return $this->container['color'];
    }

    /**
     * Sets color
     *
     * @param string $color The hex color to be displayed with the Group (for example, \"#ff0000\").
     *
     * @return $this
     */
    public function setColor($color)
    {
        $this->container['color'] = $color;

        return $this;
    }

    /**
     * Gets numStoriesStarted
     *
     * @return int
     */
    public function getNumStoriesStarted()
    {
        return $this->container['numStoriesStarted'];
    }

    /**
     * Sets numStoriesStarted
     *
     * @param int $numStoriesStarted The number of stories assigned to the group which are in a started workflow state.
     *
     * @return $this
     */
    public function setNumStoriesStarted($numStoriesStarted)
    {
        $this->container['numStoriesStarted'] = $numStoriesStarted;

        return $this;
    }

    /**
     * Gets mentionName
     *
     * @return string
     */
    public function getMentionName()
    {
        return $this->container['mentionName'];
    }

    /**
     * Sets mentionName
     *
     * @param string $mentionName The mention name of the Group.
     *
     * @return $this
     */
    public function setMentionName($mentionName)
    {
        $this->container['mentionName'] = $mentionName;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the Group.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets globalId
     *
     * @return string
     */
    public function getGlobalId()
    {
        return $this->container['globalId'];
    }

    /**
     * Sets globalId
     *
     * @param string $globalId globalId
     *
     * @return $this
     */
    public function setGlobalId($globalId)
    {
        $this->container['globalId'] = $globalId;

        return $this;
    }

    /**
     * Gets colorKey
     *
     * @return string
     */
    public function getColorKey()
    {
        return $this->container['colorKey'];
    }

    /**
     * Sets colorKey
     *
     * @param string $colorKey The color key to be displayed with the Group.
     *
     * @return $this
     */
    public function setColorKey($colorKey)
    {
        $allowedValues = $this->getColorKeyAllowableValues();
        if (!in_array($colorKey, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value for 'colorKey', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['colorKey'] = $colorKey;

        return $this;
    }

    /**
     * Gets numStories
     *
     * @return int
     */
    public function getNumStories()
    {
        return $this->container['numStories'];
    }

    /**
     * Sets numStories
     *
     * @param int $numStories The total number of stories assigned ot the group.
     *
     * @return $this
     */
    public function setNumStories($numStories)
    {
        $this->container['numStories'] = $numStories;

        return $this;
    }

    /**
     * Gets numEpicsStarted
     *
     * @return int
     */
    public function getNumEpicsStarted()
    {
        return $this->container['numEpicsStarted'];
    }

    /**
     * Sets numEpicsStarted
     *
     * @param int $numEpicsStarted The number of epics assigned to the group which are in the started workflow state.
     *
     * @return $this
     */
    public function setNumEpicsStarted($numEpicsStarted)
    {
        $this->container['numEpicsStarted'] = $numEpicsStarted;

        return $this;
    }

    /**
     * Gets numStoriesBacklog
     *
     * @return int
     */
    public function getNumStoriesBacklog()
    {
        return $this->container['numStoriesBacklog'];
    }

    /**
     * Sets numStoriesBacklog
     *
     * @param int $numStoriesBacklog The number of stories assigned to the group which are in a backlog workflow state.
     *
     * @return $this
     */
    public function setNumStoriesBacklog($numStoriesBacklog)
    {
        $this->container['numStoriesBacklog'] = $numStoriesBacklog;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The id of the Group.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets displayIcon
     *
     * @return Icon
     */
    public function getDisplayIcon()
    {
        return $this->container['displayIcon'];
    }

    /**
     * Sets displayIcon
     *
     * @param Icon $displayIcon displayIcon
     *
     * @return $this
     */
    public function setDisplayIcon($displayIcon)
    {
        $this->container['displayIcon'] = $displayIcon;

        return $this;
    }

    /**
     * Gets memberIds
     *
     * @return string[]
     */
    public function getMemberIds()
    {
        return $this->container['memberIds'];
    }

    /**
     * Sets memberIds
     *
     * @param string[] $memberIds The Member IDs contain within the Group.
     *
     * @return $this
     */
    public function setMemberIds($memberIds)
    {
        $this->container['memberIds'] = $memberIds;

        return $this;
    }

    /**
     * Gets workflowIds
     *
     * @return int[]
     */
    public function getWorkflowIds()
    {
        return $this->container['workflowIds'];
    }

    /**
     * Sets workflowIds
     *
     * @param int[] $workflowIds The Workflow IDs contained within the Group.
     *
     * @return $this
     */
    public function setWorkflowIds($workflowIds)
    {
        $this->container['workflowIds'] = $workflowIds;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed $value Value to be set
     *
     * @return void
     */
    #[ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
