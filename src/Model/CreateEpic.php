<?php
/**
 * CreateEpic
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Timetoreply\Shortcut
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Shortcut API
 *
 * Shortcut API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Timetoreply\Shortcut\Model;

use \ArrayAccess;
use \Timetoreply\Shortcut\ObjectSerializer;

/**
 * CreateEpic Class Doc Comment
 *
 * @category Class
 * @package  Timetoreply\Shortcut
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreateEpic implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CreateEpic';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'description' => 'string',
        'labels' => '\Timetoreply\Shortcut\Model\CreateLabelParams[]',
        'completedAtOverride' => '\DateTime',
        'objectiveIds' => 'int[]',
        'name' => 'string',
        'plannedStartDate' => '\DateTime',
        'state' => 'string',
        'milestoneId' => 'int',
        'requestedById' => 'string',
        'epicStateId' => 'int',
        'startedAtOverride' => '\DateTime',
        'groupId' => 'string',
        'updatedAt' => '\DateTime',
        'followerIds' => 'string[]',
        'groupIds' => 'string[]',
        'convertedFromStoryId' => 'int',
        'ownerIds' => 'string[]',
        'externalId' => 'string',
        'deadline' => '\DateTime',
        'createdAt' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'description' => null,
        'labels' => null,
        'completedAtOverride' => 'date-time',
        'objectiveIds' => 'int64',
        'name' => null,
        'plannedStartDate' => 'date-time',
        'state' => null,
        'milestoneId' => 'int64',
        'requestedById' => 'uuid',
        'epicStateId' => 'int64',
        'startedAtOverride' => 'date-time',
        'groupId' => 'uuid',
        'updatedAt' => 'date-time',
        'followerIds' => 'uuid',
        'groupIds' => 'uuid',
        'convertedFromStoryId' => 'int64',
        'ownerIds' => 'uuid',
        'externalId' => null,
        'deadline' => 'date-time',
        'createdAt' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'description' => false,
        'labels' => false,
        'completedAtOverride' => false,
        'objectiveIds' => false,
        'name' => false,
        'plannedStartDate' => true,
        'state' => false,
        'milestoneId' => true,
        'requestedById' => false,
        'epicStateId' => false,
        'startedAtOverride' => false,
        'groupId' => true,
        'updatedAt' => false,
        'followerIds' => false,
        'groupIds' => false,
        'convertedFromStoryId' => true,
        'ownerIds' => false,
        'externalId' => false,
        'deadline' => true,
        'createdAt' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'description' => 'description',
        'labels' => 'labels',
        'completedAtOverride' => 'completed_at_override',
        'objectiveIds' => 'objective_ids',
        'name' => 'name',
        'plannedStartDate' => 'planned_start_date',
        'state' => 'state',
        'milestoneId' => 'milestone_id',
        'requestedById' => 'requested_by_id',
        'epicStateId' => 'epic_state_id',
        'startedAtOverride' => 'started_at_override',
        'groupId' => 'group_id',
        'updatedAt' => 'updated_at',
        'followerIds' => 'follower_ids',
        'groupIds' => 'group_ids',
        'convertedFromStoryId' => 'converted_from_story_id',
        'ownerIds' => 'owner_ids',
        'externalId' => 'external_id',
        'deadline' => 'deadline',
        'createdAt' => 'created_at'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'description' => 'setDescription',
        'labels' => 'setLabels',
        'completedAtOverride' => 'setCompletedAtOverride',
        'objectiveIds' => 'setObjectiveIds',
        'name' => 'setName',
        'plannedStartDate' => 'setPlannedStartDate',
        'state' => 'setState',
        'milestoneId' => 'setMilestoneId',
        'requestedById' => 'setRequestedById',
        'epicStateId' => 'setEpicStateId',
        'startedAtOverride' => 'setStartedAtOverride',
        'groupId' => 'setGroupId',
        'updatedAt' => 'setUpdatedAt',
        'followerIds' => 'setFollowerIds',
        'groupIds' => 'setGroupIds',
        'convertedFromStoryId' => 'setConvertedFromStoryId',
        'ownerIds' => 'setOwnerIds',
        'externalId' => 'setExternalId',
        'deadline' => 'setDeadline',
        'createdAt' => 'setCreatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'description' => 'getDescription',
        'labels' => 'getLabels',
        'completedAtOverride' => 'getCompletedAtOverride',
        'objectiveIds' => 'getObjectiveIds',
        'name' => 'getName',
        'plannedStartDate' => 'getPlannedStartDate',
        'state' => 'getState',
        'milestoneId' => 'getMilestoneId',
        'requestedById' => 'getRequestedById',
        'epicStateId' => 'getEpicStateId',
        'startedAtOverride' => 'getStartedAtOverride',
        'groupId' => 'getGroupId',
        'updatedAt' => 'getUpdatedAt',
        'followerIds' => 'getFollowerIds',
        'groupIds' => 'getGroupIds',
        'convertedFromStoryId' => 'getConvertedFromStoryId',
        'ownerIds' => 'getOwnerIds',
        'externalId' => 'getExternalId',
        'deadline' => 'getDeadline',
        'createdAt' => 'getCreatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STATE_IN_PROGRESS = 'in progress';
    public const STATE_TO_DO = 'to do';
    public const STATE_DONE = 'done';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_IN_PROGRESS,
            self::STATE_TO_DO,
            self::STATE_DONE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('labels', $data ?? [], null);
        $this->setIfExists('completedAtOverride', $data ?? [], null);
        $this->setIfExists('objectiveIds', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('plannedStartDate', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('milestoneId', $data ?? [], null);
        $this->setIfExists('requestedById', $data ?? [], null);
        $this->setIfExists('epicStateId', $data ?? [], null);
        $this->setIfExists('startedAtOverride', $data ?? [], null);
        $this->setIfExists('groupId', $data ?? [], null);
        $this->setIfExists('updatedAt', $data ?? [], null);
        $this->setIfExists('followerIds', $data ?? [], null);
        $this->setIfExists('groupIds', $data ?? [], null);
        $this->setIfExists('convertedFromStoryId', $data ?? [], null);
        $this->setIfExists('ownerIds', $data ?? [], null);
        $this->setIfExists('externalId', $data ?? [], null);
        $this->setIfExists('deadline', $data ?? [], null);
        $this->setIfExists('createdAt', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 100000)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 100000.";
        }

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 256)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 256.";
        }

        if ((mb_strlen($this->container['name']) < 1)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($this->container['state']) && !in_array($this->container['state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'state', must be one of '%s'",
                $this->container['state'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['externalId']) && (mb_strlen($this->container['externalId']) > 128)) {
            $invalidProperties[] = "invalid value for 'externalId', the character length must be smaller than or equal to 128.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description The Epic's description.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        if ((mb_strlen($description) > 100000)) {
            throw new \InvalidArgumentException('invalid length for $description when calling CreateEpic., must be smaller than or equal to 100000.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets labels
     *
     * @return \Timetoreply\Shortcut\Model\CreateLabelParams[]|null
     */
    public function getLabels()
    {
        return $this->container['labels'];
    }

    /**
     * Sets labels
     *
     * @param \Timetoreply\Shortcut\Model\CreateLabelParams[]|null $labels An array of Labels attached to the Epic.
     *
     * @return self
     */
    public function setLabels($labels)
    {
        if (is_null($labels)) {
            throw new \InvalidArgumentException('non-nullable labels cannot be null');
        }
        $this->container['labels'] = $labels;

        return $this;
    }

    /**
     * Gets completedAtOverride
     *
     * @return \DateTime|null
     */
    public function getCompletedAtOverride()
    {
        return $this->container['completedAtOverride'];
    }

    /**
     * Sets completedAtOverride
     *
     * @param \DateTime|null $completedAtOverride A manual override for the time/date the Epic was completed.
     *
     * @return self
     */
    public function setCompletedAtOverride($completedAtOverride)
    {
        if (is_null($completedAtOverride)) {
            throw new \InvalidArgumentException('non-nullable completedAtOverride cannot be null');
        }
        $this->container['completedAtOverride'] = $completedAtOverride;

        return $this;
    }

    /**
     * Gets objectiveIds
     *
     * @return int[]|null
     */
    public function getObjectiveIds()
    {
        return $this->container['objectiveIds'];
    }

    /**
     * Sets objectiveIds
     *
     * @param int[]|null $objectiveIds An array of IDs for Objectives to which this Epic is related.
     *
     * @return self
     */
    public function setObjectiveIds($objectiveIds)
    {
        if (is_null($objectiveIds)) {
            throw new \InvalidArgumentException('non-nullable objectiveIds cannot be null');
        }
        $this->container['objectiveIds'] = $objectiveIds;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The Epic's name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        if ((mb_strlen($name) > 256)) {
            throw new \InvalidArgumentException('invalid length for $name when calling CreateEpic., must be smaller than or equal to 256.');
        }
        if ((mb_strlen($name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $name when calling CreateEpic., must be bigger than or equal to 1.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets plannedStartDate
     *
     * @return \DateTime|null
     */
    public function getPlannedStartDate()
    {
        return $this->container['plannedStartDate'];
    }

    /**
     * Sets plannedStartDate
     *
     * @param \DateTime|null $plannedStartDate The Epic's planned start date.
     *
     * @return self
     */
    public function setPlannedStartDate($plannedStartDate)
    {
        if (is_null($plannedStartDate)) {
            array_push($this->openAPINullablesSetToNull, 'plannedStartDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('plannedStartDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['plannedStartDate'] = $plannedStartDate;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state `Deprecated` The Epic's state (to do, in progress, or done); will be ignored when `epic_state_id` is set.
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }
        $allowedValues = $this->getStateAllowableValues();
        if (!in_array($state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'state', must be one of '%s'",
                    $state,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets milestoneId
     *
     * @return int|null
     */
    public function getMilestoneId()
    {
        return $this->container['milestoneId'];
    }

    /**
     * Sets milestoneId
     *
     * @param int|null $milestoneId `Deprecated` The ID of the Milestone this Epic is related to. Use `objective_ids`.
     *
     * @return self
     */
    public function setMilestoneId($milestoneId)
    {
        if (is_null($milestoneId)) {
            array_push($this->openAPINullablesSetToNull, 'milestoneId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('milestoneId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['milestoneId'] = $milestoneId;

        return $this;
    }

    /**
     * Gets requestedById
     *
     * @return string|null
     */
    public function getRequestedById()
    {
        return $this->container['requestedById'];
    }

    /**
     * Sets requestedById
     *
     * @param string|null $requestedById The ID of the member that requested the epic.
     *
     * @return self
     */
    public function setRequestedById($requestedById)
    {
        if (is_null($requestedById)) {
            throw new \InvalidArgumentException('non-nullable requestedById cannot be null');
        }
        $this->container['requestedById'] = $requestedById;

        return $this;
    }

    /**
     * Gets epicStateId
     *
     * @return int|null
     */
    public function getEpicStateId()
    {
        return $this->container['epicStateId'];
    }

    /**
     * Sets epicStateId
     *
     * @param int|null $epicStateId The ID of the Epic State.
     *
     * @return self
     */
    public function setEpicStateId($epicStateId)
    {
        if (is_null($epicStateId)) {
            throw new \InvalidArgumentException('non-nullable epicStateId cannot be null');
        }
        $this->container['epicStateId'] = $epicStateId;

        return $this;
    }

    /**
     * Gets startedAtOverride
     *
     * @return \DateTime|null
     */
    public function getStartedAtOverride()
    {
        return $this->container['startedAtOverride'];
    }

    /**
     * Sets startedAtOverride
     *
     * @param \DateTime|null $startedAtOverride A manual override for the time/date the Epic was started.
     *
     * @return self
     */
    public function setStartedAtOverride($startedAtOverride)
    {
        if (is_null($startedAtOverride)) {
            throw new \InvalidArgumentException('non-nullable startedAtOverride cannot be null');
        }
        $this->container['startedAtOverride'] = $startedAtOverride;

        return $this;
    }

    /**
     * Gets groupId
     *
     * @return string|null
     */
    public function getGroupId()
    {
        return $this->container['groupId'];
    }

    /**
     * Sets groupId
     *
     * @param string|null $groupId `Deprecated` The ID of the group to associate with the epic. Use `group_ids`.
     *
     * @return self
     */
    public function setGroupId($groupId)
    {
        if (is_null($groupId)) {
            array_push($this->openAPINullablesSetToNull, 'groupId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('groupId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['groupId'] = $groupId;

        return $this;
    }

    /**
     * Gets updatedAt
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updatedAt'];
    }

    /**
     * Sets updatedAt
     *
     * @param \DateTime|null $updatedAt Defaults to the time/date it is created but can be set to reflect another date.
     *
     * @return self
     */
    public function setUpdatedAt($updatedAt)
    {
        if (is_null($updatedAt)) {
            throw new \InvalidArgumentException('non-nullable updatedAt cannot be null');
        }
        $this->container['updatedAt'] = $updatedAt;

        return $this;
    }

    /**
     * Gets followerIds
     *
     * @return string[]|null
     */
    public function getFollowerIds()
    {
        return $this->container['followerIds'];
    }

    /**
     * Sets followerIds
     *
     * @param string[]|null $followerIds An array of UUIDs for any Members you want to add as Followers on this new Epic.
     *
     * @return self
     */
    public function setFollowerIds($followerIds)
    {
        if (is_null($followerIds)) {
            throw new \InvalidArgumentException('non-nullable followerIds cannot be null');
        }
        $this->container['followerIds'] = $followerIds;

        return $this;
    }

    /**
     * Gets groupIds
     *
     * @return string[]|null
     */
    public function getGroupIds()
    {
        return $this->container['groupIds'];
    }

    /**
     * Sets groupIds
     *
     * @param string[]|null $groupIds An array of UUIDS for Groups to which this Epic is related.
     *
     * @return self
     */
    public function setGroupIds($groupIds)
    {
        if (is_null($groupIds)) {
            throw new \InvalidArgumentException('non-nullable groupIds cannot be null');
        }
        $this->container['groupIds'] = $groupIds;

        return $this;
    }

    /**
     * Gets convertedFromStoryId
     *
     * @return int|null
     */
    public function getConvertedFromStoryId()
    {
        return $this->container['convertedFromStoryId'];
    }

    /**
     * Sets convertedFromStoryId
     *
     * @param int|null $convertedFromStoryId The ID of the Story that was converted to an Epic.
     *
     * @return self
     */
    public function setConvertedFromStoryId($convertedFromStoryId)
    {
        if (is_null($convertedFromStoryId)) {
            array_push($this->openAPINullablesSetToNull, 'convertedFromStoryId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('convertedFromStoryId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['convertedFromStoryId'] = $convertedFromStoryId;

        return $this;
    }

    /**
     * Gets ownerIds
     *
     * @return string[]|null
     */
    public function getOwnerIds()
    {
        return $this->container['ownerIds'];
    }

    /**
     * Sets ownerIds
     *
     * @param string[]|null $ownerIds An array of UUIDs for any members you want to add as Owners on this new Epic.
     *
     * @return self
     */
    public function setOwnerIds($ownerIds)
    {
        if (is_null($ownerIds)) {
            throw new \InvalidArgumentException('non-nullable ownerIds cannot be null');
        }
        $this->container['ownerIds'] = $ownerIds;

        return $this;
    }

    /**
     * Gets externalId
     *
     * @return string|null
     */
    public function getExternalId()
    {
        return $this->container['externalId'];
    }

    /**
     * Sets externalId
     *
     * @param string|null $externalId This field can be set to another unique ID. In the case that the Epic has been imported from another tool, the ID in the other tool can be indicated here.
     *
     * @return self
     */
    public function setExternalId($externalId)
    {
        if (is_null($externalId)) {
            throw new \InvalidArgumentException('non-nullable externalId cannot be null');
        }
        if ((mb_strlen($externalId) > 128)) {
            throw new \InvalidArgumentException('invalid length for $externalId when calling CreateEpic., must be smaller than or equal to 128.');
        }

        $this->container['externalId'] = $externalId;

        return $this;
    }

    /**
     * Gets deadline
     *
     * @return \DateTime|null
     */
    public function getDeadline()
    {
        return $this->container['deadline'];
    }

    /**
     * Sets deadline
     *
     * @param \DateTime|null $deadline The Epic's deadline.
     *
     * @return self
     */
    public function setDeadline($deadline)
    {
        if (is_null($deadline)) {
            array_push($this->openAPINullablesSetToNull, 'deadline');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deadline', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['deadline'] = $deadline;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param \DateTime|null $createdAt Defaults to the time/date it is created but can be set to reflect another date.
     *
     * @return self
     */
    public function setCreatedAt($createdAt)
    {
        if (is_null($createdAt)) {
            throw new \InvalidArgumentException('non-nullable createdAt cannot be null');
        }
        $this->container['createdAt'] = $createdAt;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


