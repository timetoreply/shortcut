<?php
/**
 * ThreadedComment
 *
 * PHP version 5
 *
 * @category Class
 * @package  Timetoreply\Shortcut
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Shortcut API
 *
 * Shortcut API
 *
 * OpenAPI spec version: 3.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.43-SNAPSHOT
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Timetoreply\Shortcut\Model;

use ArrayAccess;
use DateTime;
use ReturnTypeWillChange;
use Timetoreply\Shortcut\ObjectSerializer;

/**
 * ThreadedComment Class Doc Comment
 *
 * @category Class
 * @description Comments associated with Epic Discussions.
 * @package  Timetoreply\Shortcut
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ThreadedComment implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'ThreadedComment';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'appUrl' => 'string',
        'entityType' => 'string',
        'deleted' => 'bool',
        'mentionIds' => 'string[]',
        'authorId' => 'string',
        'memberMentionIds' => 'string[]',
        'comments' => '\Timetoreply\Shortcut\Model\ThreadedComment[]',
        'updatedAt' => '\DateTime',
        'groupMentionIds' => 'string[]',
        'externalId' => 'string',
        'id' => 'int',
        'createdAt' => '\DateTime',
        'text' => 'string'];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'appUrl' => null,
        'entityType' => null,
        'deleted' => null,
        'mentionIds' => 'uuid',
        'authorId' => 'uuid',
        'memberMentionIds' => 'uuid',
        'comments' => null,
        'updatedAt' => 'date-time',
        'groupMentionIds' => 'uuid',
        'externalId' => null,
        'id' => 'int64',
        'createdAt' => 'date-time',
        'text' => null];
    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'appUrl' => 'app_url',
        'entityType' => 'entity_type',
        'deleted' => 'deleted',
        'mentionIds' => 'mention_ids',
        'authorId' => 'author_id',
        'memberMentionIds' => 'member_mention_ids',
        'comments' => 'comments',
        'updatedAt' => 'updated_at',
        'groupMentionIds' => 'group_mention_ids',
        'externalId' => 'external_id',
        'id' => 'id',
        'createdAt' => 'created_at',
        'text' => 'text'];
    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'appUrl' => 'setAppUrl',
        'entityType' => 'setEntityType',
        'deleted' => 'setDeleted',
        'mentionIds' => 'setMentionIds',
        'authorId' => 'setAuthorId',
        'memberMentionIds' => 'setMemberMentionIds',
        'comments' => 'setComments',
        'updatedAt' => 'setUpdatedAt',
        'groupMentionIds' => 'setGroupMentionIds',
        'externalId' => 'setExternalId',
        'id' => 'setId',
        'createdAt' => 'setCreatedAt',
        'text' => 'setText'];
    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'appUrl' => 'getAppUrl',
        'entityType' => 'getEntityType',
        'deleted' => 'getDeleted',
        'mentionIds' => 'getMentionIds',
        'authorId' => 'getAuthorId',
        'memberMentionIds' => 'getMemberMentionIds',
        'comments' => 'getComments',
        'updatedAt' => 'getUpdatedAt',
        'groupMentionIds' => 'getGroupMentionIds',
        'externalId' => 'getExternalId',
        'id' => 'getId',
        'createdAt' => 'getCreatedAt',
        'text' => 'getText'];
    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['appUrl'] = isset($data['appUrl']) ? $data['appUrl'] : null;
        $this->container['entityType'] = isset($data['entityType']) ? $data['entityType'] : null;
        $this->container['deleted'] = isset($data['deleted']) ? $data['deleted'] : null;
        $this->container['mentionIds'] = isset($data['mentionIds']) ? $data['mentionIds'] : null;
        $this->container['authorId'] = isset($data['authorId']) ? $data['authorId'] : null;
        $this->container['memberMentionIds'] = isset($data['memberMentionIds']) ? $data['memberMentionIds'] : null;
        $this->container['comments'] = isset($data['comments']) ? $data['comments'] : null;
        $this->container['updatedAt'] = isset($data['updatedAt']) ? $data['updatedAt'] : null;
        $this->container['groupMentionIds'] = isset($data['groupMentionIds']) ? $data['groupMentionIds'] : null;
        $this->container['externalId'] = isset($data['externalId']) ? $data['externalId'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['createdAt'] = isset($data['createdAt']) ? $data['createdAt'] : null;
        $this->container['text'] = isset($data['text']) ? $data['text'] : null;
    }

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['appUrl'] === null) {
            $invalidProperties[] = "'appUrl' can't be null";
        }
        if ($this->container['entityType'] === null) {
            $invalidProperties[] = "'entityType' can't be null";
        }
        if ($this->container['deleted'] === null) {
            $invalidProperties[] = "'deleted' can't be null";
        }
        if ($this->container['mentionIds'] === null) {
            $invalidProperties[] = "'mentionIds' can't be null";
        }
        if ($this->container['authorId'] === null) {
            $invalidProperties[] = "'authorId' can't be null";
        }
        if ($this->container['memberMentionIds'] === null) {
            $invalidProperties[] = "'memberMentionIds' can't be null";
        }
        if ($this->container['comments'] === null) {
            $invalidProperties[] = "'comments' can't be null";
        }
        if ($this->container['updatedAt'] === null) {
            $invalidProperties[] = "'updatedAt' can't be null";
        }
        if ($this->container['groupMentionIds'] === null) {
            $invalidProperties[] = "'groupMentionIds' can't be null";
        }
        if ($this->container['externalId'] === null) {
            $invalidProperties[] = "'externalId' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['createdAt'] === null) {
            $invalidProperties[] = "'createdAt' can't be null";
        }
        if ($this->container['text'] === null) {
            $invalidProperties[] = "'text' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Gets appUrl
     *
     * @return string
     */
    public function getAppUrl()
    {
        return $this->container['appUrl'];
    }

    /**
     * Sets appUrl
     *
     * @param string $appUrl The Shortcut application url for the Comment.
     *
     * @return $this
     */
    public function setAppUrl($appUrl)
    {
        $this->container['appUrl'] = $appUrl;

        return $this;
    }

    /**
     * Gets entityType
     *
     * @return string
     */
    public function getEntityType()
    {
        return $this->container['entityType'];
    }

    /**
     * Sets entityType
     *
     * @param string $entityType A string description of this resource.
     *
     * @return $this
     */
    public function setEntityType($entityType)
    {
        $this->container['entityType'] = $entityType;

        return $this;
    }

    /**
     * Gets deleted
     *
     * @return bool
     */
    public function getDeleted()
    {
        return $this->container['deleted'];
    }

    /**
     * Sets deleted
     *
     * @param bool $deleted True/false boolean indicating whether the Comment is deleted.
     *
     * @return $this
     */
    public function setDeleted($deleted)
    {
        $this->container['deleted'] = $deleted;

        return $this;
    }

    /**
     * Gets mentionIds
     *
     * @return string[]
     */
    public function getMentionIds()
    {
        return $this->container['mentionIds'];
    }

    /**
     * Sets mentionIds
     *
     * @param string[] $mentionIds Deprecated: use member_mention_ids.
     *
     * @return $this
     */
    public function setMentionIds($mentionIds)
    {
        $this->container['mentionIds'] = $mentionIds;

        return $this;
    }

    /**
     * Gets authorId
     *
     * @return string
     */
    public function getAuthorId()
    {
        return $this->container['authorId'];
    }

    /**
     * Sets authorId
     *
     * @param string $authorId The unique ID of the Member that authored the Comment.
     *
     * @return $this
     */
    public function setAuthorId($authorId)
    {
        $this->container['authorId'] = $authorId;

        return $this;
    }

    /**
     * Gets memberMentionIds
     *
     * @return string[]
     */
    public function getMemberMentionIds()
    {
        return $this->container['memberMentionIds'];
    }

    /**
     * Sets memberMentionIds
     *
     * @param string[] $memberMentionIds An array of Member IDs that have been mentioned in this Comment.
     *
     * @return $this
     */
    public function setMemberMentionIds($memberMentionIds)
    {
        $this->container['memberMentionIds'] = $memberMentionIds;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return ThreadedComment[]
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param ThreadedComment[] $comments A nested array of threaded comments.
     *
     * @return $this
     */
    public function setComments($comments)
    {
        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets updatedAt
     *
     * @return DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updatedAt'];
    }

    /**
     * Sets updatedAt
     *
     * @param DateTime $updatedAt The time/date the Comment was updated.
     *
     * @return $this
     */
    public function setUpdatedAt($updatedAt)
    {
        $this->container['updatedAt'] = $updatedAt;

        return $this;
    }

    /**
     * Gets groupMentionIds
     *
     * @return string[]
     */
    public function getGroupMentionIds()
    {
        return $this->container['groupMentionIds'];
    }

    /**
     * Sets groupMentionIds
     *
     * @param string[] $groupMentionIds An array of Group IDs that have been mentioned in this Comment.
     *
     * @return $this
     */
    public function setGroupMentionIds($groupMentionIds)
    {
        $this->container['groupMentionIds'] = $groupMentionIds;

        return $this;
    }

    /**
     * Gets externalId
     *
     * @return string
     */
    public function getExternalId()
    {
        return $this->container['externalId'];
    }

    /**
     * Sets externalId
     *
     * @param string $externalId This field can be set to another unique ID. In the case that the Comment has been imported from another tool, the ID in the other tool can be indicated here.
     *
     * @return $this
     */
    public function setExternalId($externalId)
    {
        $this->container['externalId'] = $externalId;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The unique ID of the Comment.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param DateTime $createdAt The time/date the Comment was created.
     *
     * @return $this
     */
    public function setCreatedAt($createdAt)
    {
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Gets text
     *
     * @return string
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     *
     * @param string $text The text of the Comment.
     *
     * @return $this
     */
    public function setText($text)
    {
        $this->container['text'] = $text;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed $value Value to be set
     *
     * @return void
     */
    #[ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
