<?php
/**
 * LinkedFile
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Timetoreply\Shortcut
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Shortcut API
 *
 * Shortcut API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Timetoreply\Shortcut\Model;

use \ArrayAccess;
use \Timetoreply\Shortcut\ObjectSerializer;

/**
 * LinkedFile Class Doc Comment
 *
 * @category Class
 * @description Linked files are stored on a third-party website and linked to one or more Stories. Shortcut currently supports linking files from Google Drive, Dropbox, Box, and by URL.
 * @package  Timetoreply\Shortcut
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class LinkedFile implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'LinkedFile';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'description' => 'string',
        'entityType' => 'string',
        'storyIds' => 'int[]',
        'mentionIds' => 'string[]',
        'memberMentionIds' => 'string[]',
        'name' => 'string',
        'thumbnailUrl' => 'string',
        'type' => 'string',
        'size' => 'int',
        'uploaderId' => 'string',
        'contentType' => 'string',
        'updatedAt' => '\DateTime',
        'groupMentionIds' => 'string[]',
        'id' => 'int',
        'url' => 'string',
        'createdAt' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'description' => null,
        'entityType' => null,
        'storyIds' => 'int64',
        'mentionIds' => 'uuid',
        'memberMentionIds' => 'uuid',
        'name' => null,
        'thumbnailUrl' => null,
        'type' => null,
        'size' => 'int64',
        'uploaderId' => 'uuid',
        'contentType' => null,
        'updatedAt' => 'date-time',
        'groupMentionIds' => 'uuid',
        'id' => 'int64',
        'url' => null,
        'createdAt' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'description' => true,
        'entityType' => false,
        'storyIds' => false,
        'mentionIds' => false,
        'memberMentionIds' => false,
        'name' => false,
        'thumbnailUrl' => true,
        'type' => false,
        'size' => true,
        'uploaderId' => false,
        'contentType' => true,
        'updatedAt' => false,
        'groupMentionIds' => false,
        'id' => false,
        'url' => false,
        'createdAt' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'description' => 'description',
        'entityType' => 'entity_type',
        'storyIds' => 'story_ids',
        'mentionIds' => 'mention_ids',
        'memberMentionIds' => 'member_mention_ids',
        'name' => 'name',
        'thumbnailUrl' => 'thumbnail_url',
        'type' => 'type',
        'size' => 'size',
        'uploaderId' => 'uploader_id',
        'contentType' => 'content_type',
        'updatedAt' => 'updated_at',
        'groupMentionIds' => 'group_mention_ids',
        'id' => 'id',
        'url' => 'url',
        'createdAt' => 'created_at'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'description' => 'setDescription',
        'entityType' => 'setEntityType',
        'storyIds' => 'setStoryIds',
        'mentionIds' => 'setMentionIds',
        'memberMentionIds' => 'setMemberMentionIds',
        'name' => 'setName',
        'thumbnailUrl' => 'setThumbnailUrl',
        'type' => 'setType',
        'size' => 'setSize',
        'uploaderId' => 'setUploaderId',
        'contentType' => 'setContentType',
        'updatedAt' => 'setUpdatedAt',
        'groupMentionIds' => 'setGroupMentionIds',
        'id' => 'setId',
        'url' => 'setUrl',
        'createdAt' => 'setCreatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'description' => 'getDescription',
        'entityType' => 'getEntityType',
        'storyIds' => 'getStoryIds',
        'mentionIds' => 'getMentionIds',
        'memberMentionIds' => 'getMemberMentionIds',
        'name' => 'getName',
        'thumbnailUrl' => 'getThumbnailUrl',
        'type' => 'getType',
        'size' => 'getSize',
        'uploaderId' => 'getUploaderId',
        'contentType' => 'getContentType',
        'updatedAt' => 'getUpdatedAt',
        'groupMentionIds' => 'getGroupMentionIds',
        'id' => 'getId',
        'url' => 'getUrl',
        'createdAt' => 'getCreatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('entityType', $data ?? [], null);
        $this->setIfExists('storyIds', $data ?? [], null);
        $this->setIfExists('mentionIds', $data ?? [], null);
        $this->setIfExists('memberMentionIds', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('thumbnailUrl', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('size', $data ?? [], null);
        $this->setIfExists('uploaderId', $data ?? [], null);
        $this->setIfExists('contentType', $data ?? [], null);
        $this->setIfExists('updatedAt', $data ?? [], null);
        $this->setIfExists('groupMentionIds', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('url', $data ?? [], null);
        $this->setIfExists('createdAt', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ($this->container['entityType'] === null) {
            $invalidProperties[] = "'entityType' can't be null";
        }
        if ($this->container['storyIds'] === null) {
            $invalidProperties[] = "'storyIds' can't be null";
        }
        if ($this->container['mentionIds'] === null) {
            $invalidProperties[] = "'mentionIds' can't be null";
        }
        if ($this->container['memberMentionIds'] === null) {
            $invalidProperties[] = "'memberMentionIds' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['thumbnailUrl'] === null) {
            $invalidProperties[] = "'thumbnailUrl' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['size'] === null) {
            $invalidProperties[] = "'size' can't be null";
        }
        if ($this->container['uploaderId'] === null) {
            $invalidProperties[] = "'uploaderId' can't be null";
        }
        if ($this->container['contentType'] === null) {
            $invalidProperties[] = "'contentType' can't be null";
        }
        if ($this->container['updatedAt'] === null) {
            $invalidProperties[] = "'updatedAt' can't be null";
        }
        if ($this->container['groupMentionIds'] === null) {
            $invalidProperties[] = "'groupMentionIds' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['url'] === null) {
            $invalidProperties[] = "'url' can't be null";
        }
        if ($this->container['createdAt'] === null) {
            $invalidProperties[] = "'createdAt' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description The description of the file.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets entityType
     *
     * @return string
     */
    public function getEntityType()
    {
        return $this->container['entityType'];
    }

    /**
     * Sets entityType
     *
     * @param string $entityType A string description of this resource.
     *
     * @return self
     */
    public function setEntityType($entityType)
    {
        if (is_null($entityType)) {
            throw new \InvalidArgumentException('non-nullable entityType cannot be null');
        }
        $this->container['entityType'] = $entityType;

        return $this;
    }

    /**
     * Gets storyIds
     *
     * @return int[]
     */
    public function getStoryIds()
    {
        return $this->container['storyIds'];
    }

    /**
     * Sets storyIds
     *
     * @param int[] $storyIds The IDs of the stories this file is attached to.
     *
     * @return self
     */
    public function setStoryIds($storyIds)
    {
        if (is_null($storyIds)) {
            throw new \InvalidArgumentException('non-nullable storyIds cannot be null');
        }
        $this->container['storyIds'] = $storyIds;

        return $this;
    }

    /**
     * Gets mentionIds
     *
     * @return string[]
     */
    public function getMentionIds()
    {
        return $this->container['mentionIds'];
    }

    /**
     * Sets mentionIds
     *
     * @param string[] $mentionIds `Deprecated:` use `member_mention_ids`.
     *
     * @return self
     */
    public function setMentionIds($mentionIds)
    {
        if (is_null($mentionIds)) {
            throw new \InvalidArgumentException('non-nullable mentionIds cannot be null');
        }
        $this->container['mentionIds'] = $mentionIds;

        return $this;
    }

    /**
     * Gets memberMentionIds
     *
     * @return string[]
     */
    public function getMemberMentionIds()
    {
        return $this->container['memberMentionIds'];
    }

    /**
     * Sets memberMentionIds
     *
     * @param string[] $memberMentionIds The members that are mentioned in the description of the file.
     *
     * @return self
     */
    public function setMemberMentionIds($memberMentionIds)
    {
        if (is_null($memberMentionIds)) {
            throw new \InvalidArgumentException('non-nullable memberMentionIds cannot be null');
        }
        $this->container['memberMentionIds'] = $memberMentionIds;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the linked file.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets thumbnailUrl
     *
     * @return string
     */
    public function getThumbnailUrl()
    {
        return $this->container['thumbnailUrl'];
    }

    /**
     * Sets thumbnailUrl
     *
     * @param string $thumbnailUrl The URL of the file thumbnail, if the integration provided it.
     *
     * @return self
     */
    public function setThumbnailUrl($thumbnailUrl)
    {
        if (is_null($thumbnailUrl)) {
            array_push($this->openAPINullablesSetToNull, 'thumbnailUrl');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('thumbnailUrl', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['thumbnailUrl'] = $thumbnailUrl;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type The integration type (e.g. google, dropbox, box).
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets size
     *
     * @return int
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param int $size The filesize, if the integration provided it.
     *
     * @return self
     */
    public function setSize($size)
    {
        if (is_null($size)) {
            array_push($this->openAPINullablesSetToNull, 'size');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('size', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets uploaderId
     *
     * @return string
     */
    public function getUploaderId()
    {
        return $this->container['uploaderId'];
    }

    /**
     * Sets uploaderId
     *
     * @param string $uploaderId The UUID of the member that uploaded the file.
     *
     * @return self
     */
    public function setUploaderId($uploaderId)
    {
        if (is_null($uploaderId)) {
            throw new \InvalidArgumentException('non-nullable uploaderId cannot be null');
        }
        $this->container['uploaderId'] = $uploaderId;

        return $this;
    }

    /**
     * Gets contentType
     *
     * @return string
     */
    public function getContentType()
    {
        return $this->container['contentType'];
    }

    /**
     * Sets contentType
     *
     * @param string $contentType The content type of the image (e.g. txt/plain).
     *
     * @return self
     */
    public function setContentType($contentType)
    {
        if (is_null($contentType)) {
            array_push($this->openAPINullablesSetToNull, 'contentType');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('contentType', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['contentType'] = $contentType;

        return $this;
    }

    /**
     * Gets updatedAt
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updatedAt'];
    }

    /**
     * Sets updatedAt
     *
     * @param \DateTime $updatedAt The time/date the LinkedFile was updated.
     *
     * @return self
     */
    public function setUpdatedAt($updatedAt)
    {
        if (is_null($updatedAt)) {
            throw new \InvalidArgumentException('non-nullable updatedAt cannot be null');
        }
        $this->container['updatedAt'] = $updatedAt;

        return $this;
    }

    /**
     * Gets groupMentionIds
     *
     * @return string[]
     */
    public function getGroupMentionIds()
    {
        return $this->container['groupMentionIds'];
    }

    /**
     * Sets groupMentionIds
     *
     * @param string[] $groupMentionIds The groups that are mentioned in the description of the file.
     *
     * @return self
     */
    public function setGroupMentionIds($groupMentionIds)
    {
        if (is_null($groupMentionIds)) {
            throw new \InvalidArgumentException('non-nullable groupMentionIds cannot be null');
        }
        $this->container['groupMentionIds'] = $groupMentionIds;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The unique identifier for the file.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url The URL of the file.
     *
     * @return self
     */
    public function setUrl($url)
    {
        if (is_null($url)) {
            throw new \InvalidArgumentException('non-nullable url cannot be null');
        }
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param \DateTime $createdAt The time/date the LinkedFile was created.
     *
     * @return self
     */
    public function setCreatedAt($createdAt)
    {
        if (is_null($createdAt)) {
            throw new \InvalidArgumentException('non-nullable createdAt cannot be null');
        }
        $this->container['createdAt'] = $createdAt;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


