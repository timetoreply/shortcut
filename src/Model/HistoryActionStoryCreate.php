<?php
/**
 * HistoryActionStoryCreate
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Timetoreply\Shortcut
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Shortcut API
 *
 * Shortcut API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Timetoreply\Shortcut\Model;

use \ArrayAccess;
use \Timetoreply\Shortcut\ObjectSerializer;

/**
 * HistoryActionStoryCreate Class Doc Comment
 *
 * @category Class
 * @description An action representing a Story being created.
 * @package  Timetoreply\Shortcut
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class HistoryActionStoryCreate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'HistoryActionStoryCreate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'appUrl' => 'string',
        'description' => 'string',
        'started' => 'bool',
        'entityType' => 'string',
        'taskIds' => 'int[]',
        'storyType' => 'string',
        'name' => 'string',
        'completed' => 'bool',
        'blocker' => 'bool',
        'epicId' => 'int',
        'requestedById' => 'string',
        'iterationId' => 'int',
        'labelIds' => 'int[]',
        'groupId' => 'string',
        'workflowStateId' => 'int',
        'objectStoryLinkIds' => 'int[]',
        'followerIds' => 'string[]',
        'ownerIds' => 'string[]',
        'customFieldValueIds' => 'string[]',
        'id' => 'int',
        'estimate' => 'int',
        'subjectStoryLinkIds' => 'int[]',
        'action' => 'string',
        'blocked' => 'bool',
        'projectId' => 'int',
        'deadline' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'appUrl' => null,
        'description' => null,
        'started' => null,
        'entityType' => null,
        'taskIds' => 'int64',
        'storyType' => null,
        'name' => null,
        'completed' => null,
        'blocker' => null,
        'epicId' => 'int64',
        'requestedById' => 'uuid',
        'iterationId' => 'int64',
        'labelIds' => 'int64',
        'groupId' => 'uuid',
        'workflowStateId' => 'int64',
        'objectStoryLinkIds' => 'int64',
        'followerIds' => 'uuid',
        'ownerIds' => 'uuid',
        'customFieldValueIds' => 'uuid',
        'id' => 'int64',
        'estimate' => 'int64',
        'subjectStoryLinkIds' => 'int64',
        'action' => null,
        'blocked' => null,
        'projectId' => 'int64',
        'deadline' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'appUrl' => false,
        'description' => false,
        'started' => false,
        'entityType' => false,
        'taskIds' => false,
        'storyType' => false,
        'name' => false,
        'completed' => false,
        'blocker' => false,
        'epicId' => false,
        'requestedById' => false,
        'iterationId' => true,
        'labelIds' => false,
        'groupId' => false,
        'workflowStateId' => false,
        'objectStoryLinkIds' => false,
        'followerIds' => false,
        'ownerIds' => false,
        'customFieldValueIds' => false,
        'id' => false,
        'estimate' => false,
        'subjectStoryLinkIds' => false,
        'action' => false,
        'blocked' => false,
        'projectId' => false,
        'deadline' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'appUrl' => 'app_url',
        'description' => 'description',
        'started' => 'started',
        'entityType' => 'entity_type',
        'taskIds' => 'task_ids',
        'storyType' => 'story_type',
        'name' => 'name',
        'completed' => 'completed',
        'blocker' => 'blocker',
        'epicId' => 'epic_id',
        'requestedById' => 'requested_by_id',
        'iterationId' => 'iteration_id',
        'labelIds' => 'label_ids',
        'groupId' => 'group_id',
        'workflowStateId' => 'workflow_state_id',
        'objectStoryLinkIds' => 'object_story_link_ids',
        'followerIds' => 'follower_ids',
        'ownerIds' => 'owner_ids',
        'customFieldValueIds' => 'custom_field_value_ids',
        'id' => 'id',
        'estimate' => 'estimate',
        'subjectStoryLinkIds' => 'subject_story_link_ids',
        'action' => 'action',
        'blocked' => 'blocked',
        'projectId' => 'project_id',
        'deadline' => 'deadline'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'appUrl' => 'setAppUrl',
        'description' => 'setDescription',
        'started' => 'setStarted',
        'entityType' => 'setEntityType',
        'taskIds' => 'setTaskIds',
        'storyType' => 'setStoryType',
        'name' => 'setName',
        'completed' => 'setCompleted',
        'blocker' => 'setBlocker',
        'epicId' => 'setEpicId',
        'requestedById' => 'setRequestedById',
        'iterationId' => 'setIterationId',
        'labelIds' => 'setLabelIds',
        'groupId' => 'setGroupId',
        'workflowStateId' => 'setWorkflowStateId',
        'objectStoryLinkIds' => 'setObjectStoryLinkIds',
        'followerIds' => 'setFollowerIds',
        'ownerIds' => 'setOwnerIds',
        'customFieldValueIds' => 'setCustomFieldValueIds',
        'id' => 'setId',
        'estimate' => 'setEstimate',
        'subjectStoryLinkIds' => 'setSubjectStoryLinkIds',
        'action' => 'setAction',
        'blocked' => 'setBlocked',
        'projectId' => 'setProjectId',
        'deadline' => 'setDeadline'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'appUrl' => 'getAppUrl',
        'description' => 'getDescription',
        'started' => 'getStarted',
        'entityType' => 'getEntityType',
        'taskIds' => 'getTaskIds',
        'storyType' => 'getStoryType',
        'name' => 'getName',
        'completed' => 'getCompleted',
        'blocker' => 'getBlocker',
        'epicId' => 'getEpicId',
        'requestedById' => 'getRequestedById',
        'iterationId' => 'getIterationId',
        'labelIds' => 'getLabelIds',
        'groupId' => 'getGroupId',
        'workflowStateId' => 'getWorkflowStateId',
        'objectStoryLinkIds' => 'getObjectStoryLinkIds',
        'followerIds' => 'getFollowerIds',
        'ownerIds' => 'getOwnerIds',
        'customFieldValueIds' => 'getCustomFieldValueIds',
        'id' => 'getId',
        'estimate' => 'getEstimate',
        'subjectStoryLinkIds' => 'getSubjectStoryLinkIds',
        'action' => 'getAction',
        'blocked' => 'getBlocked',
        'projectId' => 'getProjectId',
        'deadline' => 'getDeadline'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STORY_TYPE_FEATURE = 'feature';
    public const STORY_TYPE_CHORE = 'chore';
    public const STORY_TYPE_BUG = 'bug';
    public const ACTION_CREATE = 'create';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStoryTypeAllowableValues()
    {
        return [
            self::STORY_TYPE_FEATURE,
            self::STORY_TYPE_CHORE,
            self::STORY_TYPE_BUG,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getActionAllowableValues()
    {
        return [
            self::ACTION_CREATE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('appUrl', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('started', $data ?? [], null);
        $this->setIfExists('entityType', $data ?? [], null);
        $this->setIfExists('taskIds', $data ?? [], null);
        $this->setIfExists('storyType', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('completed', $data ?? [], null);
        $this->setIfExists('blocker', $data ?? [], null);
        $this->setIfExists('epicId', $data ?? [], null);
        $this->setIfExists('requestedById', $data ?? [], null);
        $this->setIfExists('iterationId', $data ?? [], null);
        $this->setIfExists('labelIds', $data ?? [], null);
        $this->setIfExists('groupId', $data ?? [], null);
        $this->setIfExists('workflowStateId', $data ?? [], null);
        $this->setIfExists('objectStoryLinkIds', $data ?? [], null);
        $this->setIfExists('followerIds', $data ?? [], null);
        $this->setIfExists('ownerIds', $data ?? [], null);
        $this->setIfExists('customFieldValueIds', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('estimate', $data ?? [], null);
        $this->setIfExists('subjectStoryLinkIds', $data ?? [], null);
        $this->setIfExists('action', $data ?? [], null);
        $this->setIfExists('blocked', $data ?? [], null);
        $this->setIfExists('projectId', $data ?? [], null);
        $this->setIfExists('deadline', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['appUrl'] === null) {
            $invalidProperties[] = "'appUrl' can't be null";
        }
        if ((mb_strlen($this->container['appUrl']) > 2048)) {
            $invalidProperties[] = "invalid value for 'appUrl', the character length must be smaller than or equal to 2048.";
        }

        if (!preg_match("/^https?:\/\/.+$/", $this->container['appUrl'])) {
            $invalidProperties[] = "invalid value for 'appUrl', must be conform to the pattern /^https?:\/\/.+$/.";
        }

        if ($this->container['entityType'] === null) {
            $invalidProperties[] = "'entityType' can't be null";
        }
        if ($this->container['storyType'] === null) {
            $invalidProperties[] = "'storyType' can't be null";
        }
        $allowedValues = $this->getStoryTypeAllowableValues();
        if (!is_null($this->container['storyType']) && !in_array($this->container['storyType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'storyType', must be one of '%s'",
                $this->container['storyType'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['action'] === null) {
            $invalidProperties[] = "'action' can't be null";
        }
        $allowedValues = $this->getActionAllowableValues();
        if (!is_null($this->container['action']) && !in_array($this->container['action'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'action', must be one of '%s'",
                $this->container['action'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets appUrl
     *
     * @return string
     */
    public function getAppUrl()
    {
        return $this->container['appUrl'];
    }

    /**
     * Sets appUrl
     *
     * @param string $appUrl The application URL of the Story.
     *
     * @return self
     */
    public function setAppUrl($appUrl)
    {
        if (is_null($appUrl)) {
            throw new \InvalidArgumentException('non-nullable appUrl cannot be null');
        }
        if ((mb_strlen($appUrl) > 2048)) {
            throw new \InvalidArgumentException('invalid length for $appUrl when calling HistoryActionStoryCreate., must be smaller than or equal to 2048.');
        }
        if ((!preg_match("/^https?:\/\/.+$/", ObjectSerializer::toString($appUrl)))) {
            throw new \InvalidArgumentException("invalid value for \$appUrl when calling HistoryActionStoryCreate., must conform to the pattern /^https?:\/\/.+$/.");
        }

        $this->container['appUrl'] = $appUrl;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description The description of the Story.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets started
     *
     * @return bool|null
     */
    public function getStarted()
    {
        return $this->container['started'];
    }

    /**
     * Sets started
     *
     * @param bool|null $started Whether or not the Story has been started.
     *
     * @return self
     */
    public function setStarted($started)
    {
        if (is_null($started)) {
            throw new \InvalidArgumentException('non-nullable started cannot be null');
        }
        $this->container['started'] = $started;

        return $this;
    }

    /**
     * Gets entityType
     *
     * @return string
     */
    public function getEntityType()
    {
        return $this->container['entityType'];
    }

    /**
     * Sets entityType
     *
     * @param string $entityType The type of entity referenced.
     *
     * @return self
     */
    public function setEntityType($entityType)
    {
        if (is_null($entityType)) {
            throw new \InvalidArgumentException('non-nullable entityType cannot be null');
        }
        $this->container['entityType'] = $entityType;

        return $this;
    }

    /**
     * Gets taskIds
     *
     * @return int[]|null
     */
    public function getTaskIds()
    {
        return $this->container['taskIds'];
    }

    /**
     * Sets taskIds
     *
     * @param int[]|null $taskIds An array of Task IDs on this Story.
     *
     * @return self
     */
    public function setTaskIds($taskIds)
    {
        if (is_null($taskIds)) {
            throw new \InvalidArgumentException('non-nullable taskIds cannot be null');
        }
        $this->container['taskIds'] = $taskIds;

        return $this;
    }

    /**
     * Gets storyType
     *
     * @return string
     */
    public function getStoryType()
    {
        return $this->container['storyType'];
    }

    /**
     * Sets storyType
     *
     * @param string $storyType The type of Story; either feature, bug, or chore.
     *
     * @return self
     */
    public function setStoryType($storyType)
    {
        if (is_null($storyType)) {
            throw new \InvalidArgumentException('non-nullable storyType cannot be null');
        }
        $allowedValues = $this->getStoryTypeAllowableValues();
        if (!in_array($storyType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'storyType', must be one of '%s'",
                    $storyType,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['storyType'] = $storyType;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the Story.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets completed
     *
     * @return bool|null
     */
    public function getCompleted()
    {
        return $this->container['completed'];
    }

    /**
     * Sets completed
     *
     * @param bool|null $completed Whether or not the Story is completed.
     *
     * @return self
     */
    public function setCompleted($completed)
    {
        if (is_null($completed)) {
            throw new \InvalidArgumentException('non-nullable completed cannot be null');
        }
        $this->container['completed'] = $completed;

        return $this;
    }

    /**
     * Gets blocker
     *
     * @return bool|null
     */
    public function getBlocker()
    {
        return $this->container['blocker'];
    }

    /**
     * Sets blocker
     *
     * @param bool|null $blocker Whether or not the Story is blocking another Story.
     *
     * @return self
     */
    public function setBlocker($blocker)
    {
        if (is_null($blocker)) {
            throw new \InvalidArgumentException('non-nullable blocker cannot be null');
        }
        $this->container['blocker'] = $blocker;

        return $this;
    }

    /**
     * Gets epicId
     *
     * @return int|null
     */
    public function getEpicId()
    {
        return $this->container['epicId'];
    }

    /**
     * Sets epicId
     *
     * @param int|null $epicId The Epic ID for this Story.
     *
     * @return self
     */
    public function setEpicId($epicId)
    {
        if (is_null($epicId)) {
            throw new \InvalidArgumentException('non-nullable epicId cannot be null');
        }
        $this->container['epicId'] = $epicId;

        return $this;
    }

    /**
     * Gets requestedById
     *
     * @return string|null
     */
    public function getRequestedById()
    {
        return $this->container['requestedById'];
    }

    /**
     * Sets requestedById
     *
     * @param string|null $requestedById The ID of the Member that requested the Story.
     *
     * @return self
     */
    public function setRequestedById($requestedById)
    {
        if (is_null($requestedById)) {
            throw new \InvalidArgumentException('non-nullable requestedById cannot be null');
        }
        $this->container['requestedById'] = $requestedById;

        return $this;
    }

    /**
     * Gets iterationId
     *
     * @return int|null
     */
    public function getIterationId()
    {
        return $this->container['iterationId'];
    }

    /**
     * Sets iterationId
     *
     * @param int|null $iterationId The Iteration ID the Story is in.
     *
     * @return self
     */
    public function setIterationId($iterationId)
    {
        if (is_null($iterationId)) {
            array_push($this->openAPINullablesSetToNull, 'iterationId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('iterationId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['iterationId'] = $iterationId;

        return $this;
    }

    /**
     * Gets labelIds
     *
     * @return int[]|null
     */
    public function getLabelIds()
    {
        return $this->container['labelIds'];
    }

    /**
     * Sets labelIds
     *
     * @param int[]|null $labelIds An array of Labels IDs attached to the Story.
     *
     * @return self
     */
    public function setLabelIds($labelIds)
    {
        if (is_null($labelIds)) {
            throw new \InvalidArgumentException('non-nullable labelIds cannot be null');
        }
        $this->container['labelIds'] = $labelIds;

        return $this;
    }

    /**
     * Gets groupId
     *
     * @return string|null
     */
    public function getGroupId()
    {
        return $this->container['groupId'];
    }

    /**
     * Sets groupId
     *
     * @param string|null $groupId The Team IDs for the followers of the Story.
     *
     * @return self
     */
    public function setGroupId($groupId)
    {
        if (is_null($groupId)) {
            throw new \InvalidArgumentException('non-nullable groupId cannot be null');
        }
        $this->container['groupId'] = $groupId;

        return $this;
    }

    /**
     * Gets workflowStateId
     *
     * @return int|null
     */
    public function getWorkflowStateId()
    {
        return $this->container['workflowStateId'];
    }

    /**
     * Sets workflowStateId
     *
     * @param int|null $workflowStateId An array of Workflow State IDs attached to the Story.
     *
     * @return self
     */
    public function setWorkflowStateId($workflowStateId)
    {
        if (is_null($workflowStateId)) {
            throw new \InvalidArgumentException('non-nullable workflowStateId cannot be null');
        }
        $this->container['workflowStateId'] = $workflowStateId;

        return $this;
    }

    /**
     * Gets objectStoryLinkIds
     *
     * @return int[]|null
     */
    public function getObjectStoryLinkIds()
    {
        return $this->container['objectStoryLinkIds'];
    }

    /**
     * Sets objectStoryLinkIds
     *
     * @param int[]|null $objectStoryLinkIds An array of Story IDs that are the object of a Story Link relationship.
     *
     * @return self
     */
    public function setObjectStoryLinkIds($objectStoryLinkIds)
    {
        if (is_null($objectStoryLinkIds)) {
            throw new \InvalidArgumentException('non-nullable objectStoryLinkIds cannot be null');
        }
        $this->container['objectStoryLinkIds'] = $objectStoryLinkIds;

        return $this;
    }

    /**
     * Gets followerIds
     *
     * @return string[]|null
     */
    public function getFollowerIds()
    {
        return $this->container['followerIds'];
    }

    /**
     * Sets followerIds
     *
     * @param string[]|null $followerIds An array of Member IDs for the followers of the Story.
     *
     * @return self
     */
    public function setFollowerIds($followerIds)
    {
        if (is_null($followerIds)) {
            throw new \InvalidArgumentException('non-nullable followerIds cannot be null');
        }
        $this->container['followerIds'] = $followerIds;

        return $this;
    }

    /**
     * Gets ownerIds
     *
     * @return string[]|null
     */
    public function getOwnerIds()
    {
        return $this->container['ownerIds'];
    }

    /**
     * Sets ownerIds
     *
     * @param string[]|null $ownerIds An array of Member IDs that are the owners of the Story.
     *
     * @return self
     */
    public function setOwnerIds($ownerIds)
    {
        if (is_null($ownerIds)) {
            throw new \InvalidArgumentException('non-nullable ownerIds cannot be null');
        }
        $this->container['ownerIds'] = $ownerIds;

        return $this;
    }

    /**
     * Gets customFieldValueIds
     *
     * @return string[]|null
     */
    public function getCustomFieldValueIds()
    {
        return $this->container['customFieldValueIds'];
    }

    /**
     * Sets customFieldValueIds
     *
     * @param string[]|null $customFieldValueIds An array of Custom Field Enum Value ids on this Story.
     *
     * @return self
     */
    public function setCustomFieldValueIds($customFieldValueIds)
    {
        if (is_null($customFieldValueIds)) {
            throw new \InvalidArgumentException('non-nullable customFieldValueIds cannot be null');
        }
        $this->container['customFieldValueIds'] = $customFieldValueIds;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The ID of the entity referenced.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets estimate
     *
     * @return int|null
     */
    public function getEstimate()
    {
        return $this->container['estimate'];
    }

    /**
     * Sets estimate
     *
     * @param int|null $estimate The estimate (or point value) for the Story.
     *
     * @return self
     */
    public function setEstimate($estimate)
    {
        if (is_null($estimate)) {
            throw new \InvalidArgumentException('non-nullable estimate cannot be null');
        }
        $this->container['estimate'] = $estimate;

        return $this;
    }

    /**
     * Gets subjectStoryLinkIds
     *
     * @return int[]|null
     */
    public function getSubjectStoryLinkIds()
    {
        return $this->container['subjectStoryLinkIds'];
    }

    /**
     * Sets subjectStoryLinkIds
     *
     * @param int[]|null $subjectStoryLinkIds An array of Story IDs that are the subject of a Story Link relationship.
     *
     * @return self
     */
    public function setSubjectStoryLinkIds($subjectStoryLinkIds)
    {
        if (is_null($subjectStoryLinkIds)) {
            throw new \InvalidArgumentException('non-nullable subjectStoryLinkIds cannot be null');
        }
        $this->container['subjectStoryLinkIds'] = $subjectStoryLinkIds;

        return $this;
    }

    /**
     * Gets action
     *
     * @return string
     */
    public function getAction()
    {
        return $this->container['action'];
    }

    /**
     * Sets action
     *
     * @param string $action The action of the entity referenced.
     *
     * @return self
     */
    public function setAction($action)
    {
        if (is_null($action)) {
            throw new \InvalidArgumentException('non-nullable action cannot be null');
        }
        $allowedValues = $this->getActionAllowableValues();
        if (!in_array($action, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'action', must be one of '%s'",
                    $action,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['action'] = $action;

        return $this;
    }

    /**
     * Gets blocked
     *
     * @return bool|null
     */
    public function getBlocked()
    {
        return $this->container['blocked'];
    }

    /**
     * Sets blocked
     *
     * @param bool|null $blocked Whether or not the Story is blocked by another Story.
     *
     * @return self
     */
    public function setBlocked($blocked)
    {
        if (is_null($blocked)) {
            throw new \InvalidArgumentException('non-nullable blocked cannot be null');
        }
        $this->container['blocked'] = $blocked;

        return $this;
    }

    /**
     * Gets projectId
     *
     * @return int|null
     */
    public function getProjectId()
    {
        return $this->container['projectId'];
    }

    /**
     * Sets projectId
     *
     * @param int|null $projectId The Project ID of the Story is in.
     *
     * @return self
     */
    public function setProjectId($projectId)
    {
        if (is_null($projectId)) {
            throw new \InvalidArgumentException('non-nullable projectId cannot be null');
        }
        $this->container['projectId'] = $projectId;

        return $this;
    }

    /**
     * Gets deadline
     *
     * @return string|null
     */
    public function getDeadline()
    {
        return $this->container['deadline'];
    }

    /**
     * Sets deadline
     *
     * @param string|null $deadline The timestamp representing the Story's deadline.
     *
     * @return self
     */
    public function setDeadline($deadline)
    {
        if (is_null($deadline)) {
            throw new \InvalidArgumentException('non-nullable deadline cannot be null');
        }
        $this->container['deadline'] = $deadline;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


