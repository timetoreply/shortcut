<?php
/**
 * HistoryChangesStory
 *
 * PHP version 5
 *
 * @category Class
 * @package  Timetoreply\Shortcut
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Shortcut API
 *
 * Shortcut API
 *
 * OpenAPI spec version: 3.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.43-SNAPSHOT
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Timetoreply\Shortcut\Model;

use ArrayAccess;
use ReturnTypeWillChange;
use Timetoreply\Shortcut\ObjectSerializer;

/**
 * HistoryChangesStory Class Doc Comment
 *
 * @category Class
 * @description The changes that have occurred as a result of the action.
 * @package  Timetoreply\Shortcut
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class HistoryChangesStory implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'HistoryChangesStory';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'description' => '\Timetoreply\Shortcut\Model\StoryHistoryChangeOldNewStr',
        'archived' => '\Timetoreply\Shortcut\Model\StoryHistoryChangeOldNewBool',
        'started' => '\Timetoreply\Shortcut\Model\StoryHistoryChangeOldNewBool',
        'taskIds' => '\Timetoreply\Shortcut\Model\StoryHistoryChangeAddsRemovesInt',
        'mentionIds' => '\Timetoreply\Shortcut\Model\StoryHistoryChangeAddsRemovesUuid',
        'storyType' => '\Timetoreply\Shortcut\Model\StoryHistoryChangeOldNewStr',
        'name' => '\Timetoreply\Shortcut\Model\StoryHistoryChangeOldNewStr',
        'completed' => '\Timetoreply\Shortcut\Model\StoryHistoryChangeOldNewBool',
        'blocker' => '\Timetoreply\Shortcut\Model\StoryHistoryChangeOldNewBool',
        'epicId' => '\Timetoreply\Shortcut\Model\StoryHistoryChangeOldNewInt',
        'branchIds' => '\Timetoreply\Shortcut\Model\StoryHistoryChangeAddsRemovesInt',
        'commitIds' => '\Timetoreply\Shortcut\Model\StoryHistoryChangeAddsRemovesInt',
        'requestedById' => '\Timetoreply\Shortcut\Model\StoryHistoryChangeOldNewUuid',
        'iterationId' => '\Timetoreply\Shortcut\Model\StoryHistoryChangeOldNewInt',
        'labelIds' => '\Timetoreply\Shortcut\Model\StoryHistoryChangeAddsRemovesInt',
        'groupId' => '\Timetoreply\Shortcut\Model\StoryHistoryChangeOldNewUuid',
        'workflowStateId' => '\Timetoreply\Shortcut\Model\StoryHistoryChangeOldNewInt',
        'objectStoryLinkIds' => '\Timetoreply\Shortcut\Model\StoryHistoryChangeAddsRemovesInt',
        'followerIds' => '\Timetoreply\Shortcut\Model\StoryHistoryChangeAddsRemovesUuid',
        'ownerIds' => '\Timetoreply\Shortcut\Model\StoryHistoryChangeAddsRemovesUuid',
        'customFieldValueIds' => '\Timetoreply\Shortcut\Model\StoryHistoryChangeAddsRemovesUuid',
        'estimate' => '\Timetoreply\Shortcut\Model\StoryHistoryChangeOldNewInt',
        'subjectStoryLinkIds' => '\Timetoreply\Shortcut\Model\StoryHistoryChangeAddsRemovesInt',
        'blocked' => '\Timetoreply\Shortcut\Model\StoryHistoryChangeOldNewBool',
        'projectId' => '\Timetoreply\Shortcut\Model\StoryHistoryChangeOldNewInt',
        'deadline' => '\Timetoreply\Shortcut\Model\StoryHistoryChangeOldNewStr'];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'description' => null,
        'archived' => null,
        'started' => null,
        'taskIds' => null,
        'mentionIds' => null,
        'storyType' => null,
        'name' => null,
        'completed' => null,
        'blocker' => null,
        'epicId' => null,
        'branchIds' => null,
        'commitIds' => null,
        'requestedById' => null,
        'iterationId' => null,
        'labelIds' => null,
        'groupId' => null,
        'workflowStateId' => null,
        'objectStoryLinkIds' => null,
        'followerIds' => null,
        'ownerIds' => null,
        'customFieldValueIds' => null,
        'estimate' => null,
        'subjectStoryLinkIds' => null,
        'blocked' => null,
        'projectId' => null,
        'deadline' => null];
    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'description' => 'description',
        'archived' => 'archived',
        'started' => 'started',
        'taskIds' => 'task_ids',
        'mentionIds' => 'mention_ids',
        'storyType' => 'story_type',
        'name' => 'name',
        'completed' => 'completed',
        'blocker' => 'blocker',
        'epicId' => 'epic_id',
        'branchIds' => 'branch_ids',
        'commitIds' => 'commit_ids',
        'requestedById' => 'requested_by_id',
        'iterationId' => 'iteration_id',
        'labelIds' => 'label_ids',
        'groupId' => 'group_id',
        'workflowStateId' => 'workflow_state_id',
        'objectStoryLinkIds' => 'object_story_link_ids',
        'followerIds' => 'follower_ids',
        'ownerIds' => 'owner_ids',
        'customFieldValueIds' => 'custom_field_value_ids',
        'estimate' => 'estimate',
        'subjectStoryLinkIds' => 'subject_story_link_ids',
        'blocked' => 'blocked',
        'projectId' => 'project_id',
        'deadline' => 'deadline'];
    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'description' => 'setDescription',
        'archived' => 'setArchived',
        'started' => 'setStarted',
        'taskIds' => 'setTaskIds',
        'mentionIds' => 'setMentionIds',
        'storyType' => 'setStoryType',
        'name' => 'setName',
        'completed' => 'setCompleted',
        'blocker' => 'setBlocker',
        'epicId' => 'setEpicId',
        'branchIds' => 'setBranchIds',
        'commitIds' => 'setCommitIds',
        'requestedById' => 'setRequestedById',
        'iterationId' => 'setIterationId',
        'labelIds' => 'setLabelIds',
        'groupId' => 'setGroupId',
        'workflowStateId' => 'setWorkflowStateId',
        'objectStoryLinkIds' => 'setObjectStoryLinkIds',
        'followerIds' => 'setFollowerIds',
        'ownerIds' => 'setOwnerIds',
        'customFieldValueIds' => 'setCustomFieldValueIds',
        'estimate' => 'setEstimate',
        'subjectStoryLinkIds' => 'setSubjectStoryLinkIds',
        'blocked' => 'setBlocked',
        'projectId' => 'setProjectId',
        'deadline' => 'setDeadline'];
    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'description' => 'getDescription',
        'archived' => 'getArchived',
        'started' => 'getStarted',
        'taskIds' => 'getTaskIds',
        'mentionIds' => 'getMentionIds',
        'storyType' => 'getStoryType',
        'name' => 'getName',
        'completed' => 'getCompleted',
        'blocker' => 'getBlocker',
        'epicId' => 'getEpicId',
        'branchIds' => 'getBranchIds',
        'commitIds' => 'getCommitIds',
        'requestedById' => 'getRequestedById',
        'iterationId' => 'getIterationId',
        'labelIds' => 'getLabelIds',
        'groupId' => 'getGroupId',
        'workflowStateId' => 'getWorkflowStateId',
        'objectStoryLinkIds' => 'getObjectStoryLinkIds',
        'followerIds' => 'getFollowerIds',
        'ownerIds' => 'getOwnerIds',
        'customFieldValueIds' => 'getCustomFieldValueIds',
        'estimate' => 'getEstimate',
        'subjectStoryLinkIds' => 'getSubjectStoryLinkIds',
        'blocked' => 'getBlocked',
        'projectId' => 'getProjectId',
        'deadline' => 'getDeadline'];
    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['archived'] = isset($data['archived']) ? $data['archived'] : null;
        $this->container['started'] = isset($data['started']) ? $data['started'] : null;
        $this->container['taskIds'] = isset($data['taskIds']) ? $data['taskIds'] : null;
        $this->container['mentionIds'] = isset($data['mentionIds']) ? $data['mentionIds'] : null;
        $this->container['storyType'] = isset($data['storyType']) ? $data['storyType'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['completed'] = isset($data['completed']) ? $data['completed'] : null;
        $this->container['blocker'] = isset($data['blocker']) ? $data['blocker'] : null;
        $this->container['epicId'] = isset($data['epicId']) ? $data['epicId'] : null;
        $this->container['branchIds'] = isset($data['branchIds']) ? $data['branchIds'] : null;
        $this->container['commitIds'] = isset($data['commitIds']) ? $data['commitIds'] : null;
        $this->container['requestedById'] = isset($data['requestedById']) ? $data['requestedById'] : null;
        $this->container['iterationId'] = isset($data['iterationId']) ? $data['iterationId'] : null;
        $this->container['labelIds'] = isset($data['labelIds']) ? $data['labelIds'] : null;
        $this->container['groupId'] = isset($data['groupId']) ? $data['groupId'] : null;
        $this->container['workflowStateId'] = isset($data['workflowStateId']) ? $data['workflowStateId'] : null;
        $this->container['objectStoryLinkIds'] = isset($data['objectStoryLinkIds']) ? $data['objectStoryLinkIds'] : null;
        $this->container['followerIds'] = isset($data['followerIds']) ? $data['followerIds'] : null;
        $this->container['ownerIds'] = isset($data['ownerIds']) ? $data['ownerIds'] : null;
        $this->container['customFieldValueIds'] = isset($data['customFieldValueIds']) ? $data['customFieldValueIds'] : null;
        $this->container['estimate'] = isset($data['estimate']) ? $data['estimate'] : null;
        $this->container['subjectStoryLinkIds'] = isset($data['subjectStoryLinkIds']) ? $data['subjectStoryLinkIds'] : null;
        $this->container['blocked'] = isset($data['blocked']) ? $data['blocked'] : null;
        $this->container['projectId'] = isset($data['projectId']) ? $data['projectId'] : null;
        $this->container['deadline'] = isset($data['deadline']) ? $data['deadline'] : null;
    }

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Gets description
     *
     * @return StoryHistoryChangeOldNewStr
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param StoryHistoryChangeOldNewStr $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets archived
     *
     * @return StoryHistoryChangeOldNewBool
     */
    public function getArchived()
    {
        return $this->container['archived'];
    }

    /**
     * Sets archived
     *
     * @param StoryHistoryChangeOldNewBool $archived archived
     *
     * @return $this
     */
    public function setArchived($archived)
    {
        $this->container['archived'] = $archived;

        return $this;
    }

    /**
     * Gets started
     *
     * @return StoryHistoryChangeOldNewBool
     */
    public function getStarted()
    {
        return $this->container['started'];
    }

    /**
     * Sets started
     *
     * @param StoryHistoryChangeOldNewBool $started started
     *
     * @return $this
     */
    public function setStarted($started)
    {
        $this->container['started'] = $started;

        return $this;
    }

    /**
     * Gets taskIds
     *
     * @return StoryHistoryChangeAddsRemovesInt
     */
    public function getTaskIds()
    {
        return $this->container['taskIds'];
    }

    /**
     * Sets taskIds
     *
     * @param StoryHistoryChangeAddsRemovesInt $taskIds taskIds
     *
     * @return $this
     */
    public function setTaskIds($taskIds)
    {
        $this->container['taskIds'] = $taskIds;

        return $this;
    }

    /**
     * Gets mentionIds
     *
     * @return StoryHistoryChangeAddsRemovesUuid
     */
    public function getMentionIds()
    {
        return $this->container['mentionIds'];
    }

    /**
     * Sets mentionIds
     *
     * @param StoryHistoryChangeAddsRemovesUuid $mentionIds mentionIds
     *
     * @return $this
     */
    public function setMentionIds($mentionIds)
    {
        $this->container['mentionIds'] = $mentionIds;

        return $this;
    }

    /**
     * Gets storyType
     *
     * @return StoryHistoryChangeOldNewStr
     */
    public function getStoryType()
    {
        return $this->container['storyType'];
    }

    /**
     * Sets storyType
     *
     * @param StoryHistoryChangeOldNewStr $storyType storyType
     *
     * @return $this
     */
    public function setStoryType($storyType)
    {
        $this->container['storyType'] = $storyType;

        return $this;
    }

    /**
     * Gets name
     *
     * @return StoryHistoryChangeOldNewStr
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param StoryHistoryChangeOldNewStr $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets completed
     *
     * @return StoryHistoryChangeOldNewBool
     */
    public function getCompleted()
    {
        return $this->container['completed'];
    }

    /**
     * Sets completed
     *
     * @param StoryHistoryChangeOldNewBool $completed completed
     *
     * @return $this
     */
    public function setCompleted($completed)
    {
        $this->container['completed'] = $completed;

        return $this;
    }

    /**
     * Gets blocker
     *
     * @return StoryHistoryChangeOldNewBool
     */
    public function getBlocker()
    {
        return $this->container['blocker'];
    }

    /**
     * Sets blocker
     *
     * @param StoryHistoryChangeOldNewBool $blocker blocker
     *
     * @return $this
     */
    public function setBlocker($blocker)
    {
        $this->container['blocker'] = $blocker;

        return $this;
    }

    /**
     * Gets epicId
     *
     * @return StoryHistoryChangeOldNewInt
     */
    public function getEpicId()
    {
        return $this->container['epicId'];
    }

    /**
     * Sets epicId
     *
     * @param StoryHistoryChangeOldNewInt $epicId epicId
     *
     * @return $this
     */
    public function setEpicId($epicId)
    {
        $this->container['epicId'] = $epicId;

        return $this;
    }

    /**
     * Gets branchIds
     *
     * @return StoryHistoryChangeAddsRemovesInt
     */
    public function getBranchIds()
    {
        return $this->container['branchIds'];
    }

    /**
     * Sets branchIds
     *
     * @param StoryHistoryChangeAddsRemovesInt $branchIds branchIds
     *
     * @return $this
     */
    public function setBranchIds($branchIds)
    {
        $this->container['branchIds'] = $branchIds;

        return $this;
    }

    /**
     * Gets commitIds
     *
     * @return StoryHistoryChangeAddsRemovesInt
     */
    public function getCommitIds()
    {
        return $this->container['commitIds'];
    }

    /**
     * Sets commitIds
     *
     * @param StoryHistoryChangeAddsRemovesInt $commitIds commitIds
     *
     * @return $this
     */
    public function setCommitIds($commitIds)
    {
        $this->container['commitIds'] = $commitIds;

        return $this;
    }

    /**
     * Gets requestedById
     *
     * @return StoryHistoryChangeOldNewUuid
     */
    public function getRequestedById()
    {
        return $this->container['requestedById'];
    }

    /**
     * Sets requestedById
     *
     * @param StoryHistoryChangeOldNewUuid $requestedById requestedById
     *
     * @return $this
     */
    public function setRequestedById($requestedById)
    {
        $this->container['requestedById'] = $requestedById;

        return $this;
    }

    /**
     * Gets iterationId
     *
     * @return StoryHistoryChangeOldNewInt
     */
    public function getIterationId()
    {
        return $this->container['iterationId'];
    }

    /**
     * Sets iterationId
     *
     * @param StoryHistoryChangeOldNewInt $iterationId iterationId
     *
     * @return $this
     */
    public function setIterationId($iterationId)
    {
        $this->container['iterationId'] = $iterationId;

        return $this;
    }

    /**
     * Gets labelIds
     *
     * @return StoryHistoryChangeAddsRemovesInt
     */
    public function getLabelIds()
    {
        return $this->container['labelIds'];
    }

    /**
     * Sets labelIds
     *
     * @param StoryHistoryChangeAddsRemovesInt $labelIds labelIds
     *
     * @return $this
     */
    public function setLabelIds($labelIds)
    {
        $this->container['labelIds'] = $labelIds;

        return $this;
    }

    /**
     * Gets groupId
     *
     * @return StoryHistoryChangeOldNewUuid
     */
    public function getGroupId()
    {
        return $this->container['groupId'];
    }

    /**
     * Sets groupId
     *
     * @param StoryHistoryChangeOldNewUuid $groupId groupId
     *
     * @return $this
     */
    public function setGroupId($groupId)
    {
        $this->container['groupId'] = $groupId;

        return $this;
    }

    /**
     * Gets workflowStateId
     *
     * @return StoryHistoryChangeOldNewInt
     */
    public function getWorkflowStateId()
    {
        return $this->container['workflowStateId'];
    }

    /**
     * Sets workflowStateId
     *
     * @param StoryHistoryChangeOldNewInt $workflowStateId workflowStateId
     *
     * @return $this
     */
    public function setWorkflowStateId($workflowStateId)
    {
        $this->container['workflowStateId'] = $workflowStateId;

        return $this;
    }

    /**
     * Gets objectStoryLinkIds
     *
     * @return StoryHistoryChangeAddsRemovesInt
     */
    public function getObjectStoryLinkIds()
    {
        return $this->container['objectStoryLinkIds'];
    }

    /**
     * Sets objectStoryLinkIds
     *
     * @param StoryHistoryChangeAddsRemovesInt $objectStoryLinkIds objectStoryLinkIds
     *
     * @return $this
     */
    public function setObjectStoryLinkIds($objectStoryLinkIds)
    {
        $this->container['objectStoryLinkIds'] = $objectStoryLinkIds;

        return $this;
    }

    /**
     * Gets followerIds
     *
     * @return StoryHistoryChangeAddsRemovesUuid
     */
    public function getFollowerIds()
    {
        return $this->container['followerIds'];
    }

    /**
     * Sets followerIds
     *
     * @param StoryHistoryChangeAddsRemovesUuid $followerIds followerIds
     *
     * @return $this
     */
    public function setFollowerIds($followerIds)
    {
        $this->container['followerIds'] = $followerIds;

        return $this;
    }

    /**
     * Gets ownerIds
     *
     * @return StoryHistoryChangeAddsRemovesUuid
     */
    public function getOwnerIds()
    {
        return $this->container['ownerIds'];
    }

    /**
     * Sets ownerIds
     *
     * @param StoryHistoryChangeAddsRemovesUuid $ownerIds ownerIds
     *
     * @return $this
     */
    public function setOwnerIds($ownerIds)
    {
        $this->container['ownerIds'] = $ownerIds;

        return $this;
    }

    /**
     * Gets customFieldValueIds
     *
     * @return StoryHistoryChangeAddsRemovesUuid
     */
    public function getCustomFieldValueIds()
    {
        return $this->container['customFieldValueIds'];
    }

    /**
     * Sets customFieldValueIds
     *
     * @param StoryHistoryChangeAddsRemovesUuid $customFieldValueIds customFieldValueIds
     *
     * @return $this
     */
    public function setCustomFieldValueIds($customFieldValueIds)
    {
        $this->container['customFieldValueIds'] = $customFieldValueIds;

        return $this;
    }

    /**
     * Gets estimate
     *
     * @return StoryHistoryChangeOldNewInt
     */
    public function getEstimate()
    {
        return $this->container['estimate'];
    }

    /**
     * Sets estimate
     *
     * @param StoryHistoryChangeOldNewInt $estimate estimate
     *
     * @return $this
     */
    public function setEstimate($estimate)
    {
        $this->container['estimate'] = $estimate;

        return $this;
    }

    /**
     * Gets subjectStoryLinkIds
     *
     * @return StoryHistoryChangeAddsRemovesInt
     */
    public function getSubjectStoryLinkIds()
    {
        return $this->container['subjectStoryLinkIds'];
    }

    /**
     * Sets subjectStoryLinkIds
     *
     * @param StoryHistoryChangeAddsRemovesInt $subjectStoryLinkIds subjectStoryLinkIds
     *
     * @return $this
     */
    public function setSubjectStoryLinkIds($subjectStoryLinkIds)
    {
        $this->container['subjectStoryLinkIds'] = $subjectStoryLinkIds;

        return $this;
    }

    /**
     * Gets blocked
     *
     * @return StoryHistoryChangeOldNewBool
     */
    public function getBlocked()
    {
        return $this->container['blocked'];
    }

    /**
     * Sets blocked
     *
     * @param StoryHistoryChangeOldNewBool $blocked blocked
     *
     * @return $this
     */
    public function setBlocked($blocked)
    {
        $this->container['blocked'] = $blocked;

        return $this;
    }

    /**
     * Gets projectId
     *
     * @return StoryHistoryChangeOldNewInt
     */
    public function getProjectId()
    {
        return $this->container['projectId'];
    }

    /**
     * Sets projectId
     *
     * @param StoryHistoryChangeOldNewInt $projectId projectId
     *
     * @return $this
     */
    public function setProjectId($projectId)
    {
        $this->container['projectId'] = $projectId;

        return $this;
    }

    /**
     * Gets deadline
     *
     * @return StoryHistoryChangeOldNewStr
     */
    public function getDeadline()
    {
        return $this->container['deadline'];
    }

    /**
     * Sets deadline
     *
     * @param StoryHistoryChangeOldNewStr $deadline deadline
     *
     * @return $this
     */
    public function setDeadline($deadline)
    {
        $this->container['deadline'] = $deadline;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed $value Value to be set
     *
     * @return void
     */
    #[ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
