<?php
/**
 * SearchStories
 *
 * PHP version 5
 *
 * @category Class
 * @package  Timetoreply\Shortcut
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Shortcut API
 *
 * Shortcut API
 *
 * OpenAPI spec version: 3.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.43-SNAPSHOT
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Timetoreply\Shortcut\Model;

use ArrayAccess;
use DateTime;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Timetoreply\Shortcut\ObjectSerializer;

/**
 * SearchStories Class Doc Comment
 *
 * @category Class
 * @package  Timetoreply\Shortcut
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SearchStories implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;
    const STORY_TYPE_FEATURE = 'feature';
    const STORY_TYPE_CHORE = 'chore';
    const STORY_TYPE_BUG = 'bug';
    const WORKFLOW_STATE_TYPES_STARTED = 'started';
    const WORKFLOW_STATE_TYPES_BACKLOG = 'backlog';
    const WORKFLOW_STATE_TYPES_UNSTARTED = 'unstarted';
    const WORKFLOW_STATE_TYPES_DONE = 'done';
    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'SearchStories';
    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'archived' => 'bool',
        'ownerId' => 'string',
        'storyType' => 'string',
        'epicIds' => 'int[]',
        'projectIds' => 'int[]',
        'updatedAtEnd' => '\DateTime',
        'completedAtEnd' => '\DateTime',
        'workflowStateTypes' => 'string[]',
        'deadlineEnd' => '\DateTime',
        'createdAtStart' => '\DateTime',
        'epicId' => 'int',
        'labelName' => 'string',
        'requestedById' => 'string',
        'iterationId' => 'int',
        'labelIds' => 'int[]',
        'groupId' => 'string',
        'workflowStateId' => 'int',
        'iterationIds' => 'int[]',
        'createdAtEnd' => '\DateTime',
        'deadlineStart' => '\DateTime',
        'groupIds' => 'string[]',
        'ownerIds' => 'string[]',
        'externalId' => 'string',
        'includesDescription' => 'bool',
        'estimate' => 'int',
        'projectId' => 'int',
        'completedAtStart' => '\DateTime',
        'updatedAtStart' => '\DateTime'];
    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'archived' => null,
        'ownerId' => 'uuid',
        'storyType' => null,
        'epicIds' => 'int64',
        'projectIds' => 'int64',
        'updatedAtEnd' => 'date-time',
        'completedAtEnd' => 'date-time',
        'workflowStateTypes' => null,
        'deadlineEnd' => 'date-time',
        'createdAtStart' => 'date-time',
        'epicId' => 'int64',
        'labelName' => null,
        'requestedById' => 'uuid',
        'iterationId' => 'int64',
        'labelIds' => 'int64',
        'groupId' => 'uuid',
        'workflowStateId' => 'int64',
        'iterationIds' => 'int64',
        'createdAtEnd' => 'date-time',
        'deadlineStart' => 'date-time',
        'groupIds' => 'uuid',
        'ownerIds' => 'uuid',
        'externalId' => null,
        'includesDescription' => null,
        'estimate' => 'int64',
        'projectId' => 'int64',
        'completedAtStart' => 'date-time',
        'updatedAtStart' => 'date-time'];
    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'archived' => 'archived',
        'ownerId' => 'owner_id',
        'storyType' => 'story_type',
        'epicIds' => 'epic_ids',
        'projectIds' => 'project_ids',
        'updatedAtEnd' => 'updated_at_end',
        'completedAtEnd' => 'completed_at_end',
        'workflowStateTypes' => 'workflow_state_types',
        'deadlineEnd' => 'deadline_end',
        'createdAtStart' => 'created_at_start',
        'epicId' => 'epic_id',
        'labelName' => 'label_name',
        'requestedById' => 'requested_by_id',
        'iterationId' => 'iteration_id',
        'labelIds' => 'label_ids',
        'groupId' => 'group_id',
        'workflowStateId' => 'workflow_state_id',
        'iterationIds' => 'iteration_ids',
        'createdAtEnd' => 'created_at_end',
        'deadlineStart' => 'deadline_start',
        'groupIds' => 'group_ids',
        'ownerIds' => 'owner_ids',
        'externalId' => 'external_id',
        'includesDescription' => 'includes_description',
        'estimate' => 'estimate',
        'projectId' => 'project_id',
        'completedAtStart' => 'completed_at_start',
        'updatedAtStart' => 'updated_at_start'];
    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'archived' => 'setArchived',
        'ownerId' => 'setOwnerId',
        'storyType' => 'setStoryType',
        'epicIds' => 'setEpicIds',
        'projectIds' => 'setProjectIds',
        'updatedAtEnd' => 'setUpdatedAtEnd',
        'completedAtEnd' => 'setCompletedAtEnd',
        'workflowStateTypes' => 'setWorkflowStateTypes',
        'deadlineEnd' => 'setDeadlineEnd',
        'createdAtStart' => 'setCreatedAtStart',
        'epicId' => 'setEpicId',
        'labelName' => 'setLabelName',
        'requestedById' => 'setRequestedById',
        'iterationId' => 'setIterationId',
        'labelIds' => 'setLabelIds',
        'groupId' => 'setGroupId',
        'workflowStateId' => 'setWorkflowStateId',
        'iterationIds' => 'setIterationIds',
        'createdAtEnd' => 'setCreatedAtEnd',
        'deadlineStart' => 'setDeadlineStart',
        'groupIds' => 'setGroupIds',
        'ownerIds' => 'setOwnerIds',
        'externalId' => 'setExternalId',
        'includesDescription' => 'setIncludesDescription',
        'estimate' => 'setEstimate',
        'projectId' => 'setProjectId',
        'completedAtStart' => 'setCompletedAtStart',
        'updatedAtStart' => 'setUpdatedAtStart'];
    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'archived' => 'getArchived',
        'ownerId' => 'getOwnerId',
        'storyType' => 'getStoryType',
        'epicIds' => 'getEpicIds',
        'projectIds' => 'getProjectIds',
        'updatedAtEnd' => 'getUpdatedAtEnd',
        'completedAtEnd' => 'getCompletedAtEnd',
        'workflowStateTypes' => 'getWorkflowStateTypes',
        'deadlineEnd' => 'getDeadlineEnd',
        'createdAtStart' => 'getCreatedAtStart',
        'epicId' => 'getEpicId',
        'labelName' => 'getLabelName',
        'requestedById' => 'getRequestedById',
        'iterationId' => 'getIterationId',
        'labelIds' => 'getLabelIds',
        'groupId' => 'getGroupId',
        'workflowStateId' => 'getWorkflowStateId',
        'iterationIds' => 'getIterationIds',
        'createdAtEnd' => 'getCreatedAtEnd',
        'deadlineStart' => 'getDeadlineStart',
        'groupIds' => 'getGroupIds',
        'ownerIds' => 'getOwnerIds',
        'externalId' => 'getExternalId',
        'includesDescription' => 'getIncludesDescription',
        'estimate' => 'getEstimate',
        'projectId' => 'getProjectId',
        'completedAtStart' => 'getCompletedAtStart',
        'updatedAtStart' => 'getUpdatedAtStart'];
    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['archived'] = isset($data['archived']) ? $data['archived'] : null;
        $this->container['ownerId'] = isset($data['ownerId']) ? $data['ownerId'] : null;
        $this->container['storyType'] = isset($data['storyType']) ? $data['storyType'] : null;
        $this->container['epicIds'] = isset($data['epicIds']) ? $data['epicIds'] : null;
        $this->container['projectIds'] = isset($data['projectIds']) ? $data['projectIds'] : null;
        $this->container['updatedAtEnd'] = isset($data['updatedAtEnd']) ? $data['updatedAtEnd'] : null;
        $this->container['completedAtEnd'] = isset($data['completedAtEnd']) ? $data['completedAtEnd'] : null;
        $this->container['workflowStateTypes'] = isset($data['workflowStateTypes']) ? $data['workflowStateTypes'] : null;
        $this->container['deadlineEnd'] = isset($data['deadlineEnd']) ? $data['deadlineEnd'] : null;
        $this->container['createdAtStart'] = isset($data['createdAtStart']) ? $data['createdAtStart'] : null;
        $this->container['epicId'] = isset($data['epicId']) ? $data['epicId'] : null;
        $this->container['labelName'] = isset($data['labelName']) ? $data['labelName'] : null;
        $this->container['requestedById'] = isset($data['requestedById']) ? $data['requestedById'] : null;
        $this->container['iterationId'] = isset($data['iterationId']) ? $data['iterationId'] : null;
        $this->container['labelIds'] = isset($data['labelIds']) ? $data['labelIds'] : null;
        $this->container['groupId'] = isset($data['groupId']) ? $data['groupId'] : null;
        $this->container['workflowStateId'] = isset($data['workflowStateId']) ? $data['workflowStateId'] : null;
        $this->container['iterationIds'] = isset($data['iterationIds']) ? $data['iterationIds'] : null;
        $this->container['createdAtEnd'] = isset($data['createdAtEnd']) ? $data['createdAtEnd'] : null;
        $this->container['deadlineStart'] = isset($data['deadlineStart']) ? $data['deadlineStart'] : null;
        $this->container['groupIds'] = isset($data['groupIds']) ? $data['groupIds'] : null;
        $this->container['ownerIds'] = isset($data['ownerIds']) ? $data['ownerIds'] : null;
        $this->container['externalId'] = isset($data['externalId']) ? $data['externalId'] : null;
        $this->container['includesDescription'] = isset($data['includesDescription']) ? $data['includesDescription'] : null;
        $this->container['estimate'] = isset($data['estimate']) ? $data['estimate'] : null;
        $this->container['projectId'] = isset($data['projectId']) ? $data['projectId'] : null;
        $this->container['completedAtStart'] = isset($data['completedAtStart']) ? $data['completedAtStart'] : null;
        $this->container['updatedAtStart'] = isset($data['updatedAtStart']) ? $data['updatedAtStart'] : null;
    }

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStoryTypeAllowableValues();
        if (!is_null($this->container['storyType']) && !in_array($this->container['storyType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'storyType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStoryTypeAllowableValues()
    {
        return [
            self::STORY_TYPE_FEATURE,
            self::STORY_TYPE_CHORE,
            self::STORY_TYPE_BUG,];
    }

    /**
     * Gets archived
     *
     * @return bool
     */
    public function getArchived()
    {
        return $this->container['archived'];
    }

    /**
     * Sets archived
     *
     * @param bool $archived A true/false boolean indicating whether the Story is in archived state.
     *
     * @return $this
     */
    public function setArchived($archived)
    {
        $this->container['archived'] = $archived;

        return $this;
    }

    /**
     * Gets ownerId
     *
     * @return string
     */
    public function getOwnerId()
    {
        return $this->container['ownerId'];
    }

    /**
     * Sets ownerId
     *
     * @param string $ownerId An array of UUIDs for any Users who may be Owners of the Stories.
     *
     * @return $this
     */
    public function setOwnerId($ownerId)
    {
        $this->container['ownerId'] = $ownerId;

        return $this;
    }

    /**
     * Gets storyType
     *
     * @return string
     */
    public function getStoryType()
    {
        return $this->container['storyType'];
    }

    /**
     * Sets storyType
     *
     * @param string $storyType The type of Stories that you want returned.
     *
     * @return $this
     */
    public function setStoryType($storyType)
    {
        $allowedValues = $this->getStoryTypeAllowableValues();
        if (!is_null($storyType) && !in_array($storyType, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value for 'storyType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['storyType'] = $storyType;

        return $this;
    }

    /**
     * Gets epicIds
     *
     * @return int[]
     */
    public function getEpicIds()
    {
        return $this->container['epicIds'];
    }

    /**
     * Sets epicIds
     *
     * @param int[] $epicIds The Epic IDs that may be associated with the Stories.
     *
     * @return $this
     */
    public function setEpicIds($epicIds)
    {
        $this->container['epicIds'] = $epicIds;

        return $this;
    }

    /**
     * Gets projectIds
     *
     * @return int[]
     */
    public function getProjectIds()
    {
        return $this->container['projectIds'];
    }

    /**
     * Sets projectIds
     *
     * @param int[] $projectIds The IDs for the Projects the Stories may be assigned to.
     *
     * @return $this
     */
    public function setProjectIds($projectIds)
    {
        $this->container['projectIds'] = $projectIds;

        return $this;
    }

    /**
     * Gets updatedAtEnd
     *
     * @return DateTime
     */
    public function getUpdatedAtEnd()
    {
        return $this->container['updatedAtEnd'];
    }

    /**
     * Sets updatedAtEnd
     *
     * @param DateTime $updatedAtEnd Stories should have been updated before this date.
     *
     * @return $this
     */
    public function setUpdatedAtEnd($updatedAtEnd)
    {
        $this->container['updatedAtEnd'] = $updatedAtEnd;

        return $this;
    }

    /**
     * Gets completedAtEnd
     *
     * @return DateTime
     */
    public function getCompletedAtEnd()
    {
        return $this->container['completedAtEnd'];
    }

    /**
     * Sets completedAtEnd
     *
     * @param DateTime $completedAtEnd Stories should have been completed before this date.
     *
     * @return $this
     */
    public function setCompletedAtEnd($completedAtEnd)
    {
        $this->container['completedAtEnd'] = $completedAtEnd;

        return $this;
    }

    /**
     * Gets workflowStateTypes
     *
     * @return string[]
     */
    public function getWorkflowStateTypes()
    {
        return $this->container['workflowStateTypes'];
    }

    /**
     * Sets workflowStateTypes
     *
     * @param string[] $workflowStateTypes The type of Workflow State the Stories may be in.
     *
     * @return $this
     */
    public function setWorkflowStateTypes($workflowStateTypes)
    {
        $allowedValues = $this->getWorkflowStateTypesAllowableValues();
        if (!is_null($workflowStateTypes) && array_diff($workflowStateTypes, $allowedValues)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value for 'workflowStateTypes', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['workflowStateTypes'] = $workflowStateTypes;

        return $this;
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWorkflowStateTypesAllowableValues()
    {
        return [
            self::WORKFLOW_STATE_TYPES_STARTED,
            self::WORKFLOW_STATE_TYPES_BACKLOG,
            self::WORKFLOW_STATE_TYPES_UNSTARTED,
            self::WORKFLOW_STATE_TYPES_DONE,];
    }

    /**
     * Gets deadlineEnd
     *
     * @return DateTime
     */
    public function getDeadlineEnd()
    {
        return $this->container['deadlineEnd'];
    }

    /**
     * Sets deadlineEnd
     *
     * @param DateTime $deadlineEnd Stories should have a deadline before this date.
     *
     * @return $this
     */
    public function setDeadlineEnd($deadlineEnd)
    {
        $this->container['deadlineEnd'] = $deadlineEnd;

        return $this;
    }

    /**
     * Gets createdAtStart
     *
     * @return DateTime
     */
    public function getCreatedAtStart()
    {
        return $this->container['createdAtStart'];
    }

    /**
     * Sets createdAtStart
     *
     * @param DateTime $createdAtStart Stories should have been created after this date.
     *
     * @return $this
     */
    public function setCreatedAtStart($createdAtStart)
    {
        $this->container['createdAtStart'] = $createdAtStart;

        return $this;
    }

    /**
     * Gets epicId
     *
     * @return int
     */
    public function getEpicId()
    {
        return $this->container['epicId'];
    }

    /**
     * Sets epicId
     *
     * @param int $epicId The Epic IDs that may be associated with the Stories.
     *
     * @return $this
     */
    public function setEpicId($epicId)
    {
        $this->container['epicId'] = $epicId;

        return $this;
    }

    /**
     * Gets labelName
     *
     * @return string
     */
    public function getLabelName()
    {
        return $this->container['labelName'];
    }

    /**
     * Sets labelName
     *
     * @param string $labelName The name of any associated Labels.
     *
     * @return $this
     */
    public function setLabelName($labelName)
    {
        $this->container['labelName'] = $labelName;

        return $this;
    }

    /**
     * Gets requestedById
     *
     * @return string
     */
    public function getRequestedById()
    {
        return $this->container['requestedById'];
    }

    /**
     * Sets requestedById
     *
     * @param string $requestedById The UUID of any Users who may have requested the Stories.
     *
     * @return $this
     */
    public function setRequestedById($requestedById)
    {
        $this->container['requestedById'] = $requestedById;

        return $this;
    }

    /**
     * Gets iterationId
     *
     * @return int
     */
    public function getIterationId()
    {
        return $this->container['iterationId'];
    }

    /**
     * Sets iterationId
     *
     * @param int $iterationId The Iteration ID that may be associated with the Stories.
     *
     * @return $this
     */
    public function setIterationId($iterationId)
    {
        $this->container['iterationId'] = $iterationId;

        return $this;
    }

    /**
     * Gets labelIds
     *
     * @return int[]
     */
    public function getLabelIds()
    {
        return $this->container['labelIds'];
    }

    /**
     * Sets labelIds
     *
     * @param int[] $labelIds The Label IDs that may be associated with the Stories.
     *
     * @return $this
     */
    public function setLabelIds($labelIds)
    {
        $this->container['labelIds'] = $labelIds;

        return $this;
    }

    /**
     * Gets groupId
     *
     * @return string
     */
    public function getGroupId()
    {
        return $this->container['groupId'];
    }

    /**
     * Sets groupId
     *
     * @param string $groupId The Group ID that is associated with the Stories
     *
     * @return $this
     */
    public function setGroupId($groupId)
    {
        $this->container['groupId'] = $groupId;

        return $this;
    }

    /**
     * Gets workflowStateId
     *
     * @return int
     */
    public function getWorkflowStateId()
    {
        return $this->container['workflowStateId'];
    }

    /**
     * Sets workflowStateId
     *
     * @param int $workflowStateId The unique IDs of the specific Workflow States that the Stories should be in.
     *
     * @return $this
     */
    public function setWorkflowStateId($workflowStateId)
    {
        $this->container['workflowStateId'] = $workflowStateId;

        return $this;
    }

    /**
     * Gets iterationIds
     *
     * @return int[]
     */
    public function getIterationIds()
    {
        return $this->container['iterationIds'];
    }

    /**
     * Sets iterationIds
     *
     * @param int[] $iterationIds The Iteration IDs that may be associated with the Stories.
     *
     * @return $this
     */
    public function setIterationIds($iterationIds)
    {
        $this->container['iterationIds'] = $iterationIds;

        return $this;
    }

    /**
     * Gets createdAtEnd
     *
     * @return DateTime
     */
    public function getCreatedAtEnd()
    {
        return $this->container['createdAtEnd'];
    }

    /**
     * Sets createdAtEnd
     *
     * @param DateTime $createdAtEnd Stories should have been created before this date.
     *
     * @return $this
     */
    public function setCreatedAtEnd($createdAtEnd)
    {
        $this->container['createdAtEnd'] = $createdAtEnd;

        return $this;
    }

    /**
     * Gets deadlineStart
     *
     * @return DateTime
     */
    public function getDeadlineStart()
    {
        return $this->container['deadlineStart'];
    }

    /**
     * Sets deadlineStart
     *
     * @param DateTime $deadlineStart Stories should have a deadline after this date.
     *
     * @return $this
     */
    public function setDeadlineStart($deadlineStart)
    {
        $this->container['deadlineStart'] = $deadlineStart;

        return $this;
    }

    /**
     * Gets groupIds
     *
     * @return string[]
     */
    public function getGroupIds()
    {
        return $this->container['groupIds'];
    }

    /**
     * Sets groupIds
     *
     * @param string[] $groupIds The Group IDs that are associated with the Stories
     *
     * @return $this
     */
    public function setGroupIds($groupIds)
    {
        $this->container['groupIds'] = $groupIds;

        return $this;
    }

    /**
     * Gets ownerIds
     *
     * @return string[]
     */
    public function getOwnerIds()
    {
        return $this->container['ownerIds'];
    }

    /**
     * Sets ownerIds
     *
     * @param string[] $ownerIds An array of UUIDs for any Users who may be Owners of the Stories.
     *
     * @return $this
     */
    public function setOwnerIds($ownerIds)
    {
        $this->container['ownerIds'] = $ownerIds;

        return $this;
    }

    /**
     * Gets externalId
     *
     * @return string
     */
    public function getExternalId()
    {
        return $this->container['externalId'];
    }

    /**
     * Sets externalId
     *
     * @param string $externalId An ID or URL that references an external resource. Useful during imports.
     *
     * @return $this
     */
    public function setExternalId($externalId)
    {
        $this->container['externalId'] = $externalId;

        return $this;
    }

    /**
     * Gets includesDescription
     *
     * @return bool
     */
    public function getIncludesDescription()
    {
        return $this->container['includesDescription'];
    }

    /**
     * Sets includesDescription
     *
     * @param bool $includesDescription Whether to include the story description in the response.
     *
     * @return $this
     */
    public function setIncludesDescription($includesDescription)
    {
        $this->container['includesDescription'] = $includesDescription;

        return $this;
    }

    /**
     * Gets estimate
     *
     * @return int
     */
    public function getEstimate()
    {
        return $this->container['estimate'];
    }

    /**
     * Sets estimate
     *
     * @param int $estimate The number of estimate points associate with the Stories.
     *
     * @return $this
     */
    public function setEstimate($estimate)
    {
        $this->container['estimate'] = $estimate;

        return $this;
    }

    /**
     * Gets projectId
     *
     * @return int
     */
    public function getProjectId()
    {
        return $this->container['projectId'];
    }

    /**
     * Sets projectId
     *
     * @param int $projectId The IDs for the Projects the Stories may be assigned to.
     *
     * @return $this
     */
    public function setProjectId($projectId)
    {
        $this->container['projectId'] = $projectId;

        return $this;
    }

    /**
     * Gets completedAtStart
     *
     * @return DateTime
     */
    public function getCompletedAtStart()
    {
        return $this->container['completedAtStart'];
    }

    /**
     * Sets completedAtStart
     *
     * @param DateTime $completedAtStart Stories should have been completed after this date.
     *
     * @return $this
     */
    public function setCompletedAtStart($completedAtStart)
    {
        $this->container['completedAtStart'] = $completedAtStart;

        return $this;
    }

    /**
     * Gets updatedAtStart
     *
     * @return DateTime
     */
    public function getUpdatedAtStart()
    {
        return $this->container['updatedAtStart'];
    }

    /**
     * Sets updatedAtStart
     *
     * @param DateTime $updatedAtStart Stories should have been updated after this date.
     *
     * @return $this
     */
    public function setUpdatedAtStart($updatedAtStart)
    {
        $this->container['updatedAtStart'] = $updatedAtStart;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed $value Value to be set
     *
     * @return void
     */
    #[ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
