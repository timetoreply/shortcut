<?php
/**
 * SearchStories
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Timetoreply\Shortcut
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Shortcut API
 *
 * Shortcut API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Timetoreply\Shortcut\Model;

use \ArrayAccess;
use \Timetoreply\Shortcut\ObjectSerializer;

/**
 * SearchStories Class Doc Comment
 *
 * @category Class
 * @package  Timetoreply\Shortcut
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SearchStories implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SearchStories';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'archived' => 'bool',
        'ownerId' => 'string',
        'storyType' => 'string',
        'epicIds' => 'int[]',
        'projectIds' => 'int[]',
        'updatedAtEnd' => '\DateTime',
        'completedAtEnd' => '\DateTime',
        'workflowStateTypes' => 'string[]',
        'deadlineEnd' => '\DateTime',
        'createdAtStart' => '\DateTime',
        'epicId' => 'int',
        'labelName' => 'string',
        'requestedById' => 'string',
        'iterationId' => 'int',
        'labelIds' => 'int[]',
        'groupId' => 'string',
        'workflowStateId' => 'int',
        'iterationIds' => 'int[]',
        'createdAtEnd' => '\DateTime',
        'deadlineStart' => '\DateTime',
        'groupIds' => 'string[]',
        'ownerIds' => 'string[]',
        'externalId' => 'string',
        'includesDescription' => 'bool',
        'estimate' => 'int',
        'projectId' => 'int',
        'completedAtStart' => '\DateTime',
        'updatedAtStart' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'archived' => null,
        'ownerId' => 'uuid',
        'storyType' => null,
        'epicIds' => 'int64',
        'projectIds' => 'int64',
        'updatedAtEnd' => 'date-time',
        'completedAtEnd' => 'date-time',
        'workflowStateTypes' => null,
        'deadlineEnd' => 'date-time',
        'createdAtStart' => 'date-time',
        'epicId' => 'int64',
        'labelName' => null,
        'requestedById' => 'uuid',
        'iterationId' => 'int64',
        'labelIds' => 'int64',
        'groupId' => 'uuid',
        'workflowStateId' => 'int64',
        'iterationIds' => 'int64',
        'createdAtEnd' => 'date-time',
        'deadlineStart' => 'date-time',
        'groupIds' => 'uuid',
        'ownerIds' => 'uuid',
        'externalId' => null,
        'includesDescription' => null,
        'estimate' => 'int64',
        'projectId' => 'int64',
        'completedAtStart' => 'date-time',
        'updatedAtStart' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'archived' => false,
        'ownerId' => true,
        'storyType' => false,
        'epicIds' => false,
        'projectIds' => false,
        'updatedAtEnd' => false,
        'completedAtEnd' => false,
        'workflowStateTypes' => false,
        'deadlineEnd' => false,
        'createdAtStart' => false,
        'epicId' => true,
        'labelName' => false,
        'requestedById' => false,
        'iterationId' => true,
        'labelIds' => false,
        'groupId' => true,
        'workflowStateId' => false,
        'iterationIds' => false,
        'createdAtEnd' => false,
        'deadlineStart' => false,
        'groupIds' => false,
        'ownerIds' => false,
        'externalId' => false,
        'includesDescription' => false,
        'estimate' => false,
        'projectId' => true,
        'completedAtStart' => false,
        'updatedAtStart' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'archived' => 'archived',
        'ownerId' => 'owner_id',
        'storyType' => 'story_type',
        'epicIds' => 'epic_ids',
        'projectIds' => 'project_ids',
        'updatedAtEnd' => 'updated_at_end',
        'completedAtEnd' => 'completed_at_end',
        'workflowStateTypes' => 'workflow_state_types',
        'deadlineEnd' => 'deadline_end',
        'createdAtStart' => 'created_at_start',
        'epicId' => 'epic_id',
        'labelName' => 'label_name',
        'requestedById' => 'requested_by_id',
        'iterationId' => 'iteration_id',
        'labelIds' => 'label_ids',
        'groupId' => 'group_id',
        'workflowStateId' => 'workflow_state_id',
        'iterationIds' => 'iteration_ids',
        'createdAtEnd' => 'created_at_end',
        'deadlineStart' => 'deadline_start',
        'groupIds' => 'group_ids',
        'ownerIds' => 'owner_ids',
        'externalId' => 'external_id',
        'includesDescription' => 'includes_description',
        'estimate' => 'estimate',
        'projectId' => 'project_id',
        'completedAtStart' => 'completed_at_start',
        'updatedAtStart' => 'updated_at_start'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'archived' => 'setArchived',
        'ownerId' => 'setOwnerId',
        'storyType' => 'setStoryType',
        'epicIds' => 'setEpicIds',
        'projectIds' => 'setProjectIds',
        'updatedAtEnd' => 'setUpdatedAtEnd',
        'completedAtEnd' => 'setCompletedAtEnd',
        'workflowStateTypes' => 'setWorkflowStateTypes',
        'deadlineEnd' => 'setDeadlineEnd',
        'createdAtStart' => 'setCreatedAtStart',
        'epicId' => 'setEpicId',
        'labelName' => 'setLabelName',
        'requestedById' => 'setRequestedById',
        'iterationId' => 'setIterationId',
        'labelIds' => 'setLabelIds',
        'groupId' => 'setGroupId',
        'workflowStateId' => 'setWorkflowStateId',
        'iterationIds' => 'setIterationIds',
        'createdAtEnd' => 'setCreatedAtEnd',
        'deadlineStart' => 'setDeadlineStart',
        'groupIds' => 'setGroupIds',
        'ownerIds' => 'setOwnerIds',
        'externalId' => 'setExternalId',
        'includesDescription' => 'setIncludesDescription',
        'estimate' => 'setEstimate',
        'projectId' => 'setProjectId',
        'completedAtStart' => 'setCompletedAtStart',
        'updatedAtStart' => 'setUpdatedAtStart'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'archived' => 'getArchived',
        'ownerId' => 'getOwnerId',
        'storyType' => 'getStoryType',
        'epicIds' => 'getEpicIds',
        'projectIds' => 'getProjectIds',
        'updatedAtEnd' => 'getUpdatedAtEnd',
        'completedAtEnd' => 'getCompletedAtEnd',
        'workflowStateTypes' => 'getWorkflowStateTypes',
        'deadlineEnd' => 'getDeadlineEnd',
        'createdAtStart' => 'getCreatedAtStart',
        'epicId' => 'getEpicId',
        'labelName' => 'getLabelName',
        'requestedById' => 'getRequestedById',
        'iterationId' => 'getIterationId',
        'labelIds' => 'getLabelIds',
        'groupId' => 'getGroupId',
        'workflowStateId' => 'getWorkflowStateId',
        'iterationIds' => 'getIterationIds',
        'createdAtEnd' => 'getCreatedAtEnd',
        'deadlineStart' => 'getDeadlineStart',
        'groupIds' => 'getGroupIds',
        'ownerIds' => 'getOwnerIds',
        'externalId' => 'getExternalId',
        'includesDescription' => 'getIncludesDescription',
        'estimate' => 'getEstimate',
        'projectId' => 'getProjectId',
        'completedAtStart' => 'getCompletedAtStart',
        'updatedAtStart' => 'getUpdatedAtStart'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STORY_TYPE_FEATURE = 'feature';
    public const STORY_TYPE_CHORE = 'chore';
    public const STORY_TYPE_BUG = 'bug';
    public const WORKFLOW_STATE_TYPES_STARTED = 'started';
    public const WORKFLOW_STATE_TYPES_BACKLOG = 'backlog';
    public const WORKFLOW_STATE_TYPES_UNSTARTED = 'unstarted';
    public const WORKFLOW_STATE_TYPES_DONE = 'done';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStoryTypeAllowableValues()
    {
        return [
            self::STORY_TYPE_FEATURE,
            self::STORY_TYPE_CHORE,
            self::STORY_TYPE_BUG,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWorkflowStateTypesAllowableValues()
    {
        return [
            self::WORKFLOW_STATE_TYPES_STARTED,
            self::WORKFLOW_STATE_TYPES_BACKLOG,
            self::WORKFLOW_STATE_TYPES_UNSTARTED,
            self::WORKFLOW_STATE_TYPES_DONE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('archived', $data ?? [], null);
        $this->setIfExists('ownerId', $data ?? [], null);
        $this->setIfExists('storyType', $data ?? [], null);
        $this->setIfExists('epicIds', $data ?? [], null);
        $this->setIfExists('projectIds', $data ?? [], null);
        $this->setIfExists('updatedAtEnd', $data ?? [], null);
        $this->setIfExists('completedAtEnd', $data ?? [], null);
        $this->setIfExists('workflowStateTypes', $data ?? [], null);
        $this->setIfExists('deadlineEnd', $data ?? [], null);
        $this->setIfExists('createdAtStart', $data ?? [], null);
        $this->setIfExists('epicId', $data ?? [], null);
        $this->setIfExists('labelName', $data ?? [], null);
        $this->setIfExists('requestedById', $data ?? [], null);
        $this->setIfExists('iterationId', $data ?? [], null);
        $this->setIfExists('labelIds', $data ?? [], null);
        $this->setIfExists('groupId', $data ?? [], null);
        $this->setIfExists('workflowStateId', $data ?? [], null);
        $this->setIfExists('iterationIds', $data ?? [], null);
        $this->setIfExists('createdAtEnd', $data ?? [], null);
        $this->setIfExists('deadlineStart', $data ?? [], null);
        $this->setIfExists('groupIds', $data ?? [], null);
        $this->setIfExists('ownerIds', $data ?? [], null);
        $this->setIfExists('externalId', $data ?? [], null);
        $this->setIfExists('includesDescription', $data ?? [], null);
        $this->setIfExists('estimate', $data ?? [], null);
        $this->setIfExists('projectId', $data ?? [], null);
        $this->setIfExists('completedAtStart', $data ?? [], null);
        $this->setIfExists('updatedAtStart', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStoryTypeAllowableValues();
        if (!is_null($this->container['storyType']) && !in_array($this->container['storyType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'storyType', must be one of '%s'",
                $this->container['storyType'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['labelName']) && (mb_strlen($this->container['labelName']) < 1)) {
            $invalidProperties[] = "invalid value for 'labelName', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['externalId']) && (mb_strlen($this->container['externalId']) > 1024)) {
            $invalidProperties[] = "invalid value for 'externalId', the character length must be smaller than or equal to 1024.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets archived
     *
     * @return bool|null
     */
    public function getArchived()
    {
        return $this->container['archived'];
    }

    /**
     * Sets archived
     *
     * @param bool|null $archived A true/false boolean indicating whether the Story is in archived state.
     *
     * @return self
     */
    public function setArchived($archived)
    {
        if (is_null($archived)) {
            throw new \InvalidArgumentException('non-nullable archived cannot be null');
        }
        $this->container['archived'] = $archived;

        return $this;
    }

    /**
     * Gets ownerId
     *
     * @return string|null
     */
    public function getOwnerId()
    {
        return $this->container['ownerId'];
    }

    /**
     * Sets ownerId
     *
     * @param string|null $ownerId An array of UUIDs for any Users who may be Owners of the Stories.
     *
     * @return self
     */
    public function setOwnerId($ownerId)
    {
        if (is_null($ownerId)) {
            array_push($this->openAPINullablesSetToNull, 'ownerId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ownerId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ownerId'] = $ownerId;

        return $this;
    }

    /**
     * Gets storyType
     *
     * @return string|null
     */
    public function getStoryType()
    {
        return $this->container['storyType'];
    }

    /**
     * Sets storyType
     *
     * @param string|null $storyType The type of Stories that you want returned.
     *
     * @return self
     */
    public function setStoryType($storyType)
    {
        if (is_null($storyType)) {
            throw new \InvalidArgumentException('non-nullable storyType cannot be null');
        }
        $allowedValues = $this->getStoryTypeAllowableValues();
        if (!in_array($storyType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'storyType', must be one of '%s'",
                    $storyType,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['storyType'] = $storyType;

        return $this;
    }

    /**
     * Gets epicIds
     *
     * @return int[]|null
     */
    public function getEpicIds()
    {
        return $this->container['epicIds'];
    }

    /**
     * Sets epicIds
     *
     * @param int[]|null $epicIds The Epic IDs that may be associated with the Stories.
     *
     * @return self
     */
    public function setEpicIds($epicIds)
    {
        if (is_null($epicIds)) {
            throw new \InvalidArgumentException('non-nullable epicIds cannot be null');
        }


        $this->container['epicIds'] = $epicIds;

        return $this;
    }

    /**
     * Gets projectIds
     *
     * @return int[]|null
     */
    public function getProjectIds()
    {
        return $this->container['projectIds'];
    }

    /**
     * Sets projectIds
     *
     * @param int[]|null $projectIds The IDs for the Projects the Stories may be assigned to.
     *
     * @return self
     */
    public function setProjectIds($projectIds)
    {
        if (is_null($projectIds)) {
            throw new \InvalidArgumentException('non-nullable projectIds cannot be null');
        }


        $this->container['projectIds'] = $projectIds;

        return $this;
    }

    /**
     * Gets updatedAtEnd
     *
     * @return \DateTime|null
     */
    public function getUpdatedAtEnd()
    {
        return $this->container['updatedAtEnd'];
    }

    /**
     * Sets updatedAtEnd
     *
     * @param \DateTime|null $updatedAtEnd Stories should have been updated on or before this date.
     *
     * @return self
     */
    public function setUpdatedAtEnd($updatedAtEnd)
    {
        if (is_null($updatedAtEnd)) {
            throw new \InvalidArgumentException('non-nullable updatedAtEnd cannot be null');
        }
        $this->container['updatedAtEnd'] = $updatedAtEnd;

        return $this;
    }

    /**
     * Gets completedAtEnd
     *
     * @return \DateTime|null
     */
    public function getCompletedAtEnd()
    {
        return $this->container['completedAtEnd'];
    }

    /**
     * Sets completedAtEnd
     *
     * @param \DateTime|null $completedAtEnd Stories should have been completed on or before this date.
     *
     * @return self
     */
    public function setCompletedAtEnd($completedAtEnd)
    {
        if (is_null($completedAtEnd)) {
            throw new \InvalidArgumentException('non-nullable completedAtEnd cannot be null');
        }
        $this->container['completedAtEnd'] = $completedAtEnd;

        return $this;
    }

    /**
     * Gets workflowStateTypes
     *
     * @return string[]|null
     */
    public function getWorkflowStateTypes()
    {
        return $this->container['workflowStateTypes'];
    }

    /**
     * Sets workflowStateTypes
     *
     * @param string[]|null $workflowStateTypes The type of Workflow State the Stories may be in.
     *
     * @return self
     */
    public function setWorkflowStateTypes($workflowStateTypes)
    {
        if (is_null($workflowStateTypes)) {
            throw new \InvalidArgumentException('non-nullable workflowStateTypes cannot be null');
        }
        $allowedValues = $this->getWorkflowStateTypesAllowableValues();
        if (array_diff($workflowStateTypes, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'workflowStateTypes', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['workflowStateTypes'] = $workflowStateTypes;

        return $this;
    }

    /**
     * Gets deadlineEnd
     *
     * @return \DateTime|null
     */
    public function getDeadlineEnd()
    {
        return $this->container['deadlineEnd'];
    }

    /**
     * Sets deadlineEnd
     *
     * @param \DateTime|null $deadlineEnd Stories should have a deadline on or before this date.
     *
     * @return self
     */
    public function setDeadlineEnd($deadlineEnd)
    {
        if (is_null($deadlineEnd)) {
            throw new \InvalidArgumentException('non-nullable deadlineEnd cannot be null');
        }
        $this->container['deadlineEnd'] = $deadlineEnd;

        return $this;
    }

    /**
     * Gets createdAtStart
     *
     * @return \DateTime|null
     */
    public function getCreatedAtStart()
    {
        return $this->container['createdAtStart'];
    }

    /**
     * Sets createdAtStart
     *
     * @param \DateTime|null $createdAtStart Stories should have been created on or after this date.
     *
     * @return self
     */
    public function setCreatedAtStart($createdAtStart)
    {
        if (is_null($createdAtStart)) {
            throw new \InvalidArgumentException('non-nullable createdAtStart cannot be null');
        }
        $this->container['createdAtStart'] = $createdAtStart;

        return $this;
    }

    /**
     * Gets epicId
     *
     * @return int|null
     */
    public function getEpicId()
    {
        return $this->container['epicId'];
    }

    /**
     * Sets epicId
     *
     * @param int|null $epicId The Epic IDs that may be associated with the Stories.
     *
     * @return self
     */
    public function setEpicId($epicId)
    {
        if (is_null($epicId)) {
            array_push($this->openAPINullablesSetToNull, 'epicId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('epicId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['epicId'] = $epicId;

        return $this;
    }

    /**
     * Gets labelName
     *
     * @return string|null
     */
    public function getLabelName()
    {
        return $this->container['labelName'];
    }

    /**
     * Sets labelName
     *
     * @param string|null $labelName The name of any associated Labels.
     *
     * @return self
     */
    public function setLabelName($labelName)
    {
        if (is_null($labelName)) {
            throw new \InvalidArgumentException('non-nullable labelName cannot be null');
        }

        if ((mb_strlen($labelName) < 1)) {
            throw new \InvalidArgumentException('invalid length for $labelName when calling SearchStories., must be bigger than or equal to 1.');
        }

        $this->container['labelName'] = $labelName;

        return $this;
    }

    /**
     * Gets requestedById
     *
     * @return string|null
     */
    public function getRequestedById()
    {
        return $this->container['requestedById'];
    }

    /**
     * Sets requestedById
     *
     * @param string|null $requestedById The UUID of any Users who may have requested the Stories.
     *
     * @return self
     */
    public function setRequestedById($requestedById)
    {
        if (is_null($requestedById)) {
            throw new \InvalidArgumentException('non-nullable requestedById cannot be null');
        }
        $this->container['requestedById'] = $requestedById;

        return $this;
    }

    /**
     * Gets iterationId
     *
     * @return int|null
     */
    public function getIterationId()
    {
        return $this->container['iterationId'];
    }

    /**
     * Sets iterationId
     *
     * @param int|null $iterationId The Iteration ID that may be associated with the Stories.
     *
     * @return self
     */
    public function setIterationId($iterationId)
    {
        if (is_null($iterationId)) {
            array_push($this->openAPINullablesSetToNull, 'iterationId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('iterationId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['iterationId'] = $iterationId;

        return $this;
    }

    /**
     * Gets labelIds
     *
     * @return int[]|null
     */
    public function getLabelIds()
    {
        return $this->container['labelIds'];
    }

    /**
     * Sets labelIds
     *
     * @param int[]|null $labelIds The Label IDs that may be associated with the Stories.
     *
     * @return self
     */
    public function setLabelIds($labelIds)
    {
        if (is_null($labelIds)) {
            throw new \InvalidArgumentException('non-nullable labelIds cannot be null');
        }


        $this->container['labelIds'] = $labelIds;

        return $this;
    }

    /**
     * Gets groupId
     *
     * @return string|null
     */
    public function getGroupId()
    {
        return $this->container['groupId'];
    }

    /**
     * Sets groupId
     *
     * @param string|null $groupId The Group ID that is associated with the Stories
     *
     * @return self
     */
    public function setGroupId($groupId)
    {
        if (is_null($groupId)) {
            array_push($this->openAPINullablesSetToNull, 'groupId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('groupId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['groupId'] = $groupId;

        return $this;
    }

    /**
     * Gets workflowStateId
     *
     * @return int|null
     */
    public function getWorkflowStateId()
    {
        return $this->container['workflowStateId'];
    }

    /**
     * Sets workflowStateId
     *
     * @param int|null $workflowStateId The unique IDs of the specific Workflow States that the Stories should be in.
     *
     * @return self
     */
    public function setWorkflowStateId($workflowStateId)
    {
        if (is_null($workflowStateId)) {
            throw new \InvalidArgumentException('non-nullable workflowStateId cannot be null');
        }
        $this->container['workflowStateId'] = $workflowStateId;

        return $this;
    }

    /**
     * Gets iterationIds
     *
     * @return int[]|null
     */
    public function getIterationIds()
    {
        return $this->container['iterationIds'];
    }

    /**
     * Sets iterationIds
     *
     * @param int[]|null $iterationIds The Iteration IDs that may be associated with the Stories.
     *
     * @return self
     */
    public function setIterationIds($iterationIds)
    {
        if (is_null($iterationIds)) {
            throw new \InvalidArgumentException('non-nullable iterationIds cannot be null');
        }


        $this->container['iterationIds'] = $iterationIds;

        return $this;
    }

    /**
     * Gets createdAtEnd
     *
     * @return \DateTime|null
     */
    public function getCreatedAtEnd()
    {
        return $this->container['createdAtEnd'];
    }

    /**
     * Sets createdAtEnd
     *
     * @param \DateTime|null $createdAtEnd Stories should have been created on or before this date.
     *
     * @return self
     */
    public function setCreatedAtEnd($createdAtEnd)
    {
        if (is_null($createdAtEnd)) {
            throw new \InvalidArgumentException('non-nullable createdAtEnd cannot be null');
        }
        $this->container['createdAtEnd'] = $createdAtEnd;

        return $this;
    }

    /**
     * Gets deadlineStart
     *
     * @return \DateTime|null
     */
    public function getDeadlineStart()
    {
        return $this->container['deadlineStart'];
    }

    /**
     * Sets deadlineStart
     *
     * @param \DateTime|null $deadlineStart Stories should have a deadline on or after this date.
     *
     * @return self
     */
    public function setDeadlineStart($deadlineStart)
    {
        if (is_null($deadlineStart)) {
            throw new \InvalidArgumentException('non-nullable deadlineStart cannot be null');
        }
        $this->container['deadlineStart'] = $deadlineStart;

        return $this;
    }

    /**
     * Gets groupIds
     *
     * @return string[]|null
     */
    public function getGroupIds()
    {
        return $this->container['groupIds'];
    }

    /**
     * Sets groupIds
     *
     * @param string[]|null $groupIds The Group IDs that are associated with the Stories
     *
     * @return self
     */
    public function setGroupIds($groupIds)
    {
        if (is_null($groupIds)) {
            throw new \InvalidArgumentException('non-nullable groupIds cannot be null');
        }


        $this->container['groupIds'] = $groupIds;

        return $this;
    }

    /**
     * Gets ownerIds
     *
     * @return string[]|null
     */
    public function getOwnerIds()
    {
        return $this->container['ownerIds'];
    }

    /**
     * Sets ownerIds
     *
     * @param string[]|null $ownerIds An array of UUIDs for any Users who may be Owners of the Stories.
     *
     * @return self
     */
    public function setOwnerIds($ownerIds)
    {
        if (is_null($ownerIds)) {
            throw new \InvalidArgumentException('non-nullable ownerIds cannot be null');
        }


        $this->container['ownerIds'] = $ownerIds;

        return $this;
    }

    /**
     * Gets externalId
     *
     * @return string|null
     */
    public function getExternalId()
    {
        return $this->container['externalId'];
    }

    /**
     * Sets externalId
     *
     * @param string|null $externalId An ID or URL that references an external resource. Useful during imports.
     *
     * @return self
     */
    public function setExternalId($externalId)
    {
        if (is_null($externalId)) {
            throw new \InvalidArgumentException('non-nullable externalId cannot be null');
        }
        if ((mb_strlen($externalId) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $externalId when calling SearchStories., must be smaller than or equal to 1024.');
        }

        $this->container['externalId'] = $externalId;

        return $this;
    }

    /**
     * Gets includesDescription
     *
     * @return bool|null
     */
    public function getIncludesDescription()
    {
        return $this->container['includesDescription'];
    }

    /**
     * Sets includesDescription
     *
     * @param bool|null $includesDescription Whether to include the story description in the response.
     *
     * @return self
     */
    public function setIncludesDescription($includesDescription)
    {
        if (is_null($includesDescription)) {
            throw new \InvalidArgumentException('non-nullable includesDescription cannot be null');
        }
        $this->container['includesDescription'] = $includesDescription;

        return $this;
    }

    /**
     * Gets estimate
     *
     * @return int|null
     */
    public function getEstimate()
    {
        return $this->container['estimate'];
    }

    /**
     * Sets estimate
     *
     * @param int|null $estimate The number of estimate points associate with the Stories.
     *
     * @return self
     */
    public function setEstimate($estimate)
    {
        if (is_null($estimate)) {
            throw new \InvalidArgumentException('non-nullable estimate cannot be null');
        }
        $this->container['estimate'] = $estimate;

        return $this;
    }

    /**
     * Gets projectId
     *
     * @return int|null
     */
    public function getProjectId()
    {
        return $this->container['projectId'];
    }

    /**
     * Sets projectId
     *
     * @param int|null $projectId The IDs for the Projects the Stories may be assigned to.
     *
     * @return self
     */
    public function setProjectId($projectId)
    {
        if (is_null($projectId)) {
            array_push($this->openAPINullablesSetToNull, 'projectId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('projectId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['projectId'] = $projectId;

        return $this;
    }

    /**
     * Gets completedAtStart
     *
     * @return \DateTime|null
     */
    public function getCompletedAtStart()
    {
        return $this->container['completedAtStart'];
    }

    /**
     * Sets completedAtStart
     *
     * @param \DateTime|null $completedAtStart Stories should have been completed on or after this date.
     *
     * @return self
     */
    public function setCompletedAtStart($completedAtStart)
    {
        if (is_null($completedAtStart)) {
            throw new \InvalidArgumentException('non-nullable completedAtStart cannot be null');
        }
        $this->container['completedAtStart'] = $completedAtStart;

        return $this;
    }

    /**
     * Gets updatedAtStart
     *
     * @return \DateTime|null
     */
    public function getUpdatedAtStart()
    {
        return $this->container['updatedAtStart'];
    }

    /**
     * Sets updatedAtStart
     *
     * @param \DateTime|null $updatedAtStart Stories should have been updated on or after this date.
     *
     * @return self
     */
    public function setUpdatedAtStart($updatedAtStart)
    {
        if (is_null($updatedAtStart)) {
            throw new \InvalidArgumentException('non-nullable updatedAtStart cannot be null');
        }
        $this->container['updatedAtStart'] = $updatedAtStart;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


