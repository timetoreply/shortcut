<?php
/**
 * LabelStats
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Timetoreply\Shortcut
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Shortcut API
 *
 * Shortcut API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Timetoreply\Shortcut\Model;

use \ArrayAccess;
use \Timetoreply\Shortcut\ObjectSerializer;

/**
 * LabelStats Class Doc Comment
 *
 * @category Class
 * @description A group of calculated values for this Label. This is not included if the slim? flag is set to true for the List Labels endpoint.
 * @package  Timetoreply\Shortcut
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class LabelStats implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'LabelStats';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'numRelatedDocuments' => 'int',
        'numEpics' => 'int',
        'numStoriesUnstarted' => 'int',
        'numStoriesTotal' => 'int',
        'numEpicsUnstarted' => 'int',
        'numEpicsInProgress' => 'int',
        'numPointsUnstarted' => 'int',
        'numStoriesUnestimated' => 'int',
        'numPointsInProgress' => 'int',
        'numEpicsTotal' => 'int',
        'numStoriesCompleted' => 'int',
        'numPointsCompleted' => 'int',
        'numStoriesBacklog' => 'int',
        'numPointsTotal' => 'int',
        'numStoriesInProgress' => 'int',
        'numPointsBacklog' => 'int',
        'numEpicsCompleted' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'numRelatedDocuments' => 'int64',
        'numEpics' => 'int64',
        'numStoriesUnstarted' => 'int64',
        'numStoriesTotal' => 'int64',
        'numEpicsUnstarted' => 'int64',
        'numEpicsInProgress' => 'int64',
        'numPointsUnstarted' => 'int64',
        'numStoriesUnestimated' => 'int64',
        'numPointsInProgress' => 'int64',
        'numEpicsTotal' => 'int64',
        'numStoriesCompleted' => 'int64',
        'numPointsCompleted' => 'int64',
        'numStoriesBacklog' => 'int64',
        'numPointsTotal' => 'int64',
        'numStoriesInProgress' => 'int64',
        'numPointsBacklog' => 'int64',
        'numEpicsCompleted' => 'int64'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'numRelatedDocuments' => false,
        'numEpics' => false,
        'numStoriesUnstarted' => false,
        'numStoriesTotal' => false,
        'numEpicsUnstarted' => false,
        'numEpicsInProgress' => false,
        'numPointsUnstarted' => false,
        'numStoriesUnestimated' => false,
        'numPointsInProgress' => false,
        'numEpicsTotal' => false,
        'numStoriesCompleted' => false,
        'numPointsCompleted' => false,
        'numStoriesBacklog' => false,
        'numPointsTotal' => false,
        'numStoriesInProgress' => false,
        'numPointsBacklog' => false,
        'numEpicsCompleted' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'numRelatedDocuments' => 'num_related_documents',
        'numEpics' => 'num_epics',
        'numStoriesUnstarted' => 'num_stories_unstarted',
        'numStoriesTotal' => 'num_stories_total',
        'numEpicsUnstarted' => 'num_epics_unstarted',
        'numEpicsInProgress' => 'num_epics_in_progress',
        'numPointsUnstarted' => 'num_points_unstarted',
        'numStoriesUnestimated' => 'num_stories_unestimated',
        'numPointsInProgress' => 'num_points_in_progress',
        'numEpicsTotal' => 'num_epics_total',
        'numStoriesCompleted' => 'num_stories_completed',
        'numPointsCompleted' => 'num_points_completed',
        'numStoriesBacklog' => 'num_stories_backlog',
        'numPointsTotal' => 'num_points_total',
        'numStoriesInProgress' => 'num_stories_in_progress',
        'numPointsBacklog' => 'num_points_backlog',
        'numEpicsCompleted' => 'num_epics_completed'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'numRelatedDocuments' => 'setNumRelatedDocuments',
        'numEpics' => 'setNumEpics',
        'numStoriesUnstarted' => 'setNumStoriesUnstarted',
        'numStoriesTotal' => 'setNumStoriesTotal',
        'numEpicsUnstarted' => 'setNumEpicsUnstarted',
        'numEpicsInProgress' => 'setNumEpicsInProgress',
        'numPointsUnstarted' => 'setNumPointsUnstarted',
        'numStoriesUnestimated' => 'setNumStoriesUnestimated',
        'numPointsInProgress' => 'setNumPointsInProgress',
        'numEpicsTotal' => 'setNumEpicsTotal',
        'numStoriesCompleted' => 'setNumStoriesCompleted',
        'numPointsCompleted' => 'setNumPointsCompleted',
        'numStoriesBacklog' => 'setNumStoriesBacklog',
        'numPointsTotal' => 'setNumPointsTotal',
        'numStoriesInProgress' => 'setNumStoriesInProgress',
        'numPointsBacklog' => 'setNumPointsBacklog',
        'numEpicsCompleted' => 'setNumEpicsCompleted'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'numRelatedDocuments' => 'getNumRelatedDocuments',
        'numEpics' => 'getNumEpics',
        'numStoriesUnstarted' => 'getNumStoriesUnstarted',
        'numStoriesTotal' => 'getNumStoriesTotal',
        'numEpicsUnstarted' => 'getNumEpicsUnstarted',
        'numEpicsInProgress' => 'getNumEpicsInProgress',
        'numPointsUnstarted' => 'getNumPointsUnstarted',
        'numStoriesUnestimated' => 'getNumStoriesUnestimated',
        'numPointsInProgress' => 'getNumPointsInProgress',
        'numEpicsTotal' => 'getNumEpicsTotal',
        'numStoriesCompleted' => 'getNumStoriesCompleted',
        'numPointsCompleted' => 'getNumPointsCompleted',
        'numStoriesBacklog' => 'getNumStoriesBacklog',
        'numPointsTotal' => 'getNumPointsTotal',
        'numStoriesInProgress' => 'getNumStoriesInProgress',
        'numPointsBacklog' => 'getNumPointsBacklog',
        'numEpicsCompleted' => 'getNumEpicsCompleted'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('numRelatedDocuments', $data ?? [], null);
        $this->setIfExists('numEpics', $data ?? [], null);
        $this->setIfExists('numStoriesUnstarted', $data ?? [], null);
        $this->setIfExists('numStoriesTotal', $data ?? [], null);
        $this->setIfExists('numEpicsUnstarted', $data ?? [], null);
        $this->setIfExists('numEpicsInProgress', $data ?? [], null);
        $this->setIfExists('numPointsUnstarted', $data ?? [], null);
        $this->setIfExists('numStoriesUnestimated', $data ?? [], null);
        $this->setIfExists('numPointsInProgress', $data ?? [], null);
        $this->setIfExists('numEpicsTotal', $data ?? [], null);
        $this->setIfExists('numStoriesCompleted', $data ?? [], null);
        $this->setIfExists('numPointsCompleted', $data ?? [], null);
        $this->setIfExists('numStoriesBacklog', $data ?? [], null);
        $this->setIfExists('numPointsTotal', $data ?? [], null);
        $this->setIfExists('numStoriesInProgress', $data ?? [], null);
        $this->setIfExists('numPointsBacklog', $data ?? [], null);
        $this->setIfExists('numEpicsCompleted', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['numRelatedDocuments'] === null) {
            $invalidProperties[] = "'numRelatedDocuments' can't be null";
        }
        if ($this->container['numEpics'] === null) {
            $invalidProperties[] = "'numEpics' can't be null";
        }
        if ($this->container['numStoriesUnstarted'] === null) {
            $invalidProperties[] = "'numStoriesUnstarted' can't be null";
        }
        if ($this->container['numStoriesTotal'] === null) {
            $invalidProperties[] = "'numStoriesTotal' can't be null";
        }
        if ($this->container['numEpicsUnstarted'] === null) {
            $invalidProperties[] = "'numEpicsUnstarted' can't be null";
        }
        if ($this->container['numEpicsInProgress'] === null) {
            $invalidProperties[] = "'numEpicsInProgress' can't be null";
        }
        if ($this->container['numPointsUnstarted'] === null) {
            $invalidProperties[] = "'numPointsUnstarted' can't be null";
        }
        if ($this->container['numStoriesUnestimated'] === null) {
            $invalidProperties[] = "'numStoriesUnestimated' can't be null";
        }
        if ($this->container['numPointsInProgress'] === null) {
            $invalidProperties[] = "'numPointsInProgress' can't be null";
        }
        if ($this->container['numEpicsTotal'] === null) {
            $invalidProperties[] = "'numEpicsTotal' can't be null";
        }
        if ($this->container['numStoriesCompleted'] === null) {
            $invalidProperties[] = "'numStoriesCompleted' can't be null";
        }
        if ($this->container['numPointsCompleted'] === null) {
            $invalidProperties[] = "'numPointsCompleted' can't be null";
        }
        if ($this->container['numStoriesBacklog'] === null) {
            $invalidProperties[] = "'numStoriesBacklog' can't be null";
        }
        if ($this->container['numPointsTotal'] === null) {
            $invalidProperties[] = "'numPointsTotal' can't be null";
        }
        if ($this->container['numStoriesInProgress'] === null) {
            $invalidProperties[] = "'numStoriesInProgress' can't be null";
        }
        if ($this->container['numPointsBacklog'] === null) {
            $invalidProperties[] = "'numPointsBacklog' can't be null";
        }
        if ($this->container['numEpicsCompleted'] === null) {
            $invalidProperties[] = "'numEpicsCompleted' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets numRelatedDocuments
     *
     * @return int
     */
    public function getNumRelatedDocuments()
    {
        return $this->container['numRelatedDocuments'];
    }

    /**
     * Sets numRelatedDocuments
     *
     * @param int $numRelatedDocuments The total number of Documents associated this Label.
     *
     * @return self
     */
    public function setNumRelatedDocuments($numRelatedDocuments)
    {
        if (is_null($numRelatedDocuments)) {
            throw new \InvalidArgumentException('non-nullable numRelatedDocuments cannot be null');
        }
        $this->container['numRelatedDocuments'] = $numRelatedDocuments;

        return $this;
    }

    /**
     * Gets numEpics
     *
     * @return int
     */
    public function getNumEpics()
    {
        return $this->container['numEpics'];
    }

    /**
     * Sets numEpics
     *
     * @param int $numEpics The total number of Epics with this Label.
     *
     * @return self
     */
    public function setNumEpics($numEpics)
    {
        if (is_null($numEpics)) {
            throw new \InvalidArgumentException('non-nullable numEpics cannot be null');
        }
        $this->container['numEpics'] = $numEpics;

        return $this;
    }

    /**
     * Gets numStoriesUnstarted
     *
     * @return int
     */
    public function getNumStoriesUnstarted()
    {
        return $this->container['numStoriesUnstarted'];
    }

    /**
     * Sets numStoriesUnstarted
     *
     * @param int $numStoriesUnstarted The total number of stories unstarted Stories with this Label.
     *
     * @return self
     */
    public function setNumStoriesUnstarted($numStoriesUnstarted)
    {
        if (is_null($numStoriesUnstarted)) {
            throw new \InvalidArgumentException('non-nullable numStoriesUnstarted cannot be null');
        }
        $this->container['numStoriesUnstarted'] = $numStoriesUnstarted;

        return $this;
    }

    /**
     * Gets numStoriesTotal
     *
     * @return int
     */
    public function getNumStoriesTotal()
    {
        return $this->container['numStoriesTotal'];
    }

    /**
     * Sets numStoriesTotal
     *
     * @param int $numStoriesTotal The total number of Stories with this Label.
     *
     * @return self
     */
    public function setNumStoriesTotal($numStoriesTotal)
    {
        if (is_null($numStoriesTotal)) {
            throw new \InvalidArgumentException('non-nullable numStoriesTotal cannot be null');
        }
        $this->container['numStoriesTotal'] = $numStoriesTotal;

        return $this;
    }

    /**
     * Gets numEpicsUnstarted
     *
     * @return int
     */
    public function getNumEpicsUnstarted()
    {
        return $this->container['numEpicsUnstarted'];
    }

    /**
     * Sets numEpicsUnstarted
     *
     * @param int $numEpicsUnstarted The number of unstarted epics associated with this label.
     *
     * @return self
     */
    public function setNumEpicsUnstarted($numEpicsUnstarted)
    {
        if (is_null($numEpicsUnstarted)) {
            throw new \InvalidArgumentException('non-nullable numEpicsUnstarted cannot be null');
        }
        $this->container['numEpicsUnstarted'] = $numEpicsUnstarted;

        return $this;
    }

    /**
     * Gets numEpicsInProgress
     *
     * @return int
     */
    public function getNumEpicsInProgress()
    {
        return $this->container['numEpicsInProgress'];
    }

    /**
     * Sets numEpicsInProgress
     *
     * @param int $numEpicsInProgress The number of in progress epics associated with this label.
     *
     * @return self
     */
    public function setNumEpicsInProgress($numEpicsInProgress)
    {
        if (is_null($numEpicsInProgress)) {
            throw new \InvalidArgumentException('non-nullable numEpicsInProgress cannot be null');
        }
        $this->container['numEpicsInProgress'] = $numEpicsInProgress;

        return $this;
    }

    /**
     * Gets numPointsUnstarted
     *
     * @return int
     */
    public function getNumPointsUnstarted()
    {
        return $this->container['numPointsUnstarted'];
    }

    /**
     * Sets numPointsUnstarted
     *
     * @param int $numPointsUnstarted The total number of unstarted points with this Label.
     *
     * @return self
     */
    public function setNumPointsUnstarted($numPointsUnstarted)
    {
        if (is_null($numPointsUnstarted)) {
            throw new \InvalidArgumentException('non-nullable numPointsUnstarted cannot be null');
        }
        $this->container['numPointsUnstarted'] = $numPointsUnstarted;

        return $this;
    }

    /**
     * Gets numStoriesUnestimated
     *
     * @return int
     */
    public function getNumStoriesUnestimated()
    {
        return $this->container['numStoriesUnestimated'];
    }

    /**
     * Sets numStoriesUnestimated
     *
     * @param int $numStoriesUnestimated The total number of Stories with no point estimate with this Label.
     *
     * @return self
     */
    public function setNumStoriesUnestimated($numStoriesUnestimated)
    {
        if (is_null($numStoriesUnestimated)) {
            throw new \InvalidArgumentException('non-nullable numStoriesUnestimated cannot be null');
        }
        $this->container['numStoriesUnestimated'] = $numStoriesUnestimated;

        return $this;
    }

    /**
     * Gets numPointsInProgress
     *
     * @return int
     */
    public function getNumPointsInProgress()
    {
        return $this->container['numPointsInProgress'];
    }

    /**
     * Sets numPointsInProgress
     *
     * @param int $numPointsInProgress The total number of in-progress points with this Label.
     *
     * @return self
     */
    public function setNumPointsInProgress($numPointsInProgress)
    {
        if (is_null($numPointsInProgress)) {
            throw new \InvalidArgumentException('non-nullable numPointsInProgress cannot be null');
        }
        $this->container['numPointsInProgress'] = $numPointsInProgress;

        return $this;
    }

    /**
     * Gets numEpicsTotal
     *
     * @return int
     */
    public function getNumEpicsTotal()
    {
        return $this->container['numEpicsTotal'];
    }

    /**
     * Sets numEpicsTotal
     *
     * @param int $numEpicsTotal The total number of Epics associated with this Label.
     *
     * @return self
     */
    public function setNumEpicsTotal($numEpicsTotal)
    {
        if (is_null($numEpicsTotal)) {
            throw new \InvalidArgumentException('non-nullable numEpicsTotal cannot be null');
        }
        $this->container['numEpicsTotal'] = $numEpicsTotal;

        return $this;
    }

    /**
     * Gets numStoriesCompleted
     *
     * @return int
     */
    public function getNumStoriesCompleted()
    {
        return $this->container['numStoriesCompleted'];
    }

    /**
     * Sets numStoriesCompleted
     *
     * @param int $numStoriesCompleted The total number of completed Stories with this Label.
     *
     * @return self
     */
    public function setNumStoriesCompleted($numStoriesCompleted)
    {
        if (is_null($numStoriesCompleted)) {
            throw new \InvalidArgumentException('non-nullable numStoriesCompleted cannot be null');
        }
        $this->container['numStoriesCompleted'] = $numStoriesCompleted;

        return $this;
    }

    /**
     * Gets numPointsCompleted
     *
     * @return int
     */
    public function getNumPointsCompleted()
    {
        return $this->container['numPointsCompleted'];
    }

    /**
     * Sets numPointsCompleted
     *
     * @param int $numPointsCompleted The total number of completed points with this Label.
     *
     * @return self
     */
    public function setNumPointsCompleted($numPointsCompleted)
    {
        if (is_null($numPointsCompleted)) {
            throw new \InvalidArgumentException('non-nullable numPointsCompleted cannot be null');
        }
        $this->container['numPointsCompleted'] = $numPointsCompleted;

        return $this;
    }

    /**
     * Gets numStoriesBacklog
     *
     * @return int
     */
    public function getNumStoriesBacklog()
    {
        return $this->container['numStoriesBacklog'];
    }

    /**
     * Sets numStoriesBacklog
     *
     * @param int $numStoriesBacklog The total number of stories backlog Stories with this Label.
     *
     * @return self
     */
    public function setNumStoriesBacklog($numStoriesBacklog)
    {
        if (is_null($numStoriesBacklog)) {
            throw new \InvalidArgumentException('non-nullable numStoriesBacklog cannot be null');
        }
        $this->container['numStoriesBacklog'] = $numStoriesBacklog;

        return $this;
    }

    /**
     * Gets numPointsTotal
     *
     * @return int
     */
    public function getNumPointsTotal()
    {
        return $this->container['numPointsTotal'];
    }

    /**
     * Sets numPointsTotal
     *
     * @param int $numPointsTotal The total number of points with this Label.
     *
     * @return self
     */
    public function setNumPointsTotal($numPointsTotal)
    {
        if (is_null($numPointsTotal)) {
            throw new \InvalidArgumentException('non-nullable numPointsTotal cannot be null');
        }
        $this->container['numPointsTotal'] = $numPointsTotal;

        return $this;
    }

    /**
     * Gets numStoriesInProgress
     *
     * @return int
     */
    public function getNumStoriesInProgress()
    {
        return $this->container['numStoriesInProgress'];
    }

    /**
     * Sets numStoriesInProgress
     *
     * @param int $numStoriesInProgress The total number of in-progress Stories with this Label.
     *
     * @return self
     */
    public function setNumStoriesInProgress($numStoriesInProgress)
    {
        if (is_null($numStoriesInProgress)) {
            throw new \InvalidArgumentException('non-nullable numStoriesInProgress cannot be null');
        }
        $this->container['numStoriesInProgress'] = $numStoriesInProgress;

        return $this;
    }

    /**
     * Gets numPointsBacklog
     *
     * @return int
     */
    public function getNumPointsBacklog()
    {
        return $this->container['numPointsBacklog'];
    }

    /**
     * Sets numPointsBacklog
     *
     * @param int $numPointsBacklog The total number of backlog points with this Label.
     *
     * @return self
     */
    public function setNumPointsBacklog($numPointsBacklog)
    {
        if (is_null($numPointsBacklog)) {
            throw new \InvalidArgumentException('non-nullable numPointsBacklog cannot be null');
        }
        $this->container['numPointsBacklog'] = $numPointsBacklog;

        return $this;
    }

    /**
     * Gets numEpicsCompleted
     *
     * @return int
     */
    public function getNumEpicsCompleted()
    {
        return $this->container['numEpicsCompleted'];
    }

    /**
     * Sets numEpicsCompleted
     *
     * @param int $numEpicsCompleted The number of completed Epics associated with this Label.
     *
     * @return self
     */
    public function setNumEpicsCompleted($numEpicsCompleted)
    {
        if (is_null($numEpicsCompleted)) {
            throw new \InvalidArgumentException('non-nullable numEpicsCompleted cannot be null');
        }
        $this->container['numEpicsCompleted'] = $numEpicsCompleted;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


