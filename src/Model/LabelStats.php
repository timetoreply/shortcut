<?php
/**
 * LabelStats
 *
 * PHP version 5
 *
 * @category Class
 * @package  Timetoreply\Shortcut
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Shortcut API
 *
 * Shortcut API
 *
 * OpenAPI spec version: 3.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.43-SNAPSHOT
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Timetoreply\Shortcut\Model;

use ArrayAccess;
use ReturnTypeWillChange;
use Timetoreply\Shortcut\ObjectSerializer;

/**
 * LabelStats Class Doc Comment
 *
 * @category Class
 * @description A group of calculated values for this Label. This is not included if the slim? flag is set to true for the List Labels endpoint.
 * @package  Timetoreply\Shortcut
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LabelStats implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'LabelStats';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'numRelatedDocuments' => 'int',
        'numEpics' => 'int',
        'numStoriesUnstarted' => 'int',
        'numStoriesTotal' => 'int',
        'numEpicsUnstarted' => 'int',
        'numEpicsInProgress' => 'int',
        'numPointsUnstarted' => 'int',
        'numStoriesUnestimated' => 'int',
        'numPointsInProgress' => 'int',
        'numEpicsTotal' => 'int',
        'numStoriesCompleted' => 'int',
        'numPointsCompleted' => 'int',
        'numStoriesBacklog' => 'int',
        'numPointsTotal' => 'int',
        'numStoriesInProgress' => 'int',
        'numPointsBacklog' => 'int',
        'numEpicsCompleted' => 'int'];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'numRelatedDocuments' => 'int64',
        'numEpics' => 'int64',
        'numStoriesUnstarted' => 'int64',
        'numStoriesTotal' => 'int64',
        'numEpicsUnstarted' => 'int64',
        'numEpicsInProgress' => 'int64',
        'numPointsUnstarted' => 'int64',
        'numStoriesUnestimated' => 'int64',
        'numPointsInProgress' => 'int64',
        'numEpicsTotal' => 'int64',
        'numStoriesCompleted' => 'int64',
        'numPointsCompleted' => 'int64',
        'numStoriesBacklog' => 'int64',
        'numPointsTotal' => 'int64',
        'numStoriesInProgress' => 'int64',
        'numPointsBacklog' => 'int64',
        'numEpicsCompleted' => 'int64'];
    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'numRelatedDocuments' => 'num_related_documents',
        'numEpics' => 'num_epics',
        'numStoriesUnstarted' => 'num_stories_unstarted',
        'numStoriesTotal' => 'num_stories_total',
        'numEpicsUnstarted' => 'num_epics_unstarted',
        'numEpicsInProgress' => 'num_epics_in_progress',
        'numPointsUnstarted' => 'num_points_unstarted',
        'numStoriesUnestimated' => 'num_stories_unestimated',
        'numPointsInProgress' => 'num_points_in_progress',
        'numEpicsTotal' => 'num_epics_total',
        'numStoriesCompleted' => 'num_stories_completed',
        'numPointsCompleted' => 'num_points_completed',
        'numStoriesBacklog' => 'num_stories_backlog',
        'numPointsTotal' => 'num_points_total',
        'numStoriesInProgress' => 'num_stories_in_progress',
        'numPointsBacklog' => 'num_points_backlog',
        'numEpicsCompleted' => 'num_epics_completed'];
    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'numRelatedDocuments' => 'setNumRelatedDocuments',
        'numEpics' => 'setNumEpics',
        'numStoriesUnstarted' => 'setNumStoriesUnstarted',
        'numStoriesTotal' => 'setNumStoriesTotal',
        'numEpicsUnstarted' => 'setNumEpicsUnstarted',
        'numEpicsInProgress' => 'setNumEpicsInProgress',
        'numPointsUnstarted' => 'setNumPointsUnstarted',
        'numStoriesUnestimated' => 'setNumStoriesUnestimated',
        'numPointsInProgress' => 'setNumPointsInProgress',
        'numEpicsTotal' => 'setNumEpicsTotal',
        'numStoriesCompleted' => 'setNumStoriesCompleted',
        'numPointsCompleted' => 'setNumPointsCompleted',
        'numStoriesBacklog' => 'setNumStoriesBacklog',
        'numPointsTotal' => 'setNumPointsTotal',
        'numStoriesInProgress' => 'setNumStoriesInProgress',
        'numPointsBacklog' => 'setNumPointsBacklog',
        'numEpicsCompleted' => 'setNumEpicsCompleted'];
    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'numRelatedDocuments' => 'getNumRelatedDocuments',
        'numEpics' => 'getNumEpics',
        'numStoriesUnstarted' => 'getNumStoriesUnstarted',
        'numStoriesTotal' => 'getNumStoriesTotal',
        'numEpicsUnstarted' => 'getNumEpicsUnstarted',
        'numEpicsInProgress' => 'getNumEpicsInProgress',
        'numPointsUnstarted' => 'getNumPointsUnstarted',
        'numStoriesUnestimated' => 'getNumStoriesUnestimated',
        'numPointsInProgress' => 'getNumPointsInProgress',
        'numEpicsTotal' => 'getNumEpicsTotal',
        'numStoriesCompleted' => 'getNumStoriesCompleted',
        'numPointsCompleted' => 'getNumPointsCompleted',
        'numStoriesBacklog' => 'getNumStoriesBacklog',
        'numPointsTotal' => 'getNumPointsTotal',
        'numStoriesInProgress' => 'getNumStoriesInProgress',
        'numPointsBacklog' => 'getNumPointsBacklog',
        'numEpicsCompleted' => 'getNumEpicsCompleted'];
    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['numRelatedDocuments'] = isset($data['numRelatedDocuments']) ? $data['numRelatedDocuments'] : null;
        $this->container['numEpics'] = isset($data['numEpics']) ? $data['numEpics'] : null;
        $this->container['numStoriesUnstarted'] = isset($data['numStoriesUnstarted']) ? $data['numStoriesUnstarted'] : null;
        $this->container['numStoriesTotal'] = isset($data['numStoriesTotal']) ? $data['numStoriesTotal'] : null;
        $this->container['numEpicsUnstarted'] = isset($data['numEpicsUnstarted']) ? $data['numEpicsUnstarted'] : null;
        $this->container['numEpicsInProgress'] = isset($data['numEpicsInProgress']) ? $data['numEpicsInProgress'] : null;
        $this->container['numPointsUnstarted'] = isset($data['numPointsUnstarted']) ? $data['numPointsUnstarted'] : null;
        $this->container['numStoriesUnestimated'] = isset($data['numStoriesUnestimated']) ? $data['numStoriesUnestimated'] : null;
        $this->container['numPointsInProgress'] = isset($data['numPointsInProgress']) ? $data['numPointsInProgress'] : null;
        $this->container['numEpicsTotal'] = isset($data['numEpicsTotal']) ? $data['numEpicsTotal'] : null;
        $this->container['numStoriesCompleted'] = isset($data['numStoriesCompleted']) ? $data['numStoriesCompleted'] : null;
        $this->container['numPointsCompleted'] = isset($data['numPointsCompleted']) ? $data['numPointsCompleted'] : null;
        $this->container['numStoriesBacklog'] = isset($data['numStoriesBacklog']) ? $data['numStoriesBacklog'] : null;
        $this->container['numPointsTotal'] = isset($data['numPointsTotal']) ? $data['numPointsTotal'] : null;
        $this->container['numStoriesInProgress'] = isset($data['numStoriesInProgress']) ? $data['numStoriesInProgress'] : null;
        $this->container['numPointsBacklog'] = isset($data['numPointsBacklog']) ? $data['numPointsBacklog'] : null;
        $this->container['numEpicsCompleted'] = isset($data['numEpicsCompleted']) ? $data['numEpicsCompleted'] : null;
    }

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['numRelatedDocuments'] === null) {
            $invalidProperties[] = "'numRelatedDocuments' can't be null";
        }
        if ($this->container['numEpics'] === null) {
            $invalidProperties[] = "'numEpics' can't be null";
        }
        if ($this->container['numStoriesUnstarted'] === null) {
            $invalidProperties[] = "'numStoriesUnstarted' can't be null";
        }
        if ($this->container['numStoriesTotal'] === null) {
            $invalidProperties[] = "'numStoriesTotal' can't be null";
        }
        if ($this->container['numEpicsUnstarted'] === null) {
            $invalidProperties[] = "'numEpicsUnstarted' can't be null";
        }
        if ($this->container['numEpicsInProgress'] === null) {
            $invalidProperties[] = "'numEpicsInProgress' can't be null";
        }
        if ($this->container['numPointsUnstarted'] === null) {
            $invalidProperties[] = "'numPointsUnstarted' can't be null";
        }
        if ($this->container['numStoriesUnestimated'] === null) {
            $invalidProperties[] = "'numStoriesUnestimated' can't be null";
        }
        if ($this->container['numPointsInProgress'] === null) {
            $invalidProperties[] = "'numPointsInProgress' can't be null";
        }
        if ($this->container['numEpicsTotal'] === null) {
            $invalidProperties[] = "'numEpicsTotal' can't be null";
        }
        if ($this->container['numStoriesCompleted'] === null) {
            $invalidProperties[] = "'numStoriesCompleted' can't be null";
        }
        if ($this->container['numPointsCompleted'] === null) {
            $invalidProperties[] = "'numPointsCompleted' can't be null";
        }
        if ($this->container['numStoriesBacklog'] === null) {
            $invalidProperties[] = "'numStoriesBacklog' can't be null";
        }
        if ($this->container['numPointsTotal'] === null) {
            $invalidProperties[] = "'numPointsTotal' can't be null";
        }
        if ($this->container['numStoriesInProgress'] === null) {
            $invalidProperties[] = "'numStoriesInProgress' can't be null";
        }
        if ($this->container['numPointsBacklog'] === null) {
            $invalidProperties[] = "'numPointsBacklog' can't be null";
        }
        if ($this->container['numEpicsCompleted'] === null) {
            $invalidProperties[] = "'numEpicsCompleted' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Gets numRelatedDocuments
     *
     * @return int
     */
    public function getNumRelatedDocuments()
    {
        return $this->container['numRelatedDocuments'];
    }

    /**
     * Sets numRelatedDocuments
     *
     * @param int $numRelatedDocuments The total number of Documents associated this Label.
     *
     * @return $this
     */
    public function setNumRelatedDocuments($numRelatedDocuments)
    {
        $this->container['numRelatedDocuments'] = $numRelatedDocuments;

        return $this;
    }

    /**
     * Gets numEpics
     *
     * @return int
     */
    public function getNumEpics()
    {
        return $this->container['numEpics'];
    }

    /**
     * Sets numEpics
     *
     * @param int $numEpics The total number of Epics with this Label.
     *
     * @return $this
     */
    public function setNumEpics($numEpics)
    {
        $this->container['numEpics'] = $numEpics;

        return $this;
    }

    /**
     * Gets numStoriesUnstarted
     *
     * @return int
     */
    public function getNumStoriesUnstarted()
    {
        return $this->container['numStoriesUnstarted'];
    }

    /**
     * Sets numStoriesUnstarted
     *
     * @param int $numStoriesUnstarted The total number of stories unstarted Stories with this Label.
     *
     * @return $this
     */
    public function setNumStoriesUnstarted($numStoriesUnstarted)
    {
        $this->container['numStoriesUnstarted'] = $numStoriesUnstarted;

        return $this;
    }

    /**
     * Gets numStoriesTotal
     *
     * @return int
     */
    public function getNumStoriesTotal()
    {
        return $this->container['numStoriesTotal'];
    }

    /**
     * Sets numStoriesTotal
     *
     * @param int $numStoriesTotal The total number of Stories with this Label.
     *
     * @return $this
     */
    public function setNumStoriesTotal($numStoriesTotal)
    {
        $this->container['numStoriesTotal'] = $numStoriesTotal;

        return $this;
    }

    /**
     * Gets numEpicsUnstarted
     *
     * @return int
     */
    public function getNumEpicsUnstarted()
    {
        return $this->container['numEpicsUnstarted'];
    }

    /**
     * Sets numEpicsUnstarted
     *
     * @param int $numEpicsUnstarted The number of unstarted epics associated with this label.
     *
     * @return $this
     */
    public function setNumEpicsUnstarted($numEpicsUnstarted)
    {
        $this->container['numEpicsUnstarted'] = $numEpicsUnstarted;

        return $this;
    }

    /**
     * Gets numEpicsInProgress
     *
     * @return int
     */
    public function getNumEpicsInProgress()
    {
        return $this->container['numEpicsInProgress'];
    }

    /**
     * Sets numEpicsInProgress
     *
     * @param int $numEpicsInProgress The number of in progress epics associated with this label.
     *
     * @return $this
     */
    public function setNumEpicsInProgress($numEpicsInProgress)
    {
        $this->container['numEpicsInProgress'] = $numEpicsInProgress;

        return $this;
    }

    /**
     * Gets numPointsUnstarted
     *
     * @return int
     */
    public function getNumPointsUnstarted()
    {
        return $this->container['numPointsUnstarted'];
    }

    /**
     * Sets numPointsUnstarted
     *
     * @param int $numPointsUnstarted The total number of unstarted points with this Label.
     *
     * @return $this
     */
    public function setNumPointsUnstarted($numPointsUnstarted)
    {
        $this->container['numPointsUnstarted'] = $numPointsUnstarted;

        return $this;
    }

    /**
     * Gets numStoriesUnestimated
     *
     * @return int
     */
    public function getNumStoriesUnestimated()
    {
        return $this->container['numStoriesUnestimated'];
    }

    /**
     * Sets numStoriesUnestimated
     *
     * @param int $numStoriesUnestimated The total number of Stories with no point estimate with this Label.
     *
     * @return $this
     */
    public function setNumStoriesUnestimated($numStoriesUnestimated)
    {
        $this->container['numStoriesUnestimated'] = $numStoriesUnestimated;

        return $this;
    }

    /**
     * Gets numPointsInProgress
     *
     * @return int
     */
    public function getNumPointsInProgress()
    {
        return $this->container['numPointsInProgress'];
    }

    /**
     * Sets numPointsInProgress
     *
     * @param int $numPointsInProgress The total number of in-progress points with this Label.
     *
     * @return $this
     */
    public function setNumPointsInProgress($numPointsInProgress)
    {
        $this->container['numPointsInProgress'] = $numPointsInProgress;

        return $this;
    }

    /**
     * Gets numEpicsTotal
     *
     * @return int
     */
    public function getNumEpicsTotal()
    {
        return $this->container['numEpicsTotal'];
    }

    /**
     * Sets numEpicsTotal
     *
     * @param int $numEpicsTotal The total number of Epics associated with this Label.
     *
     * @return $this
     */
    public function setNumEpicsTotal($numEpicsTotal)
    {
        $this->container['numEpicsTotal'] = $numEpicsTotal;

        return $this;
    }

    /**
     * Gets numStoriesCompleted
     *
     * @return int
     */
    public function getNumStoriesCompleted()
    {
        return $this->container['numStoriesCompleted'];
    }

    /**
     * Sets numStoriesCompleted
     *
     * @param int $numStoriesCompleted The total number of completed Stories with this Label.
     *
     * @return $this
     */
    public function setNumStoriesCompleted($numStoriesCompleted)
    {
        $this->container['numStoriesCompleted'] = $numStoriesCompleted;

        return $this;
    }

    /**
     * Gets numPointsCompleted
     *
     * @return int
     */
    public function getNumPointsCompleted()
    {
        return $this->container['numPointsCompleted'];
    }

    /**
     * Sets numPointsCompleted
     *
     * @param int $numPointsCompleted The total number of completed points with this Label.
     *
     * @return $this
     */
    public function setNumPointsCompleted($numPointsCompleted)
    {
        $this->container['numPointsCompleted'] = $numPointsCompleted;

        return $this;
    }

    /**
     * Gets numStoriesBacklog
     *
     * @return int
     */
    public function getNumStoriesBacklog()
    {
        return $this->container['numStoriesBacklog'];
    }

    /**
     * Sets numStoriesBacklog
     *
     * @param int $numStoriesBacklog The total number of stories backlog Stories with this Label.
     *
     * @return $this
     */
    public function setNumStoriesBacklog($numStoriesBacklog)
    {
        $this->container['numStoriesBacklog'] = $numStoriesBacklog;

        return $this;
    }

    /**
     * Gets numPointsTotal
     *
     * @return int
     */
    public function getNumPointsTotal()
    {
        return $this->container['numPointsTotal'];
    }

    /**
     * Sets numPointsTotal
     *
     * @param int $numPointsTotal The total number of points with this Label.
     *
     * @return $this
     */
    public function setNumPointsTotal($numPointsTotal)
    {
        $this->container['numPointsTotal'] = $numPointsTotal;

        return $this;
    }

    /**
     * Gets numStoriesInProgress
     *
     * @return int
     */
    public function getNumStoriesInProgress()
    {
        return $this->container['numStoriesInProgress'];
    }

    /**
     * Sets numStoriesInProgress
     *
     * @param int $numStoriesInProgress The total number of in-progress Stories with this Label.
     *
     * @return $this
     */
    public function setNumStoriesInProgress($numStoriesInProgress)
    {
        $this->container['numStoriesInProgress'] = $numStoriesInProgress;

        return $this;
    }

    /**
     * Gets numPointsBacklog
     *
     * @return int
     */
    public function getNumPointsBacklog()
    {
        return $this->container['numPointsBacklog'];
    }

    /**
     * Sets numPointsBacklog
     *
     * @param int $numPointsBacklog The total number of backlog points with this Label.
     *
     * @return $this
     */
    public function setNumPointsBacklog($numPointsBacklog)
    {
        $this->container['numPointsBacklog'] = $numPointsBacklog;

        return $this;
    }

    /**
     * Gets numEpicsCompleted
     *
     * @return int
     */
    public function getNumEpicsCompleted()
    {
        return $this->container['numEpicsCompleted'];
    }

    /**
     * Sets numEpicsCompleted
     *
     * @param int $numEpicsCompleted The number of completed Epics associated with this Label.
     *
     * @return $this
     */
    public function setNumEpicsCompleted($numEpicsCompleted)
    {
        $this->container['numEpicsCompleted'] = $numEpicsCompleted;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed $value Value to be set
     *
     * @return void
     */
    #[ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
