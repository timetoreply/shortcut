<?php
/**
 * PullRequest
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Timetoreply\Shortcut
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Shortcut API
 *
 * Shortcut API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Timetoreply\Shortcut\Model;

use \ArrayAccess;
use \Timetoreply\Shortcut\ObjectSerializer;

/**
 * PullRequest Class Doc Comment
 *
 * @category Class
 * @description Corresponds to a VCS Pull Request attached to a Shortcut story.
 * @package  Timetoreply\Shortcut
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PullRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PullRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'entityType' => 'string',
        'closed' => 'bool',
        'merged' => 'bool',
        'numAdded' => 'int',
        'branchId' => 'int',
        'overlappingStories' => 'int[]',
        'number' => 'int',
        'branchName' => 'string',
        'targetBranchName' => 'string',
        'numCommits' => 'int',
        'title' => 'string',
        'updatedAt' => '\DateTime',
        'hasOverlappingStories' => 'bool',
        'draft' => 'bool',
        'id' => 'int',
        'vcsLabels' => '\Timetoreply\Shortcut\Model\PullRequestLabel[]',
        'url' => 'string',
        'numRemoved' => 'int',
        'reviewStatus' => 'string',
        'numModified' => 'int',
        'buildStatus' => 'string',
        'targetBranchId' => 'int',
        'repositoryId' => 'int',
        'createdAt' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'entityType' => null,
        'closed' => null,
        'merged' => null,
        'numAdded' => 'int64',
        'branchId' => 'int64',
        'overlappingStories' => 'int64',
        'number' => 'int64',
        'branchName' => null,
        'targetBranchName' => null,
        'numCommits' => 'int64',
        'title' => null,
        'updatedAt' => 'date-time',
        'hasOverlappingStories' => null,
        'draft' => null,
        'id' => 'int64',
        'vcsLabels' => null,
        'url' => null,
        'numRemoved' => 'int64',
        'reviewStatus' => null,
        'numModified' => 'int64',
        'buildStatus' => null,
        'targetBranchId' => 'int64',
        'repositoryId' => 'int64',
        'createdAt' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'entityType' => false,
        'closed' => false,
        'merged' => false,
        'numAdded' => false,
        'branchId' => false,
        'overlappingStories' => false,
        'number' => false,
        'branchName' => false,
        'targetBranchName' => false,
        'numCommits' => true,
        'title' => false,
        'updatedAt' => false,
        'hasOverlappingStories' => false,
        'draft' => false,
        'id' => false,
        'vcsLabels' => true,
        'url' => false,
        'numRemoved' => false,
        'reviewStatus' => false,
        'numModified' => true,
        'buildStatus' => false,
        'targetBranchId' => false,
        'repositoryId' => false,
        'createdAt' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'entityType' => 'entity_type',
        'closed' => 'closed',
        'merged' => 'merged',
        'numAdded' => 'num_added',
        'branchId' => 'branch_id',
        'overlappingStories' => 'overlapping_stories',
        'number' => 'number',
        'branchName' => 'branch_name',
        'targetBranchName' => 'target_branch_name',
        'numCommits' => 'num_commits',
        'title' => 'title',
        'updatedAt' => 'updated_at',
        'hasOverlappingStories' => 'has_overlapping_stories',
        'draft' => 'draft',
        'id' => 'id',
        'vcsLabels' => 'vcs_labels',
        'url' => 'url',
        'numRemoved' => 'num_removed',
        'reviewStatus' => 'review_status',
        'numModified' => 'num_modified',
        'buildStatus' => 'build_status',
        'targetBranchId' => 'target_branch_id',
        'repositoryId' => 'repository_id',
        'createdAt' => 'created_at'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'entityType' => 'setEntityType',
        'closed' => 'setClosed',
        'merged' => 'setMerged',
        'numAdded' => 'setNumAdded',
        'branchId' => 'setBranchId',
        'overlappingStories' => 'setOverlappingStories',
        'number' => 'setNumber',
        'branchName' => 'setBranchName',
        'targetBranchName' => 'setTargetBranchName',
        'numCommits' => 'setNumCommits',
        'title' => 'setTitle',
        'updatedAt' => 'setUpdatedAt',
        'hasOverlappingStories' => 'setHasOverlappingStories',
        'draft' => 'setDraft',
        'id' => 'setId',
        'vcsLabels' => 'setVcsLabels',
        'url' => 'setUrl',
        'numRemoved' => 'setNumRemoved',
        'reviewStatus' => 'setReviewStatus',
        'numModified' => 'setNumModified',
        'buildStatus' => 'setBuildStatus',
        'targetBranchId' => 'setTargetBranchId',
        'repositoryId' => 'setRepositoryId',
        'createdAt' => 'setCreatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'entityType' => 'getEntityType',
        'closed' => 'getClosed',
        'merged' => 'getMerged',
        'numAdded' => 'getNumAdded',
        'branchId' => 'getBranchId',
        'overlappingStories' => 'getOverlappingStories',
        'number' => 'getNumber',
        'branchName' => 'getBranchName',
        'targetBranchName' => 'getTargetBranchName',
        'numCommits' => 'getNumCommits',
        'title' => 'getTitle',
        'updatedAt' => 'getUpdatedAt',
        'hasOverlappingStories' => 'getHasOverlappingStories',
        'draft' => 'getDraft',
        'id' => 'getId',
        'vcsLabels' => 'getVcsLabels',
        'url' => 'getUrl',
        'numRemoved' => 'getNumRemoved',
        'reviewStatus' => 'getReviewStatus',
        'numModified' => 'getNumModified',
        'buildStatus' => 'getBuildStatus',
        'targetBranchId' => 'getTargetBranchId',
        'repositoryId' => 'getRepositoryId',
        'createdAt' => 'getCreatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('entityType', $data ?? [], null);
        $this->setIfExists('closed', $data ?? [], null);
        $this->setIfExists('merged', $data ?? [], null);
        $this->setIfExists('numAdded', $data ?? [], null);
        $this->setIfExists('branchId', $data ?? [], null);
        $this->setIfExists('overlappingStories', $data ?? [], null);
        $this->setIfExists('number', $data ?? [], null);
        $this->setIfExists('branchName', $data ?? [], null);
        $this->setIfExists('targetBranchName', $data ?? [], null);
        $this->setIfExists('numCommits', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('updatedAt', $data ?? [], null);
        $this->setIfExists('hasOverlappingStories', $data ?? [], null);
        $this->setIfExists('draft', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('vcsLabels', $data ?? [], null);
        $this->setIfExists('url', $data ?? [], null);
        $this->setIfExists('numRemoved', $data ?? [], null);
        $this->setIfExists('reviewStatus', $data ?? [], null);
        $this->setIfExists('numModified', $data ?? [], null);
        $this->setIfExists('buildStatus', $data ?? [], null);
        $this->setIfExists('targetBranchId', $data ?? [], null);
        $this->setIfExists('repositoryId', $data ?? [], null);
        $this->setIfExists('createdAt', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['entityType'] === null) {
            $invalidProperties[] = "'entityType' can't be null";
        }
        if ($this->container['closed'] === null) {
            $invalidProperties[] = "'closed' can't be null";
        }
        if ($this->container['merged'] === null) {
            $invalidProperties[] = "'merged' can't be null";
        }
        if ($this->container['numAdded'] === null) {
            $invalidProperties[] = "'numAdded' can't be null";
        }
        if ($this->container['branchId'] === null) {
            $invalidProperties[] = "'branchId' can't be null";
        }
        if ($this->container['number'] === null) {
            $invalidProperties[] = "'number' can't be null";
        }
        if ($this->container['branchName'] === null) {
            $invalidProperties[] = "'branchName' can't be null";
        }
        if ($this->container['targetBranchName'] === null) {
            $invalidProperties[] = "'targetBranchName' can't be null";
        }
        if ($this->container['numCommits'] === null) {
            $invalidProperties[] = "'numCommits' can't be null";
        }
        if ($this->container['title'] === null) {
            $invalidProperties[] = "'title' can't be null";
        }
        if ($this->container['updatedAt'] === null) {
            $invalidProperties[] = "'updatedAt' can't be null";
        }
        if ($this->container['hasOverlappingStories'] === null) {
            $invalidProperties[] = "'hasOverlappingStories' can't be null";
        }
        if ($this->container['draft'] === null) {
            $invalidProperties[] = "'draft' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['url'] === null) {
            $invalidProperties[] = "'url' can't be null";
        }
        if ($this->container['numRemoved'] === null) {
            $invalidProperties[] = "'numRemoved' can't be null";
        }
        if ($this->container['numModified'] === null) {
            $invalidProperties[] = "'numModified' can't be null";
        }
        if ($this->container['targetBranchId'] === null) {
            $invalidProperties[] = "'targetBranchId' can't be null";
        }
        if ($this->container['repositoryId'] === null) {
            $invalidProperties[] = "'repositoryId' can't be null";
        }
        if ($this->container['createdAt'] === null) {
            $invalidProperties[] = "'createdAt' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets entityType
     *
     * @return string
     */
    public function getEntityType()
    {
        return $this->container['entityType'];
    }

    /**
     * Sets entityType
     *
     * @param string $entityType A string description of this resource.
     *
     * @return self
     */
    public function setEntityType($entityType)
    {
        if (is_null($entityType)) {
            throw new \InvalidArgumentException('non-nullable entityType cannot be null');
        }
        $this->container['entityType'] = $entityType;

        return $this;
    }

    /**
     * Gets closed
     *
     * @return bool
     */
    public function getClosed()
    {
        return $this->container['closed'];
    }

    /**
     * Sets closed
     *
     * @param bool $closed True/False boolean indicating whether the VCS pull request has been closed.
     *
     * @return self
     */
    public function setClosed($closed)
    {
        if (is_null($closed)) {
            throw new \InvalidArgumentException('non-nullable closed cannot be null');
        }
        $this->container['closed'] = $closed;

        return $this;
    }

    /**
     * Gets merged
     *
     * @return bool
     */
    public function getMerged()
    {
        return $this->container['merged'];
    }

    /**
     * Sets merged
     *
     * @param bool $merged True/False boolean indicating whether the VCS pull request has been merged.
     *
     * @return self
     */
    public function setMerged($merged)
    {
        if (is_null($merged)) {
            throw new \InvalidArgumentException('non-nullable merged cannot be null');
        }
        $this->container['merged'] = $merged;

        return $this;
    }

    /**
     * Gets numAdded
     *
     * @return int
     */
    public function getNumAdded()
    {
        return $this->container['numAdded'];
    }

    /**
     * Sets numAdded
     *
     * @param int $numAdded Number of lines added in the pull request, according to VCS.
     *
     * @return self
     */
    public function setNumAdded($numAdded)
    {
        if (is_null($numAdded)) {
            throw new \InvalidArgumentException('non-nullable numAdded cannot be null');
        }
        $this->container['numAdded'] = $numAdded;

        return $this;
    }

    /**
     * Gets branchId
     *
     * @return int
     */
    public function getBranchId()
    {
        return $this->container['branchId'];
    }

    /**
     * Sets branchId
     *
     * @param int $branchId The ID of the branch for the particular pull request.
     *
     * @return self
     */
    public function setBranchId($branchId)
    {
        if (is_null($branchId)) {
            throw new \InvalidArgumentException('non-nullable branchId cannot be null');
        }
        $this->container['branchId'] = $branchId;

        return $this;
    }

    /**
     * Gets overlappingStories
     *
     * @return int[]|null
     */
    public function getOverlappingStories()
    {
        return $this->container['overlappingStories'];
    }

    /**
     * Sets overlappingStories
     *
     * @param int[]|null $overlappingStories An array of Story ids that have Pull Requests that change at least one of the same lines this Pull Request changes.
     *
     * @return self
     */
    public function setOverlappingStories($overlappingStories)
    {
        if (is_null($overlappingStories)) {
            throw new \InvalidArgumentException('non-nullable overlappingStories cannot be null');
        }
        $this->container['overlappingStories'] = $overlappingStories;

        return $this;
    }

    /**
     * Gets number
     *
     * @return int
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param int $number The pull request's unique number ID in VCS.
     *
     * @return self
     */
    public function setNumber($number)
    {
        if (is_null($number)) {
            throw new \InvalidArgumentException('non-nullable number cannot be null');
        }
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets branchName
     *
     * @return string
     */
    public function getBranchName()
    {
        return $this->container['branchName'];
    }

    /**
     * Sets branchName
     *
     * @param string $branchName The name of the branch for the particular pull request.
     *
     * @return self
     */
    public function setBranchName($branchName)
    {
        if (is_null($branchName)) {
            throw new \InvalidArgumentException('non-nullable branchName cannot be null');
        }
        $this->container['branchName'] = $branchName;

        return $this;
    }

    /**
     * Gets targetBranchName
     *
     * @return string
     */
    public function getTargetBranchName()
    {
        return $this->container['targetBranchName'];
    }

    /**
     * Sets targetBranchName
     *
     * @param string $targetBranchName The name of the target branch for the particular pull request.
     *
     * @return self
     */
    public function setTargetBranchName($targetBranchName)
    {
        if (is_null($targetBranchName)) {
            throw new \InvalidArgumentException('non-nullable targetBranchName cannot be null');
        }
        $this->container['targetBranchName'] = $targetBranchName;

        return $this;
    }

    /**
     * Gets numCommits
     *
     * @return int
     */
    public function getNumCommits()
    {
        return $this->container['numCommits'];
    }

    /**
     * Sets numCommits
     *
     * @param int $numCommits The number of commits on the pull request.
     *
     * @return self
     */
    public function setNumCommits($numCommits)
    {
        if (is_null($numCommits)) {
            array_push($this->openAPINullablesSetToNull, 'numCommits');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('numCommits', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['numCommits'] = $numCommits;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title The title of the pull request.
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            throw new \InvalidArgumentException('non-nullable title cannot be null');
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets updatedAt
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updatedAt'];
    }

    /**
     * Sets updatedAt
     *
     * @param \DateTime $updatedAt The time/date the pull request was created.
     *
     * @return self
     */
    public function setUpdatedAt($updatedAt)
    {
        if (is_null($updatedAt)) {
            throw new \InvalidArgumentException('non-nullable updatedAt cannot be null');
        }
        $this->container['updatedAt'] = $updatedAt;

        return $this;
    }

    /**
     * Gets hasOverlappingStories
     *
     * @return bool
     */
    public function getHasOverlappingStories()
    {
        return $this->container['hasOverlappingStories'];
    }

    /**
     * Sets hasOverlappingStories
     *
     * @param bool $hasOverlappingStories Boolean indicating that the Pull Request has Stories that have Pull Requests that change at least one of the same lines this Pull Request changes.
     *
     * @return self
     */
    public function setHasOverlappingStories($hasOverlappingStories)
    {
        if (is_null($hasOverlappingStories)) {
            throw new \InvalidArgumentException('non-nullable hasOverlappingStories cannot be null');
        }
        $this->container['hasOverlappingStories'] = $hasOverlappingStories;

        return $this;
    }

    /**
     * Gets draft
     *
     * @return bool
     */
    public function getDraft()
    {
        return $this->container['draft'];
    }

    /**
     * Sets draft
     *
     * @param bool $draft True/False boolean indicating whether the VCS pull request is in the draft state.
     *
     * @return self
     */
    public function setDraft($draft)
    {
        if (is_null($draft)) {
            throw new \InvalidArgumentException('non-nullable draft cannot be null');
        }
        $this->container['draft'] = $draft;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The unique ID associated with the pull request in Shortcut.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets vcsLabels
     *
     * @return \Timetoreply\Shortcut\Model\PullRequestLabel[]|null
     */
    public function getVcsLabels()
    {
        return $this->container['vcsLabels'];
    }

    /**
     * Sets vcsLabels
     *
     * @param \Timetoreply\Shortcut\Model\PullRequestLabel[]|null $vcsLabels An array of PullRequestLabels attached to the PullRequest.
     *
     * @return self
     */
    public function setVcsLabels($vcsLabels)
    {
        if (is_null($vcsLabels)) {
            array_push($this->openAPINullablesSetToNull, 'vcsLabels');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('vcsLabels', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['vcsLabels'] = $vcsLabels;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url The URL for the pull request.
     *
     * @return self
     */
    public function setUrl($url)
    {
        if (is_null($url)) {
            throw new \InvalidArgumentException('non-nullable url cannot be null');
        }
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets numRemoved
     *
     * @return int
     */
    public function getNumRemoved()
    {
        return $this->container['numRemoved'];
    }

    /**
     * Sets numRemoved
     *
     * @param int $numRemoved Number of lines removed in the pull request, according to VCS.
     *
     * @return self
     */
    public function setNumRemoved($numRemoved)
    {
        if (is_null($numRemoved)) {
            throw new \InvalidArgumentException('non-nullable numRemoved cannot be null');
        }
        $this->container['numRemoved'] = $numRemoved;

        return $this;
    }

    /**
     * Gets reviewStatus
     *
     * @return string|null
     */
    public function getReviewStatus()
    {
        return $this->container['reviewStatus'];
    }

    /**
     * Sets reviewStatus
     *
     * @param string|null $reviewStatus The status of the review for the pull request.
     *
     * @return self
     */
    public function setReviewStatus($reviewStatus)
    {
        if (is_null($reviewStatus)) {
            throw new \InvalidArgumentException('non-nullable reviewStatus cannot be null');
        }
        $this->container['reviewStatus'] = $reviewStatus;

        return $this;
    }

    /**
     * Gets numModified
     *
     * @return int
     */
    public function getNumModified()
    {
        return $this->container['numModified'];
    }

    /**
     * Sets numModified
     *
     * @param int $numModified Number of lines modified in the pull request, according to VCS.
     *
     * @return self
     */
    public function setNumModified($numModified)
    {
        if (is_null($numModified)) {
            array_push($this->openAPINullablesSetToNull, 'numModified');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('numModified', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['numModified'] = $numModified;

        return $this;
    }

    /**
     * Gets buildStatus
     *
     * @return string|null
     */
    public function getBuildStatus()
    {
        return $this->container['buildStatus'];
    }

    /**
     * Sets buildStatus
     *
     * @param string|null $buildStatus The status of the Continuous Integration workflow for the pull request.
     *
     * @return self
     */
    public function setBuildStatus($buildStatus)
    {
        if (is_null($buildStatus)) {
            throw new \InvalidArgumentException('non-nullable buildStatus cannot be null');
        }
        $this->container['buildStatus'] = $buildStatus;

        return $this;
    }

    /**
     * Gets targetBranchId
     *
     * @return int
     */
    public function getTargetBranchId()
    {
        return $this->container['targetBranchId'];
    }

    /**
     * Sets targetBranchId
     *
     * @param int $targetBranchId The ID of the target branch for the particular pull request.
     *
     * @return self
     */
    public function setTargetBranchId($targetBranchId)
    {
        if (is_null($targetBranchId)) {
            throw new \InvalidArgumentException('non-nullable targetBranchId cannot be null');
        }
        $this->container['targetBranchId'] = $targetBranchId;

        return $this;
    }

    /**
     * Gets repositoryId
     *
     * @return int
     */
    public function getRepositoryId()
    {
        return $this->container['repositoryId'];
    }

    /**
     * Sets repositoryId
     *
     * @param int $repositoryId The ID of the repository for the particular pull request.
     *
     * @return self
     */
    public function setRepositoryId($repositoryId)
    {
        if (is_null($repositoryId)) {
            throw new \InvalidArgumentException('non-nullable repositoryId cannot be null');
        }
        $this->container['repositoryId'] = $repositoryId;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param \DateTime $createdAt The time/date the pull request was created.
     *
     * @return self
     */
    public function setCreatedAt($createdAt)
    {
        if (is_null($createdAt)) {
            throw new \InvalidArgumentException('non-nullable createdAt cannot be null');
        }
        $this->container['createdAt'] = $createdAt;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


