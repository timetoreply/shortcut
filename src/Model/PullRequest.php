<?php
/**
 * PullRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Timetoreply\Shortcut
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Shortcut API
 *
 * Shortcut API
 *
 * OpenAPI spec version: 3.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.43-SNAPSHOT
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Timetoreply\Shortcut\Model;

use ArrayAccess;
use DateTime;
use ReturnTypeWillChange;
use Timetoreply\Shortcut\ObjectSerializer;

/**
 * PullRequest Class Doc Comment
 *
 * @category Class
 * @description Corresponds to a VCS Pull Request attached to a Shortcut story.
 * @package  Timetoreply\Shortcut
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PullRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'PullRequest';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'entityType' => 'string',
        'closed' => 'bool',
        'merged' => 'bool',
        'numAdded' => 'int',
        'branchId' => 'int',
        'overlappingStories' => 'int[]',
        'number' => 'int',
        'branchName' => 'string',
        'targetBranchName' => 'string',
        'numCommits' => 'int',
        'title' => 'string',
        'updatedAt' => '\DateTime',
        'draft' => 'bool',
        'id' => 'int',
        'vcsLabels' => '\Timetoreply\Shortcut\Model\PullRequestLabel[]',
        'url' => 'string',
        'numRemoved' => 'int',
        'reviewStatus' => 'string',
        'numModified' => 'int',
        'buildStatus' => 'string',
        'targetBranchId' => 'int',
        'repositoryId' => 'int',
        'createdAt' => '\DateTime'];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'entityType' => null,
        'closed' => null,
        'merged' => null,
        'numAdded' => 'int64',
        'branchId' => 'int64',
        'overlappingStories' => 'int64',
        'number' => 'int64',
        'branchName' => null,
        'targetBranchName' => null,
        'numCommits' => 'int64',
        'title' => null,
        'updatedAt' => 'date-time',
        'draft' => null,
        'id' => 'int64',
        'vcsLabels' => null,
        'url' => null,
        'numRemoved' => 'int64',
        'reviewStatus' => null,
        'numModified' => 'int64',
        'buildStatus' => null,
        'targetBranchId' => 'int64',
        'repositoryId' => 'int64',
        'createdAt' => 'date-time'];
    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'entityType' => 'entity_type',
        'closed' => 'closed',
        'merged' => 'merged',
        'numAdded' => 'num_added',
        'branchId' => 'branch_id',
        'overlappingStories' => 'overlapping_stories',
        'number' => 'number',
        'branchName' => 'branch_name',
        'targetBranchName' => 'target_branch_name',
        'numCommits' => 'num_commits',
        'title' => 'title',
        'updatedAt' => 'updated_at',
        'draft' => 'draft',
        'id' => 'id',
        'vcsLabels' => 'vcs_labels',
        'url' => 'url',
        'numRemoved' => 'num_removed',
        'reviewStatus' => 'review_status',
        'numModified' => 'num_modified',
        'buildStatus' => 'build_status',
        'targetBranchId' => 'target_branch_id',
        'repositoryId' => 'repository_id',
        'createdAt' => 'created_at'];
    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'entityType' => 'setEntityType',
        'closed' => 'setClosed',
        'merged' => 'setMerged',
        'numAdded' => 'setNumAdded',
        'branchId' => 'setBranchId',
        'overlappingStories' => 'setOverlappingStories',
        'number' => 'setNumber',
        'branchName' => 'setBranchName',
        'targetBranchName' => 'setTargetBranchName',
        'numCommits' => 'setNumCommits',
        'title' => 'setTitle',
        'updatedAt' => 'setUpdatedAt',
        'draft' => 'setDraft',
        'id' => 'setId',
        'vcsLabels' => 'setVcsLabels',
        'url' => 'setUrl',
        'numRemoved' => 'setNumRemoved',
        'reviewStatus' => 'setReviewStatus',
        'numModified' => 'setNumModified',
        'buildStatus' => 'setBuildStatus',
        'targetBranchId' => 'setTargetBranchId',
        'repositoryId' => 'setRepositoryId',
        'createdAt' => 'setCreatedAt'];
    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'entityType' => 'getEntityType',
        'closed' => 'getClosed',
        'merged' => 'getMerged',
        'numAdded' => 'getNumAdded',
        'branchId' => 'getBranchId',
        'overlappingStories' => 'getOverlappingStories',
        'number' => 'getNumber',
        'branchName' => 'getBranchName',
        'targetBranchName' => 'getTargetBranchName',
        'numCommits' => 'getNumCommits',
        'title' => 'getTitle',
        'updatedAt' => 'getUpdatedAt',
        'draft' => 'getDraft',
        'id' => 'getId',
        'vcsLabels' => 'getVcsLabels',
        'url' => 'getUrl',
        'numRemoved' => 'getNumRemoved',
        'reviewStatus' => 'getReviewStatus',
        'numModified' => 'getNumModified',
        'buildStatus' => 'getBuildStatus',
        'targetBranchId' => 'getTargetBranchId',
        'repositoryId' => 'getRepositoryId',
        'createdAt' => 'getCreatedAt'];
    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['entityType'] = isset($data['entityType']) ? $data['entityType'] : null;
        $this->container['closed'] = isset($data['closed']) ? $data['closed'] : null;
        $this->container['merged'] = isset($data['merged']) ? $data['merged'] : null;
        $this->container['numAdded'] = isset($data['numAdded']) ? $data['numAdded'] : null;
        $this->container['branchId'] = isset($data['branchId']) ? $data['branchId'] : null;
        $this->container['overlappingStories'] = isset($data['overlappingStories']) ? $data['overlappingStories'] : null;
        $this->container['number'] = isset($data['number']) ? $data['number'] : null;
        $this->container['branchName'] = isset($data['branchName']) ? $data['branchName'] : null;
        $this->container['targetBranchName'] = isset($data['targetBranchName']) ? $data['targetBranchName'] : null;
        $this->container['numCommits'] = isset($data['numCommits']) ? $data['numCommits'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['updatedAt'] = isset($data['updatedAt']) ? $data['updatedAt'] : null;
        $this->container['draft'] = isset($data['draft']) ? $data['draft'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['vcsLabels'] = isset($data['vcsLabels']) ? $data['vcsLabels'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['numRemoved'] = isset($data['numRemoved']) ? $data['numRemoved'] : null;
        $this->container['reviewStatus'] = isset($data['reviewStatus']) ? $data['reviewStatus'] : null;
        $this->container['numModified'] = isset($data['numModified']) ? $data['numModified'] : null;
        $this->container['buildStatus'] = isset($data['buildStatus']) ? $data['buildStatus'] : null;
        $this->container['targetBranchId'] = isset($data['targetBranchId']) ? $data['targetBranchId'] : null;
        $this->container['repositoryId'] = isset($data['repositoryId']) ? $data['repositoryId'] : null;
        $this->container['createdAt'] = isset($data['createdAt']) ? $data['createdAt'] : null;
    }

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['entityType'] === null) {
            $invalidProperties[] = "'entityType' can't be null";
        }
        if ($this->container['closed'] === null) {
            $invalidProperties[] = "'closed' can't be null";
        }
        if ($this->container['merged'] === null) {
            $invalidProperties[] = "'merged' can't be null";
        }
        if ($this->container['numAdded'] === null) {
            $invalidProperties[] = "'numAdded' can't be null";
        }
        if ($this->container['branchId'] === null) {
            $invalidProperties[] = "'branchId' can't be null";
        }
        if ($this->container['number'] === null) {
            $invalidProperties[] = "'number' can't be null";
        }
        if ($this->container['branchName'] === null) {
            $invalidProperties[] = "'branchName' can't be null";
        }
        if ($this->container['targetBranchName'] === null) {
            $invalidProperties[] = "'targetBranchName' can't be null";
        }
        if ($this->container['numCommits'] === null) {
            $invalidProperties[] = "'numCommits' can't be null";
        }
        if ($this->container['title'] === null) {
            $invalidProperties[] = "'title' can't be null";
        }
        if ($this->container['updatedAt'] === null) {
            $invalidProperties[] = "'updatedAt' can't be null";
        }
        if ($this->container['draft'] === null) {
            $invalidProperties[] = "'draft' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['url'] === null) {
            $invalidProperties[] = "'url' can't be null";
        }
        if ($this->container['numRemoved'] === null) {
            $invalidProperties[] = "'numRemoved' can't be null";
        }
        if ($this->container['numModified'] === null) {
            $invalidProperties[] = "'numModified' can't be null";
        }
        if ($this->container['targetBranchId'] === null) {
            $invalidProperties[] = "'targetBranchId' can't be null";
        }
        if ($this->container['repositoryId'] === null) {
            $invalidProperties[] = "'repositoryId' can't be null";
        }
        if ($this->container['createdAt'] === null) {
            $invalidProperties[] = "'createdAt' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Gets entityType
     *
     * @return string
     */
    public function getEntityType()
    {
        return $this->container['entityType'];
    }

    /**
     * Sets entityType
     *
     * @param string $entityType A string description of this resource.
     *
     * @return $this
     */
    public function setEntityType($entityType)
    {
        $this->container['entityType'] = $entityType;

        return $this;
    }

    /**
     * Gets closed
     *
     * @return bool
     */
    public function getClosed()
    {
        return $this->container['closed'];
    }

    /**
     * Sets closed
     *
     * @param bool $closed True/False boolean indicating whether the VCS pull request has been closed.
     *
     * @return $this
     */
    public function setClosed($closed)
    {
        $this->container['closed'] = $closed;

        return $this;
    }

    /**
     * Gets merged
     *
     * @return bool
     */
    public function getMerged()
    {
        return $this->container['merged'];
    }

    /**
     * Sets merged
     *
     * @param bool $merged True/False boolean indicating whether the VCS pull request has been merged.
     *
     * @return $this
     */
    public function setMerged($merged)
    {
        $this->container['merged'] = $merged;

        return $this;
    }

    /**
     * Gets numAdded
     *
     * @return int
     */
    public function getNumAdded()
    {
        return $this->container['numAdded'];
    }

    /**
     * Sets numAdded
     *
     * @param int $numAdded Number of lines added in the pull request, according to VCS.
     *
     * @return $this
     */
    public function setNumAdded($numAdded)
    {
        $this->container['numAdded'] = $numAdded;

        return $this;
    }

    /**
     * Gets branchId
     *
     * @return int
     */
    public function getBranchId()
    {
        return $this->container['branchId'];
    }

    /**
     * Sets branchId
     *
     * @param int $branchId The ID of the branch for the particular pull request.
     *
     * @return $this
     */
    public function setBranchId($branchId)
    {
        $this->container['branchId'] = $branchId;

        return $this;
    }

    /**
     * Gets overlappingStories
     *
     * @return int[]
     */
    public function getOverlappingStories()
    {
        return $this->container['overlappingStories'];
    }

    /**
     * Sets overlappingStories
     *
     * @param int[] $overlappingStories An array of Story ids that have Pull Requests that change at least one of the same lines this Pull Request changes.
     *
     * @return $this
     */
    public function setOverlappingStories($overlappingStories)
    {
        $this->container['overlappingStories'] = $overlappingStories;

        return $this;
    }

    /**
     * Gets number
     *
     * @return int
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param int $number The pull request's unique number ID in VCS.
     *
     * @return $this
     */
    public function setNumber($number)
    {
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets branchName
     *
     * @return string
     */
    public function getBranchName()
    {
        return $this->container['branchName'];
    }

    /**
     * Sets branchName
     *
     * @param string $branchName The name of the branch for the particular pull request.
     *
     * @return $this
     */
    public function setBranchName($branchName)
    {
        $this->container['branchName'] = $branchName;

        return $this;
    }

    /**
     * Gets targetBranchName
     *
     * @return string
     */
    public function getTargetBranchName()
    {
        return $this->container['targetBranchName'];
    }

    /**
     * Sets targetBranchName
     *
     * @param string $targetBranchName The name of the target branch for the particular pull request.
     *
     * @return $this
     */
    public function setTargetBranchName($targetBranchName)
    {
        $this->container['targetBranchName'] = $targetBranchName;

        return $this;
    }

    /**
     * Gets numCommits
     *
     * @return int
     */
    public function getNumCommits()
    {
        return $this->container['numCommits'];
    }

    /**
     * Sets numCommits
     *
     * @param int $numCommits The number of commits on the pull request.
     *
     * @return $this
     */
    public function setNumCommits($numCommits)
    {
        $this->container['numCommits'] = $numCommits;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title The title of the pull request.
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets updatedAt
     *
     * @return DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updatedAt'];
    }

    /**
     * Sets updatedAt
     *
     * @param DateTime $updatedAt The time/date the pull request was created.
     *
     * @return $this
     */
    public function setUpdatedAt($updatedAt)
    {
        $this->container['updatedAt'] = $updatedAt;

        return $this;
    }

    /**
     * Gets draft
     *
     * @return bool
     */
    public function getDraft()
    {
        return $this->container['draft'];
    }

    /**
     * Sets draft
     *
     * @param bool $draft True/False boolean indicating whether the VCS pull request is in the draft state.
     *
     * @return $this
     */
    public function setDraft($draft)
    {
        $this->container['draft'] = $draft;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The unique ID associated with the pull request in Shortcut.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets vcsLabels
     *
     * @return PullRequestLabel[]
     */
    public function getVcsLabels()
    {
        return $this->container['vcsLabels'];
    }

    /**
     * Sets vcsLabels
     *
     * @param PullRequestLabel[] $vcsLabels An array of PullRequestLabels attached to the PullRequest.
     *
     * @return $this
     */
    public function setVcsLabels($vcsLabels)
    {
        $this->container['vcsLabels'] = $vcsLabels;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url The URL for the pull request.
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets numRemoved
     *
     * @return int
     */
    public function getNumRemoved()
    {
        return $this->container['numRemoved'];
    }

    /**
     * Sets numRemoved
     *
     * @param int $numRemoved Number of lines removed in the pull request, according to VCS.
     *
     * @return $this
     */
    public function setNumRemoved($numRemoved)
    {
        $this->container['numRemoved'] = $numRemoved;

        return $this;
    }

    /**
     * Gets reviewStatus
     *
     * @return string
     */
    public function getReviewStatus()
    {
        return $this->container['reviewStatus'];
    }

    /**
     * Sets reviewStatus
     *
     * @param string $reviewStatus The status of the review for the pull request.
     *
     * @return $this
     */
    public function setReviewStatus($reviewStatus)
    {
        $this->container['reviewStatus'] = $reviewStatus;

        return $this;
    }

    /**
     * Gets numModified
     *
     * @return int
     */
    public function getNumModified()
    {
        return $this->container['numModified'];
    }

    /**
     * Sets numModified
     *
     * @param int $numModified Number of lines modified in the pull request, according to VCS.
     *
     * @return $this
     */
    public function setNumModified($numModified)
    {
        $this->container['numModified'] = $numModified;

        return $this;
    }

    /**
     * Gets buildStatus
     *
     * @return string
     */
    public function getBuildStatus()
    {
        return $this->container['buildStatus'];
    }

    /**
     * Sets buildStatus
     *
     * @param string $buildStatus The status of the Continuous Integration workflow for the pull request.
     *
     * @return $this
     */
    public function setBuildStatus($buildStatus)
    {
        $this->container['buildStatus'] = $buildStatus;

        return $this;
    }

    /**
     * Gets targetBranchId
     *
     * @return int
     */
    public function getTargetBranchId()
    {
        return $this->container['targetBranchId'];
    }

    /**
     * Sets targetBranchId
     *
     * @param int $targetBranchId The ID of the target branch for the particular pull request.
     *
     * @return $this
     */
    public function setTargetBranchId($targetBranchId)
    {
        $this->container['targetBranchId'] = $targetBranchId;

        return $this;
    }

    /**
     * Gets repositoryId
     *
     * @return int
     */
    public function getRepositoryId()
    {
        return $this->container['repositoryId'];
    }

    /**
     * Sets repositoryId
     *
     * @param int $repositoryId The ID of the repository for the particular pull request.
     *
     * @return $this
     */
    public function setRepositoryId($repositoryId)
    {
        $this->container['repositoryId'] = $repositoryId;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param DateTime $createdAt The time/date the pull request was created.
     *
     * @return $this
     */
    public function setCreatedAt($createdAt)
    {
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed $value Value to be set
     *
     * @return void
     */
    #[ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
