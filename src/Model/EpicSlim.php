<?php
/**
 * EpicSlim
 *
 * PHP version 5
 *
 * @category Class
 * @package  Timetoreply\Shortcut
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Shortcut API
 *
 * Shortcut API
 *
 * OpenAPI spec version: 3.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.43-SNAPSHOT
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Timetoreply\Shortcut\Model;

use ArrayAccess;
use DateTime;
use ReturnTypeWillChange;
use Timetoreply\Shortcut\ObjectSerializer;

/**
 * EpicSlim Class Doc Comment
 *
 * @category Class
 * @description EpicSlim represents the same resource as an Epic but is more light-weight, including all Epic fields except the comments array. The description string can be optionally included. Use the [Get Epic](#Get-Epic) endpoint to fetch the unabridged payload for an Epic.
 * @package  Timetoreply\Shortcut
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EpicSlim implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'EpicSlim';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'appUrl' => 'string',
        'description' => 'string',
        'archived' => 'bool',
        'started' => 'bool',
        'entityType' => 'string',
        'labels' => '\Timetoreply\Shortcut\Model\LabelSlim[]',
        'mentionIds' => 'string[]',
        'memberMentionIds' => 'string[]',
        'associatedGroups' => '\Timetoreply\Shortcut\Model\EpicAssociatedGroup[]',
        'projectIds' => 'int[]',
        'storiesWithoutProjects' => 'int',
        'completedAtOverride' => '\DateTime',
        'productboardPluginId' => 'string',
        'startedAt' => '\DateTime',
        'completedAt' => '\DateTime',
        'name' => 'string',
        'globalId' => 'string',
        'completed' => 'bool',
        'productboardUrl' => 'string',
        'plannedStartDate' => '\DateTime',
        'state' => 'string',
        'milestoneId' => 'int',
        'requestedById' => 'string',
        'epicStateId' => 'int',
        'labelIds' => 'int[]',
        'startedAtOverride' => '\DateTime',
        'groupId' => 'string',
        'updatedAt' => '\DateTime',
        'groupMentionIds' => 'string[]',
        'productboardId' => 'string',
        'followerIds' => 'string[]',
        'ownerIds' => 'string[]',
        'externalId' => 'string',
        'id' => 'int',
        'position' => 'int',
        'productboardName' => 'string',
        'deadline' => '\DateTime',
        'stats' => '\Timetoreply\Shortcut\Model\EpicStats',
        'createdAt' => '\DateTime'];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'appUrl' => null,
        'description' => null,
        'archived' => null,
        'started' => null,
        'entityType' => null,
        'labels' => null,
        'mentionIds' => 'uuid',
        'memberMentionIds' => 'uuid',
        'associatedGroups' => null,
        'projectIds' => 'int64',
        'storiesWithoutProjects' => 'int64',
        'completedAtOverride' => 'date-time',
        'productboardPluginId' => 'uuid',
        'startedAt' => 'date-time',
        'completedAt' => 'date-time',
        'name' => null,
        'globalId' => null,
        'completed' => null,
        'productboardUrl' => null,
        'plannedStartDate' => 'date-time',
        'state' => null,
        'milestoneId' => 'int64',
        'requestedById' => 'uuid',
        'epicStateId' => 'int64',
        'labelIds' => 'int64',
        'startedAtOverride' => 'date-time',
        'groupId' => 'uuid',
        'updatedAt' => 'date-time',
        'groupMentionIds' => 'uuid',
        'productboardId' => 'uuid',
        'followerIds' => 'uuid',
        'ownerIds' => 'uuid',
        'externalId' => null,
        'id' => 'int64',
        'position' => 'int64',
        'productboardName' => null,
        'deadline' => 'date-time',
        'stats' => null,
        'createdAt' => 'date-time'];
    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'appUrl' => 'app_url',
        'description' => 'description',
        'archived' => 'archived',
        'started' => 'started',
        'entityType' => 'entity_type',
        'labels' => 'labels',
        'mentionIds' => 'mention_ids',
        'memberMentionIds' => 'member_mention_ids',
        'associatedGroups' => 'associated_groups',
        'projectIds' => 'project_ids',
        'storiesWithoutProjects' => 'stories_without_projects',
        'completedAtOverride' => 'completed_at_override',
        'productboardPluginId' => 'productboard_plugin_id',
        'startedAt' => 'started_at',
        'completedAt' => 'completed_at',
        'name' => 'name',
        'globalId' => 'global_id',
        'completed' => 'completed',
        'productboardUrl' => 'productboard_url',
        'plannedStartDate' => 'planned_start_date',
        'state' => 'state',
        'milestoneId' => 'milestone_id',
        'requestedById' => 'requested_by_id',
        'epicStateId' => 'epic_state_id',
        'labelIds' => 'label_ids',
        'startedAtOverride' => 'started_at_override',
        'groupId' => 'group_id',
        'updatedAt' => 'updated_at',
        'groupMentionIds' => 'group_mention_ids',
        'productboardId' => 'productboard_id',
        'followerIds' => 'follower_ids',
        'ownerIds' => 'owner_ids',
        'externalId' => 'external_id',
        'id' => 'id',
        'position' => 'position',
        'productboardName' => 'productboard_name',
        'deadline' => 'deadline',
        'stats' => 'stats',
        'createdAt' => 'created_at'];
    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'appUrl' => 'setAppUrl',
        'description' => 'setDescription',
        'archived' => 'setArchived',
        'started' => 'setStarted',
        'entityType' => 'setEntityType',
        'labels' => 'setLabels',
        'mentionIds' => 'setMentionIds',
        'memberMentionIds' => 'setMemberMentionIds',
        'associatedGroups' => 'setAssociatedGroups',
        'projectIds' => 'setProjectIds',
        'storiesWithoutProjects' => 'setStoriesWithoutProjects',
        'completedAtOverride' => 'setCompletedAtOverride',
        'productboardPluginId' => 'setProductboardPluginId',
        'startedAt' => 'setStartedAt',
        'completedAt' => 'setCompletedAt',
        'name' => 'setName',
        'globalId' => 'setGlobalId',
        'completed' => 'setCompleted',
        'productboardUrl' => 'setProductboardUrl',
        'plannedStartDate' => 'setPlannedStartDate',
        'state' => 'setState',
        'milestoneId' => 'setMilestoneId',
        'requestedById' => 'setRequestedById',
        'epicStateId' => 'setEpicStateId',
        'labelIds' => 'setLabelIds',
        'startedAtOverride' => 'setStartedAtOverride',
        'groupId' => 'setGroupId',
        'updatedAt' => 'setUpdatedAt',
        'groupMentionIds' => 'setGroupMentionIds',
        'productboardId' => 'setProductboardId',
        'followerIds' => 'setFollowerIds',
        'ownerIds' => 'setOwnerIds',
        'externalId' => 'setExternalId',
        'id' => 'setId',
        'position' => 'setPosition',
        'productboardName' => 'setProductboardName',
        'deadline' => 'setDeadline',
        'stats' => 'setStats',
        'createdAt' => 'setCreatedAt'];
    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'appUrl' => 'getAppUrl',
        'description' => 'getDescription',
        'archived' => 'getArchived',
        'started' => 'getStarted',
        'entityType' => 'getEntityType',
        'labels' => 'getLabels',
        'mentionIds' => 'getMentionIds',
        'memberMentionIds' => 'getMemberMentionIds',
        'associatedGroups' => 'getAssociatedGroups',
        'projectIds' => 'getProjectIds',
        'storiesWithoutProjects' => 'getStoriesWithoutProjects',
        'completedAtOverride' => 'getCompletedAtOverride',
        'productboardPluginId' => 'getProductboardPluginId',
        'startedAt' => 'getStartedAt',
        'completedAt' => 'getCompletedAt',
        'name' => 'getName',
        'globalId' => 'getGlobalId',
        'completed' => 'getCompleted',
        'productboardUrl' => 'getProductboardUrl',
        'plannedStartDate' => 'getPlannedStartDate',
        'state' => 'getState',
        'milestoneId' => 'getMilestoneId',
        'requestedById' => 'getRequestedById',
        'epicStateId' => 'getEpicStateId',
        'labelIds' => 'getLabelIds',
        'startedAtOverride' => 'getStartedAtOverride',
        'groupId' => 'getGroupId',
        'updatedAt' => 'getUpdatedAt',
        'groupMentionIds' => 'getGroupMentionIds',
        'productboardId' => 'getProductboardId',
        'followerIds' => 'getFollowerIds',
        'ownerIds' => 'getOwnerIds',
        'externalId' => 'getExternalId',
        'id' => 'getId',
        'position' => 'getPosition',
        'productboardName' => 'getProductboardName',
        'deadline' => 'getDeadline',
        'stats' => 'getStats',
        'createdAt' => 'getCreatedAt'];
    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['appUrl'] = isset($data['appUrl']) ? $data['appUrl'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['archived'] = isset($data['archived']) ? $data['archived'] : null;
        $this->container['started'] = isset($data['started']) ? $data['started'] : null;
        $this->container['entityType'] = isset($data['entityType']) ? $data['entityType'] : null;
        $this->container['labels'] = isset($data['labels']) ? $data['labels'] : null;
        $this->container['mentionIds'] = isset($data['mentionIds']) ? $data['mentionIds'] : null;
        $this->container['memberMentionIds'] = isset($data['memberMentionIds']) ? $data['memberMentionIds'] : null;
        $this->container['associatedGroups'] = isset($data['associatedGroups']) ? $data['associatedGroups'] : null;
        $this->container['projectIds'] = isset($data['projectIds']) ? $data['projectIds'] : null;
        $this->container['storiesWithoutProjects'] = isset($data['storiesWithoutProjects']) ? $data['storiesWithoutProjects'] : null;
        $this->container['completedAtOverride'] = isset($data['completedAtOverride']) ? $data['completedAtOverride'] : null;
        $this->container['productboardPluginId'] = isset($data['productboardPluginId']) ? $data['productboardPluginId'] : null;
        $this->container['startedAt'] = isset($data['startedAt']) ? $data['startedAt'] : null;
        $this->container['completedAt'] = isset($data['completedAt']) ? $data['completedAt'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['globalId'] = isset($data['globalId']) ? $data['globalId'] : null;
        $this->container['completed'] = isset($data['completed']) ? $data['completed'] : null;
        $this->container['productboardUrl'] = isset($data['productboardUrl']) ? $data['productboardUrl'] : null;
        $this->container['plannedStartDate'] = isset($data['plannedStartDate']) ? $data['plannedStartDate'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['milestoneId'] = isset($data['milestoneId']) ? $data['milestoneId'] : null;
        $this->container['requestedById'] = isset($data['requestedById']) ? $data['requestedById'] : null;
        $this->container['epicStateId'] = isset($data['epicStateId']) ? $data['epicStateId'] : null;
        $this->container['labelIds'] = isset($data['labelIds']) ? $data['labelIds'] : null;
        $this->container['startedAtOverride'] = isset($data['startedAtOverride']) ? $data['startedAtOverride'] : null;
        $this->container['groupId'] = isset($data['groupId']) ? $data['groupId'] : null;
        $this->container['updatedAt'] = isset($data['updatedAt']) ? $data['updatedAt'] : null;
        $this->container['groupMentionIds'] = isset($data['groupMentionIds']) ? $data['groupMentionIds'] : null;
        $this->container['productboardId'] = isset($data['productboardId']) ? $data['productboardId'] : null;
        $this->container['followerIds'] = isset($data['followerIds']) ? $data['followerIds'] : null;
        $this->container['ownerIds'] = isset($data['ownerIds']) ? $data['ownerIds'] : null;
        $this->container['externalId'] = isset($data['externalId']) ? $data['externalId'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['position'] = isset($data['position']) ? $data['position'] : null;
        $this->container['productboardName'] = isset($data['productboardName']) ? $data['productboardName'] : null;
        $this->container['deadline'] = isset($data['deadline']) ? $data['deadline'] : null;
        $this->container['stats'] = isset($data['stats']) ? $data['stats'] : null;
        $this->container['createdAt'] = isset($data['createdAt']) ? $data['createdAt'] : null;
    }

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['appUrl'] === null) {
            $invalidProperties[] = "'appUrl' can't be null";
        }
        if ($this->container['archived'] === null) {
            $invalidProperties[] = "'archived' can't be null";
        }
        if ($this->container['started'] === null) {
            $invalidProperties[] = "'started' can't be null";
        }
        if ($this->container['entityType'] === null) {
            $invalidProperties[] = "'entityType' can't be null";
        }
        if ($this->container['labels'] === null) {
            $invalidProperties[] = "'labels' can't be null";
        }
        if ($this->container['mentionIds'] === null) {
            $invalidProperties[] = "'mentionIds' can't be null";
        }
        if ($this->container['memberMentionIds'] === null) {
            $invalidProperties[] = "'memberMentionIds' can't be null";
        }
        if ($this->container['associatedGroups'] === null) {
            $invalidProperties[] = "'associatedGroups' can't be null";
        }
        if ($this->container['projectIds'] === null) {
            $invalidProperties[] = "'projectIds' can't be null";
        }
        if ($this->container['storiesWithoutProjects'] === null) {
            $invalidProperties[] = "'storiesWithoutProjects' can't be null";
        }
        if ($this->container['completedAtOverride'] === null) {
            $invalidProperties[] = "'completedAtOverride' can't be null";
        }
        if ($this->container['productboardPluginId'] === null) {
            $invalidProperties[] = "'productboardPluginId' can't be null";
        }
        if ($this->container['startedAt'] === null) {
            $invalidProperties[] = "'startedAt' can't be null";
        }
        if ($this->container['completedAt'] === null) {
            $invalidProperties[] = "'completedAt' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['globalId'] === null) {
            $invalidProperties[] = "'globalId' can't be null";
        }
        if ($this->container['completed'] === null) {
            $invalidProperties[] = "'completed' can't be null";
        }
        if ($this->container['productboardUrl'] === null) {
            $invalidProperties[] = "'productboardUrl' can't be null";
        }
        if ($this->container['plannedStartDate'] === null) {
            $invalidProperties[] = "'plannedStartDate' can't be null";
        }
        if ($this->container['state'] === null) {
            $invalidProperties[] = "'state' can't be null";
        }
        if ($this->container['milestoneId'] === null) {
            $invalidProperties[] = "'milestoneId' can't be null";
        }
        if ($this->container['requestedById'] === null) {
            $invalidProperties[] = "'requestedById' can't be null";
        }
        if ($this->container['epicStateId'] === null) {
            $invalidProperties[] = "'epicStateId' can't be null";
        }
        if ($this->container['labelIds'] === null) {
            $invalidProperties[] = "'labelIds' can't be null";
        }
        if ($this->container['startedAtOverride'] === null) {
            $invalidProperties[] = "'startedAtOverride' can't be null";
        }
        if ($this->container['groupId'] === null) {
            $invalidProperties[] = "'groupId' can't be null";
        }
        if ($this->container['updatedAt'] === null) {
            $invalidProperties[] = "'updatedAt' can't be null";
        }
        if ($this->container['groupMentionIds'] === null) {
            $invalidProperties[] = "'groupMentionIds' can't be null";
        }
        if ($this->container['productboardId'] === null) {
            $invalidProperties[] = "'productboardId' can't be null";
        }
        if ($this->container['followerIds'] === null) {
            $invalidProperties[] = "'followerIds' can't be null";
        }
        if ($this->container['ownerIds'] === null) {
            $invalidProperties[] = "'ownerIds' can't be null";
        }
        if ($this->container['externalId'] === null) {
            $invalidProperties[] = "'externalId' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['position'] === null) {
            $invalidProperties[] = "'position' can't be null";
        }
        if ($this->container['productboardName'] === null) {
            $invalidProperties[] = "'productboardName' can't be null";
        }
        if ($this->container['deadline'] === null) {
            $invalidProperties[] = "'deadline' can't be null";
        }
        if ($this->container['stats'] === null) {
            $invalidProperties[] = "'stats' can't be null";
        }
        if ($this->container['createdAt'] === null) {
            $invalidProperties[] = "'createdAt' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Gets appUrl
     *
     * @return string
     */
    public function getAppUrl()
    {
        return $this->container['appUrl'];
    }

    /**
     * Sets appUrl
     *
     * @param string $appUrl The Shortcut application url for the Epic.
     *
     * @return $this
     */
    public function setAppUrl($appUrl)
    {
        $this->container['appUrl'] = $appUrl;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description The Epic's description.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets archived
     *
     * @return bool
     */
    public function getArchived()
    {
        return $this->container['archived'];
    }

    /**
     * Sets archived
     *
     * @param bool $archived True/false boolean that indicates whether the Epic is archived or not.
     *
     * @return $this
     */
    public function setArchived($archived)
    {
        $this->container['archived'] = $archived;

        return $this;
    }

    /**
     * Gets started
     *
     * @return bool
     */
    public function getStarted()
    {
        return $this->container['started'];
    }

    /**
     * Sets started
     *
     * @param bool $started A true/false boolean indicating if the Epic has been started.
     *
     * @return $this
     */
    public function setStarted($started)
    {
        $this->container['started'] = $started;

        return $this;
    }

    /**
     * Gets entityType
     *
     * @return string
     */
    public function getEntityType()
    {
        return $this->container['entityType'];
    }

    /**
     * Sets entityType
     *
     * @param string $entityType A string description of this resource.
     *
     * @return $this
     */
    public function setEntityType($entityType)
    {
        $this->container['entityType'] = $entityType;

        return $this;
    }

    /**
     * Gets labels
     *
     * @return LabelSlim[]
     */
    public function getLabels()
    {
        return $this->container['labels'];
    }

    /**
     * Sets labels
     *
     * @param LabelSlim[] $labels An array of Labels attached to the Epic.
     *
     * @return $this
     */
    public function setLabels($labels)
    {
        $this->container['labels'] = $labels;

        return $this;
    }

    /**
     * Gets mentionIds
     *
     * @return string[]
     */
    public function getMentionIds()
    {
        return $this->container['mentionIds'];
    }

    /**
     * Sets mentionIds
     *
     * @param string[] $mentionIds Deprecated: use member_mention_ids.
     *
     * @return $this
     */
    public function setMentionIds($mentionIds)
    {
        $this->container['mentionIds'] = $mentionIds;

        return $this;
    }

    /**
     * Gets memberMentionIds
     *
     * @return string[]
     */
    public function getMemberMentionIds()
    {
        return $this->container['memberMentionIds'];
    }

    /**
     * Sets memberMentionIds
     *
     * @param string[] $memberMentionIds An array of Member IDs that have been mentioned in the Epic description.
     *
     * @return $this
     */
    public function setMemberMentionIds($memberMentionIds)
    {
        $this->container['memberMentionIds'] = $memberMentionIds;

        return $this;
    }

    /**
     * Gets associatedGroups
     *
     * @return EpicAssociatedGroup[]
     */
    public function getAssociatedGroups()
    {
        return $this->container['associatedGroups'];
    }

    /**
     * Sets associatedGroups
     *
     * @param EpicAssociatedGroup[] $associatedGroups An array containing Group IDs and Group-owned story counts for the Epic's associated groups.
     *
     * @return $this
     */
    public function setAssociatedGroups($associatedGroups)
    {
        $this->container['associatedGroups'] = $associatedGroups;

        return $this;
    }

    /**
     * Gets projectIds
     *
     * @return int[]
     */
    public function getProjectIds()
    {
        return $this->container['projectIds'];
    }

    /**
     * Sets projectIds
     *
     * @param int[] $projectIds The IDs of Projects related to this Epic.
     *
     * @return $this
     */
    public function setProjectIds($projectIds)
    {
        $this->container['projectIds'] = $projectIds;

        return $this;
    }

    /**
     * Gets storiesWithoutProjects
     *
     * @return int
     */
    public function getStoriesWithoutProjects()
    {
        return $this->container['storiesWithoutProjects'];
    }

    /**
     * Sets storiesWithoutProjects
     *
     * @param int $storiesWithoutProjects The number of stories in this epic which are not associated with a project.
     *
     * @return $this
     */
    public function setStoriesWithoutProjects($storiesWithoutProjects)
    {
        $this->container['storiesWithoutProjects'] = $storiesWithoutProjects;

        return $this;
    }

    /**
     * Gets completedAtOverride
     *
     * @return DateTime
     */
    public function getCompletedAtOverride()
    {
        return $this->container['completedAtOverride'];
    }

    /**
     * Sets completedAtOverride
     *
     * @param DateTime $completedAtOverride A manual override for the time/date the Epic was completed.
     *
     * @return $this
     */
    public function setCompletedAtOverride($completedAtOverride)
    {
        $this->container['completedAtOverride'] = $completedAtOverride;

        return $this;
    }

    /**
     * Gets productboardPluginId
     *
     * @return string
     */
    public function getProductboardPluginId()
    {
        return $this->container['productboardPluginId'];
    }

    /**
     * Sets productboardPluginId
     *
     * @param string $productboardPluginId The ID of the associated productboard integration.
     *
     * @return $this
     */
    public function setProductboardPluginId($productboardPluginId)
    {
        $this->container['productboardPluginId'] = $productboardPluginId;

        return $this;
    }

    /**
     * Gets startedAt
     *
     * @return DateTime
     */
    public function getStartedAt()
    {
        return $this->container['startedAt'];
    }

    /**
     * Sets startedAt
     *
     * @param DateTime $startedAt The time/date the Epic was started.
     *
     * @return $this
     */
    public function setStartedAt($startedAt)
    {
        $this->container['startedAt'] = $startedAt;

        return $this;
    }

    /**
     * Gets completedAt
     *
     * @return DateTime
     */
    public function getCompletedAt()
    {
        return $this->container['completedAt'];
    }

    /**
     * Sets completedAt
     *
     * @param DateTime $completedAt The time/date the Epic was completed.
     *
     * @return $this
     */
    public function setCompletedAt($completedAt)
    {
        $this->container['completedAt'] = $completedAt;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the Epic.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets globalId
     *
     * @return string
     */
    public function getGlobalId()
    {
        return $this->container['globalId'];
    }

    /**
     * Sets globalId
     *
     * @param string $globalId globalId
     *
     * @return $this
     */
    public function setGlobalId($globalId)
    {
        $this->container['globalId'] = $globalId;

        return $this;
    }

    /**
     * Gets completed
     *
     * @return bool
     */
    public function getCompleted()
    {
        return $this->container['completed'];
    }

    /**
     * Sets completed
     *
     * @param bool $completed A true/false boolean indicating if the Epic has been completed.
     *
     * @return $this
     */
    public function setCompleted($completed)
    {
        $this->container['completed'] = $completed;

        return $this;
    }

    /**
     * Gets productboardUrl
     *
     * @return string
     */
    public function getProductboardUrl()
    {
        return $this->container['productboardUrl'];
    }

    /**
     * Sets productboardUrl
     *
     * @param string $productboardUrl The URL of the associated productboard feature.
     *
     * @return $this
     */
    public function setProductboardUrl($productboardUrl)
    {
        $this->container['productboardUrl'] = $productboardUrl;

        return $this;
    }

    /**
     * Gets plannedStartDate
     *
     * @return DateTime
     */
    public function getPlannedStartDate()
    {
        return $this->container['plannedStartDate'];
    }

    /**
     * Sets plannedStartDate
     *
     * @param DateTime $plannedStartDate The Epic's planned start date.
     *
     * @return $this
     */
    public function setPlannedStartDate($plannedStartDate)
    {
        $this->container['plannedStartDate'] = $plannedStartDate;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state `Deprecated` The workflow state that the Epic is in.
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets milestoneId
     *
     * @return int
     */
    public function getMilestoneId()
    {
        return $this->container['milestoneId'];
    }

    /**
     * Sets milestoneId
     *
     * @param int $milestoneId The ID of the Milestone this Epic is related to.
     *
     * @return $this
     */
    public function setMilestoneId($milestoneId)
    {
        $this->container['milestoneId'] = $milestoneId;

        return $this;
    }

    /**
     * Gets requestedById
     *
     * @return string
     */
    public function getRequestedById()
    {
        return $this->container['requestedById'];
    }

    /**
     * Sets requestedById
     *
     * @param string $requestedById The ID of the Member that requested the epic.
     *
     * @return $this
     */
    public function setRequestedById($requestedById)
    {
        $this->container['requestedById'] = $requestedById;

        return $this;
    }

    /**
     * Gets epicStateId
     *
     * @return int
     */
    public function getEpicStateId()
    {
        return $this->container['epicStateId'];
    }

    /**
     * Sets epicStateId
     *
     * @param int $epicStateId The ID of the Epic State.
     *
     * @return $this
     */
    public function setEpicStateId($epicStateId)
    {
        $this->container['epicStateId'] = $epicStateId;

        return $this;
    }

    /**
     * Gets labelIds
     *
     * @return int[]
     */
    public function getLabelIds()
    {
        return $this->container['labelIds'];
    }

    /**
     * Sets labelIds
     *
     * @param int[] $labelIds An array of Label ids attached to the Epic.
     *
     * @return $this
     */
    public function setLabelIds($labelIds)
    {
        $this->container['labelIds'] = $labelIds;

        return $this;
    }

    /**
     * Gets startedAtOverride
     *
     * @return DateTime
     */
    public function getStartedAtOverride()
    {
        return $this->container['startedAtOverride'];
    }

    /**
     * Sets startedAtOverride
     *
     * @param DateTime $startedAtOverride A manual override for the time/date the Epic was started.
     *
     * @return $this
     */
    public function setStartedAtOverride($startedAtOverride)
    {
        $this->container['startedAtOverride'] = $startedAtOverride;

        return $this;
    }

    /**
     * Gets groupId
     *
     * @return string
     */
    public function getGroupId()
    {
        return $this->container['groupId'];
    }

    /**
     * Sets groupId
     *
     * @param string $groupId groupId
     *
     * @return $this
     */
    public function setGroupId($groupId)
    {
        $this->container['groupId'] = $groupId;

        return $this;
    }

    /**
     * Gets updatedAt
     *
     * @return DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updatedAt'];
    }

    /**
     * Sets updatedAt
     *
     * @param DateTime $updatedAt The time/date the Epic was updated.
     *
     * @return $this
     */
    public function setUpdatedAt($updatedAt)
    {
        $this->container['updatedAt'] = $updatedAt;

        return $this;
    }

    /**
     * Gets groupMentionIds
     *
     * @return string[]
     */
    public function getGroupMentionIds()
    {
        return $this->container['groupMentionIds'];
    }

    /**
     * Sets groupMentionIds
     *
     * @param string[] $groupMentionIds An array of Group IDs that have been mentioned in the Epic description.
     *
     * @return $this
     */
    public function setGroupMentionIds($groupMentionIds)
    {
        $this->container['groupMentionIds'] = $groupMentionIds;

        return $this;
    }

    /**
     * Gets productboardId
     *
     * @return string
     */
    public function getProductboardId()
    {
        return $this->container['productboardId'];
    }

    /**
     * Sets productboardId
     *
     * @param string $productboardId The ID of the associated productboard feature.
     *
     * @return $this
     */
    public function setProductboardId($productboardId)
    {
        $this->container['productboardId'] = $productboardId;

        return $this;
    }

    /**
     * Gets followerIds
     *
     * @return string[]
     */
    public function getFollowerIds()
    {
        return $this->container['followerIds'];
    }

    /**
     * Sets followerIds
     *
     * @param string[] $followerIds An array of UUIDs for any Members you want to add as Followers on this Epic.
     *
     * @return $this
     */
    public function setFollowerIds($followerIds)
    {
        $this->container['followerIds'] = $followerIds;

        return $this;
    }

    /**
     * Gets ownerIds
     *
     * @return string[]
     */
    public function getOwnerIds()
    {
        return $this->container['ownerIds'];
    }

    /**
     * Sets ownerIds
     *
     * @param string[] $ownerIds An array of UUIDs for any members you want to add as Owners on this new Epic.
     *
     * @return $this
     */
    public function setOwnerIds($ownerIds)
    {
        $this->container['ownerIds'] = $ownerIds;

        return $this;
    }

    /**
     * Gets externalId
     *
     * @return string
     */
    public function getExternalId()
    {
        return $this->container['externalId'];
    }

    /**
     * Sets externalId
     *
     * @param string $externalId This field can be set to another unique ID. In the case that the Epic has been imported from another tool, the ID in the other tool can be indicated here.
     *
     * @return $this
     */
    public function setExternalId($externalId)
    {
        $this->container['externalId'] = $externalId;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The unique ID of the Epic.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets position
     *
     * @return int
     */
    public function getPosition()
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     *
     * @param int $position The Epic's relative position in the Epic workflow state.
     *
     * @return $this
     */
    public function setPosition($position)
    {
        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets productboardName
     *
     * @return string
     */
    public function getProductboardName()
    {
        return $this->container['productboardName'];
    }

    /**
     * Sets productboardName
     *
     * @param string $productboardName The name of the associated productboard feature.
     *
     * @return $this
     */
    public function setProductboardName($productboardName)
    {
        $this->container['productboardName'] = $productboardName;

        return $this;
    }

    /**
     * Gets deadline
     *
     * @return DateTime
     */
    public function getDeadline()
    {
        return $this->container['deadline'];
    }

    /**
     * Sets deadline
     *
     * @param DateTime $deadline The Epic's deadline.
     *
     * @return $this
     */
    public function setDeadline($deadline)
    {
        $this->container['deadline'] = $deadline;

        return $this;
    }

    /**
     * Gets stats
     *
     * @return EpicStats
     */
    public function getStats()
    {
        return $this->container['stats'];
    }

    /**
     * Sets stats
     *
     * @param EpicStats $stats stats
     *
     * @return $this
     */
    public function setStats($stats)
    {
        $this->container['stats'] = $stats;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param DateTime $createdAt The time/date the Epic was created.
     *
     * @return $this
     */
    public function setCreatedAt($createdAt)
    {
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed $value Value to be set
     *
     * @return void
     */
    #[ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
