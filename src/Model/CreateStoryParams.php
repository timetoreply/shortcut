<?php
/**
 * CreateStoryParams
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Timetoreply\Shortcut
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Shortcut API
 *
 * Shortcut API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Timetoreply\Shortcut\Model;

use \ArrayAccess;
use \Timetoreply\Shortcut\ObjectSerializer;

/**
 * CreateStoryParams Class Doc Comment
 *
 * @category Class
 * @description Request parameters for creating a story.
 * @package  Timetoreply\Shortcut
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreateStoryParams implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CreateStoryParams';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'description' => 'string',
        'archived' => 'bool',
        'storyLinks' => '\Timetoreply\Shortcut\Model\CreateStoryLinkParams[]',
        'labels' => '\Timetoreply\Shortcut\Model\CreateLabelParams[]',
        'storyType' => 'string',
        'customFields' => '\Timetoreply\Shortcut\Model\CustomFieldValueParams[]',
        'moveTo' => 'string',
        'fileIds' => 'int[]',
        'sourceTaskId' => 'int',
        'completedAtOverride' => '\DateTime',
        'name' => 'string',
        'comments' => '\Timetoreply\Shortcut\Model\CreateStoryCommentParams[]',
        'epicId' => 'int',
        'storyTemplateId' => 'string',
        'externalLinks' => 'string[]',
        'subTasks' => '\Timetoreply\Shortcut\Model\CreateStoryFromTemplateParamsSubTasksInner[]',
        'requestedById' => 'string',
        'iterationId' => 'int',
        'tasks' => '\Timetoreply\Shortcut\Model\CreateTaskParams[]',
        'startedAtOverride' => '\DateTime',
        'groupId' => 'string',
        'workflowStateId' => 'int',
        'updatedAt' => '\DateTime',
        'followerIds' => 'string[]',
        'ownerIds' => 'string[]',
        'externalId' => 'string',
        'parentStoryId' => 'int',
        'estimate' => 'int',
        'projectId' => 'int',
        'linkedFileIds' => 'int[]',
        'deadline' => '\DateTime',
        'createdAt' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'description' => null,
        'archived' => null,
        'storyLinks' => null,
        'labels' => null,
        'storyType' => null,
        'customFields' => null,
        'moveTo' => null,
        'fileIds' => 'int64',
        'sourceTaskId' => 'int64',
        'completedAtOverride' => 'date-time',
        'name' => null,
        'comments' => null,
        'epicId' => 'int64',
        'storyTemplateId' => 'uuid',
        'externalLinks' => null,
        'subTasks' => null,
        'requestedById' => 'uuid',
        'iterationId' => 'int64',
        'tasks' => null,
        'startedAtOverride' => 'date-time',
        'groupId' => 'uuid',
        'workflowStateId' => 'int64',
        'updatedAt' => 'date-time',
        'followerIds' => 'uuid',
        'ownerIds' => 'uuid',
        'externalId' => null,
        'parentStoryId' => 'int64',
        'estimate' => 'int64',
        'projectId' => 'int64',
        'linkedFileIds' => 'int64',
        'deadline' => 'date-time',
        'createdAt' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'description' => false,
        'archived' => false,
        'storyLinks' => false,
        'labels' => false,
        'storyType' => false,
        'customFields' => false,
        'moveTo' => false,
        'fileIds' => false,
        'sourceTaskId' => true,
        'completedAtOverride' => false,
        'name' => false,
        'comments' => false,
        'epicId' => true,
        'storyTemplateId' => true,
        'externalLinks' => false,
        'subTasks' => false,
        'requestedById' => false,
        'iterationId' => true,
        'tasks' => false,
        'startedAtOverride' => false,
        'groupId' => true,
        'workflowStateId' => false,
        'updatedAt' => false,
        'followerIds' => false,
        'ownerIds' => false,
        'externalId' => false,
        'parentStoryId' => true,
        'estimate' => true,
        'projectId' => true,
        'linkedFileIds' => false,
        'deadline' => true,
        'createdAt' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'description' => 'description',
        'archived' => 'archived',
        'storyLinks' => 'story_links',
        'labels' => 'labels',
        'storyType' => 'story_type',
        'customFields' => 'custom_fields',
        'moveTo' => 'move_to',
        'fileIds' => 'file_ids',
        'sourceTaskId' => 'source_task_id',
        'completedAtOverride' => 'completed_at_override',
        'name' => 'name',
        'comments' => 'comments',
        'epicId' => 'epic_id',
        'storyTemplateId' => 'story_template_id',
        'externalLinks' => 'external_links',
        'subTasks' => 'sub_tasks',
        'requestedById' => 'requested_by_id',
        'iterationId' => 'iteration_id',
        'tasks' => 'tasks',
        'startedAtOverride' => 'started_at_override',
        'groupId' => 'group_id',
        'workflowStateId' => 'workflow_state_id',
        'updatedAt' => 'updated_at',
        'followerIds' => 'follower_ids',
        'ownerIds' => 'owner_ids',
        'externalId' => 'external_id',
        'parentStoryId' => 'parent_story_id',
        'estimate' => 'estimate',
        'projectId' => 'project_id',
        'linkedFileIds' => 'linked_file_ids',
        'deadline' => 'deadline',
        'createdAt' => 'created_at'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'description' => 'setDescription',
        'archived' => 'setArchived',
        'storyLinks' => 'setStoryLinks',
        'labels' => 'setLabels',
        'storyType' => 'setStoryType',
        'customFields' => 'setCustomFields',
        'moveTo' => 'setMoveTo',
        'fileIds' => 'setFileIds',
        'sourceTaskId' => 'setSourceTaskId',
        'completedAtOverride' => 'setCompletedAtOverride',
        'name' => 'setName',
        'comments' => 'setComments',
        'epicId' => 'setEpicId',
        'storyTemplateId' => 'setStoryTemplateId',
        'externalLinks' => 'setExternalLinks',
        'subTasks' => 'setSubTasks',
        'requestedById' => 'setRequestedById',
        'iterationId' => 'setIterationId',
        'tasks' => 'setTasks',
        'startedAtOverride' => 'setStartedAtOverride',
        'groupId' => 'setGroupId',
        'workflowStateId' => 'setWorkflowStateId',
        'updatedAt' => 'setUpdatedAt',
        'followerIds' => 'setFollowerIds',
        'ownerIds' => 'setOwnerIds',
        'externalId' => 'setExternalId',
        'parentStoryId' => 'setParentStoryId',
        'estimate' => 'setEstimate',
        'projectId' => 'setProjectId',
        'linkedFileIds' => 'setLinkedFileIds',
        'deadline' => 'setDeadline',
        'createdAt' => 'setCreatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'description' => 'getDescription',
        'archived' => 'getArchived',
        'storyLinks' => 'getStoryLinks',
        'labels' => 'getLabels',
        'storyType' => 'getStoryType',
        'customFields' => 'getCustomFields',
        'moveTo' => 'getMoveTo',
        'fileIds' => 'getFileIds',
        'sourceTaskId' => 'getSourceTaskId',
        'completedAtOverride' => 'getCompletedAtOverride',
        'name' => 'getName',
        'comments' => 'getComments',
        'epicId' => 'getEpicId',
        'storyTemplateId' => 'getStoryTemplateId',
        'externalLinks' => 'getExternalLinks',
        'subTasks' => 'getSubTasks',
        'requestedById' => 'getRequestedById',
        'iterationId' => 'getIterationId',
        'tasks' => 'getTasks',
        'startedAtOverride' => 'getStartedAtOverride',
        'groupId' => 'getGroupId',
        'workflowStateId' => 'getWorkflowStateId',
        'updatedAt' => 'getUpdatedAt',
        'followerIds' => 'getFollowerIds',
        'ownerIds' => 'getOwnerIds',
        'externalId' => 'getExternalId',
        'parentStoryId' => 'getParentStoryId',
        'estimate' => 'getEstimate',
        'projectId' => 'getProjectId',
        'linkedFileIds' => 'getLinkedFileIds',
        'deadline' => 'getDeadline',
        'createdAt' => 'getCreatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STORY_TYPE_FEATURE = 'feature';
    public const STORY_TYPE_CHORE = 'chore';
    public const STORY_TYPE_BUG = 'bug';
    public const MOVE_TO_LAST = 'last';
    public const MOVE_TO_FIRST = 'first';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStoryTypeAllowableValues()
    {
        return [
            self::STORY_TYPE_FEATURE,
            self::STORY_TYPE_CHORE,
            self::STORY_TYPE_BUG,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMoveToAllowableValues()
    {
        return [
            self::MOVE_TO_LAST,
            self::MOVE_TO_FIRST,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('archived', $data ?? [], null);
        $this->setIfExists('storyLinks', $data ?? [], null);
        $this->setIfExists('labels', $data ?? [], null);
        $this->setIfExists('storyType', $data ?? [], null);
        $this->setIfExists('customFields', $data ?? [], null);
        $this->setIfExists('moveTo', $data ?? [], null);
        $this->setIfExists('fileIds', $data ?? [], null);
        $this->setIfExists('sourceTaskId', $data ?? [], null);
        $this->setIfExists('completedAtOverride', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('comments', $data ?? [], null);
        $this->setIfExists('epicId', $data ?? [], null);
        $this->setIfExists('storyTemplateId', $data ?? [], null);
        $this->setIfExists('externalLinks', $data ?? [], null);
        $this->setIfExists('subTasks', $data ?? [], null);
        $this->setIfExists('requestedById', $data ?? [], null);
        $this->setIfExists('iterationId', $data ?? [], null);
        $this->setIfExists('tasks', $data ?? [], null);
        $this->setIfExists('startedAtOverride', $data ?? [], null);
        $this->setIfExists('groupId', $data ?? [], null);
        $this->setIfExists('workflowStateId', $data ?? [], null);
        $this->setIfExists('updatedAt', $data ?? [], null);
        $this->setIfExists('followerIds', $data ?? [], null);
        $this->setIfExists('ownerIds', $data ?? [], null);
        $this->setIfExists('externalId', $data ?? [], null);
        $this->setIfExists('parentStoryId', $data ?? [], null);
        $this->setIfExists('estimate', $data ?? [], null);
        $this->setIfExists('projectId', $data ?? [], null);
        $this->setIfExists('linkedFileIds', $data ?? [], null);
        $this->setIfExists('deadline', $data ?? [], null);
        $this->setIfExists('createdAt', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 100000)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 100000.";
        }

        $allowedValues = $this->getStoryTypeAllowableValues();
        if (!is_null($this->container['storyType']) && !in_array($this->container['storyType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'storyType', must be one of '%s'",
                $this->container['storyType'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMoveToAllowableValues();
        if (!is_null($this->container['moveTo']) && !in_array($this->container['moveTo'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'moveTo', must be one of '%s'",
                $this->container['moveTo'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 512)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 512.";
        }

        if ((mb_strlen($this->container['name']) < 1)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['externalId']) && (mb_strlen($this->container['externalId']) > 1024)) {
            $invalidProperties[] = "invalid value for 'externalId', the character length must be smaller than or equal to 1024.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description The description of the story.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        if ((mb_strlen($description) > 100000)) {
            throw new \InvalidArgumentException('invalid length for $description when calling CreateStoryParams., must be smaller than or equal to 100000.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets archived
     *
     * @return bool|null
     */
    public function getArchived()
    {
        return $this->container['archived'];
    }

    /**
     * Sets archived
     *
     * @param bool|null $archived Controls the story's archived state.
     *
     * @return self
     */
    public function setArchived($archived)
    {
        if (is_null($archived)) {
            throw new \InvalidArgumentException('non-nullable archived cannot be null');
        }
        $this->container['archived'] = $archived;

        return $this;
    }

    /**
     * Gets storyLinks
     *
     * @return \Timetoreply\Shortcut\Model\CreateStoryLinkParams[]|null
     */
    public function getStoryLinks()
    {
        return $this->container['storyLinks'];
    }

    /**
     * Sets storyLinks
     *
     * @param \Timetoreply\Shortcut\Model\CreateStoryLinkParams[]|null $storyLinks An array of story links attached to the story.
     *
     * @return self
     */
    public function setStoryLinks($storyLinks)
    {
        if (is_null($storyLinks)) {
            throw new \InvalidArgumentException('non-nullable storyLinks cannot be null');
        }
        $this->container['storyLinks'] = $storyLinks;

        return $this;
    }

    /**
     * Gets labels
     *
     * @return \Timetoreply\Shortcut\Model\CreateLabelParams[]|null
     */
    public function getLabels()
    {
        return $this->container['labels'];
    }

    /**
     * Sets labels
     *
     * @param \Timetoreply\Shortcut\Model\CreateLabelParams[]|null $labels An array of labels attached to the story.
     *
     * @return self
     */
    public function setLabels($labels)
    {
        if (is_null($labels)) {
            throw new \InvalidArgumentException('non-nullable labels cannot be null');
        }
        $this->container['labels'] = $labels;

        return $this;
    }

    /**
     * Gets storyType
     *
     * @return string|null
     */
    public function getStoryType()
    {
        return $this->container['storyType'];
    }

    /**
     * Sets storyType
     *
     * @param string|null $storyType The type of story (feature, bug, chore).
     *
     * @return self
     */
    public function setStoryType($storyType)
    {
        if (is_null($storyType)) {
            throw new \InvalidArgumentException('non-nullable storyType cannot be null');
        }
        $allowedValues = $this->getStoryTypeAllowableValues();
        if (!in_array($storyType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'storyType', must be one of '%s'",
                    $storyType,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['storyType'] = $storyType;

        return $this;
    }

    /**
     * Gets customFields
     *
     * @return \Timetoreply\Shortcut\Model\CustomFieldValueParams[]|null
     */
    public function getCustomFields()
    {
        return $this->container['customFields'];
    }

    /**
     * Sets customFields
     *
     * @param \Timetoreply\Shortcut\Model\CustomFieldValueParams[]|null $customFields A map specifying a CustomField ID and CustomFieldEnumValue ID that represents an assertion of some value for a CustomField.
     *
     * @return self
     */
    public function setCustomFields($customFields)
    {
        if (is_null($customFields)) {
            throw new \InvalidArgumentException('non-nullable customFields cannot be null');
        }
        $this->container['customFields'] = $customFields;

        return $this;
    }

    /**
     * Gets moveTo
     *
     * @return string|null
     */
    public function getMoveTo()
    {
        return $this->container['moveTo'];
    }

    /**
     * Sets moveTo
     *
     * @param string|null $moveTo One of \"first\" or \"last\". This can be used to move the given story to the first or last position in the workflow state.
     *
     * @return self
     */
    public function setMoveTo($moveTo)
    {
        if (is_null($moveTo)) {
            throw new \InvalidArgumentException('non-nullable moveTo cannot be null');
        }
        $allowedValues = $this->getMoveToAllowableValues();
        if (!in_array($moveTo, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'moveTo', must be one of '%s'",
                    $moveTo,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['moveTo'] = $moveTo;

        return $this;
    }

    /**
     * Gets fileIds
     *
     * @return int[]|null
     */
    public function getFileIds()
    {
        return $this->container['fileIds'];
    }

    /**
     * Sets fileIds
     *
     * @param int[]|null $fileIds An array of IDs of files attached to the story.
     *
     * @return self
     */
    public function setFileIds($fileIds)
    {
        if (is_null($fileIds)) {
            throw new \InvalidArgumentException('non-nullable fileIds cannot be null');
        }


        $this->container['fileIds'] = $fileIds;

        return $this;
    }

    /**
     * Gets sourceTaskId
     *
     * @return int|null
     */
    public function getSourceTaskId()
    {
        return $this->container['sourceTaskId'];
    }

    /**
     * Sets sourceTaskId
     *
     * @param int|null $sourceTaskId Given this story was converted from a task in another story, this is the original task ID that was converted to this story.
     *
     * @return self
     */
    public function setSourceTaskId($sourceTaskId)
    {
        if (is_null($sourceTaskId)) {
            array_push($this->openAPINullablesSetToNull, 'sourceTaskId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sourceTaskId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sourceTaskId'] = $sourceTaskId;

        return $this;
    }

    /**
     * Gets completedAtOverride
     *
     * @return \DateTime|null
     */
    public function getCompletedAtOverride()
    {
        return $this->container['completedAtOverride'];
    }

    /**
     * Sets completedAtOverride
     *
     * @param \DateTime|null $completedAtOverride A manual override for the time/date the Story was completed.
     *
     * @return self
     */
    public function setCompletedAtOverride($completedAtOverride)
    {
        if (is_null($completedAtOverride)) {
            throw new \InvalidArgumentException('non-nullable completedAtOverride cannot be null');
        }
        $this->container['completedAtOverride'] = $completedAtOverride;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the story.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        if ((mb_strlen($name) > 512)) {
            throw new \InvalidArgumentException('invalid length for $name when calling CreateStoryParams., must be smaller than or equal to 512.');
        }
        if ((mb_strlen($name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $name when calling CreateStoryParams., must be bigger than or equal to 1.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return \Timetoreply\Shortcut\Model\CreateStoryCommentParams[]|null
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param \Timetoreply\Shortcut\Model\CreateStoryCommentParams[]|null $comments An array of comments to add to the story.
     *
     * @return self
     */
    public function setComments($comments)
    {
        if (is_null($comments)) {
            throw new \InvalidArgumentException('non-nullable comments cannot be null');
        }
        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets epicId
     *
     * @return int|null
     */
    public function getEpicId()
    {
        return $this->container['epicId'];
    }

    /**
     * Sets epicId
     *
     * @param int|null $epicId The ID of the epic the story belongs to.
     *
     * @return self
     */
    public function setEpicId($epicId)
    {
        if (is_null($epicId)) {
            array_push($this->openAPINullablesSetToNull, 'epicId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('epicId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['epicId'] = $epicId;

        return $this;
    }

    /**
     * Gets storyTemplateId
     *
     * @return string|null
     */
    public function getStoryTemplateId()
    {
        return $this->container['storyTemplateId'];
    }

    /**
     * Sets storyTemplateId
     *
     * @param string|null $storyTemplateId The id of the story template used to create this story, if applicable. This is just an association; no content from the story template is inherited by the story simply by setting this field.
     *
     * @return self
     */
    public function setStoryTemplateId($storyTemplateId)
    {
        if (is_null($storyTemplateId)) {
            array_push($this->openAPINullablesSetToNull, 'storyTemplateId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('storyTemplateId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['storyTemplateId'] = $storyTemplateId;

        return $this;
    }

    /**
     * Gets externalLinks
     *
     * @return string[]|null
     */
    public function getExternalLinks()
    {
        return $this->container['externalLinks'];
    }

    /**
     * Sets externalLinks
     *
     * @param string[]|null $externalLinks An array of External Links associated with this story.
     *
     * @return self
     */
    public function setExternalLinks($externalLinks)
    {
        if (is_null($externalLinks)) {
            throw new \InvalidArgumentException('non-nullable externalLinks cannot be null');
        }
        $this->container['externalLinks'] = $externalLinks;

        return $this;
    }

    /**
     * Gets subTasks
     *
     * @return \Timetoreply\Shortcut\Model\CreateStoryFromTemplateParamsSubTasksInner[]|null
     */
    public function getSubTasks()
    {
        return $this->container['subTasks'];
    }

    /**
     * Sets subTasks
     *
     * @param \Timetoreply\Shortcut\Model\CreateStoryFromTemplateParamsSubTasksInner[]|null $subTasks A list of either params to create a new sub-task or link an existing story as a sub-task
     *
     * @return self
     */
    public function setSubTasks($subTasks)
    {
        if (is_null($subTasks)) {
            throw new \InvalidArgumentException('non-nullable subTasks cannot be null');
        }
        $this->container['subTasks'] = $subTasks;

        return $this;
    }

    /**
     * Gets requestedById
     *
     * @return string|null
     */
    public function getRequestedById()
    {
        return $this->container['requestedById'];
    }

    /**
     * Sets requestedById
     *
     * @param string|null $requestedById The ID of the member that requested the story.
     *
     * @return self
     */
    public function setRequestedById($requestedById)
    {
        if (is_null($requestedById)) {
            throw new \InvalidArgumentException('non-nullable requestedById cannot be null');
        }
        $this->container['requestedById'] = $requestedById;

        return $this;
    }

    /**
     * Gets iterationId
     *
     * @return int|null
     */
    public function getIterationId()
    {
        return $this->container['iterationId'];
    }

    /**
     * Sets iterationId
     *
     * @param int|null $iterationId The ID of the iteration the story belongs to.
     *
     * @return self
     */
    public function setIterationId($iterationId)
    {
        if (is_null($iterationId)) {
            array_push($this->openAPINullablesSetToNull, 'iterationId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('iterationId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['iterationId'] = $iterationId;

        return $this;
    }

    /**
     * Gets tasks
     *
     * @return \Timetoreply\Shortcut\Model\CreateTaskParams[]|null
     */
    public function getTasks()
    {
        return $this->container['tasks'];
    }

    /**
     * Sets tasks
     *
     * @param \Timetoreply\Shortcut\Model\CreateTaskParams[]|null $tasks An array of tasks connected to the story.
     *
     * @return self
     */
    public function setTasks($tasks)
    {
        if (is_null($tasks)) {
            throw new \InvalidArgumentException('non-nullable tasks cannot be null');
        }
        $this->container['tasks'] = $tasks;

        return $this;
    }

    /**
     * Gets startedAtOverride
     *
     * @return \DateTime|null
     */
    public function getStartedAtOverride()
    {
        return $this->container['startedAtOverride'];
    }

    /**
     * Sets startedAtOverride
     *
     * @param \DateTime|null $startedAtOverride A manual override for the time/date the Story was started.
     *
     * @return self
     */
    public function setStartedAtOverride($startedAtOverride)
    {
        if (is_null($startedAtOverride)) {
            throw new \InvalidArgumentException('non-nullable startedAtOverride cannot be null');
        }
        $this->container['startedAtOverride'] = $startedAtOverride;

        return $this;
    }

    /**
     * Gets groupId
     *
     * @return string|null
     */
    public function getGroupId()
    {
        return $this->container['groupId'];
    }

    /**
     * Sets groupId
     *
     * @param string|null $groupId The id of the group to associate with this story.
     *
     * @return self
     */
    public function setGroupId($groupId)
    {
        if (is_null($groupId)) {
            array_push($this->openAPINullablesSetToNull, 'groupId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('groupId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['groupId'] = $groupId;

        return $this;
    }

    /**
     * Gets workflowStateId
     *
     * @return int|null
     */
    public function getWorkflowStateId()
    {
        return $this->container['workflowStateId'];
    }

    /**
     * Sets workflowStateId
     *
     * @param int|null $workflowStateId The ID of the workflow state the story will be in.
     *
     * @return self
     */
    public function setWorkflowStateId($workflowStateId)
    {
        if (is_null($workflowStateId)) {
            throw new \InvalidArgumentException('non-nullable workflowStateId cannot be null');
        }
        $this->container['workflowStateId'] = $workflowStateId;

        return $this;
    }

    /**
     * Gets updatedAt
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updatedAt'];
    }

    /**
     * Sets updatedAt
     *
     * @param \DateTime|null $updatedAt The time/date the Story was updated.
     *
     * @return self
     */
    public function setUpdatedAt($updatedAt)
    {
        if (is_null($updatedAt)) {
            throw new \InvalidArgumentException('non-nullable updatedAt cannot be null');
        }
        $this->container['updatedAt'] = $updatedAt;

        return $this;
    }

    /**
     * Gets followerIds
     *
     * @return string[]|null
     */
    public function getFollowerIds()
    {
        return $this->container['followerIds'];
    }

    /**
     * Sets followerIds
     *
     * @param string[]|null $followerIds An array of UUIDs of the followers of this story.
     *
     * @return self
     */
    public function setFollowerIds($followerIds)
    {
        if (is_null($followerIds)) {
            throw new \InvalidArgumentException('non-nullable followerIds cannot be null');
        }


        $this->container['followerIds'] = $followerIds;

        return $this;
    }

    /**
     * Gets ownerIds
     *
     * @return string[]|null
     */
    public function getOwnerIds()
    {
        return $this->container['ownerIds'];
    }

    /**
     * Sets ownerIds
     *
     * @param string[]|null $ownerIds An array of UUIDs of the owners of this story.
     *
     * @return self
     */
    public function setOwnerIds($ownerIds)
    {
        if (is_null($ownerIds)) {
            throw new \InvalidArgumentException('non-nullable ownerIds cannot be null');
        }


        $this->container['ownerIds'] = $ownerIds;

        return $this;
    }

    /**
     * Gets externalId
     *
     * @return string|null
     */
    public function getExternalId()
    {
        return $this->container['externalId'];
    }

    /**
     * Sets externalId
     *
     * @param string|null $externalId This field can be set to another unique ID. In the case that the Story has been imported from another tool, the ID in the other tool can be indicated here.
     *
     * @return self
     */
    public function setExternalId($externalId)
    {
        if (is_null($externalId)) {
            throw new \InvalidArgumentException('non-nullable externalId cannot be null');
        }
        if ((mb_strlen($externalId) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $externalId when calling CreateStoryParams., must be smaller than or equal to 1024.');
        }

        $this->container['externalId'] = $externalId;

        return $this;
    }

    /**
     * Gets parentStoryId
     *
     * @return int|null
     */
    public function getParentStoryId()
    {
        return $this->container['parentStoryId'];
    }

    /**
     * Sets parentStoryId
     *
     * @param int|null $parentStoryId The id of the parent story to associate with this story.
     *
     * @return self
     */
    public function setParentStoryId($parentStoryId)
    {
        if (is_null($parentStoryId)) {
            array_push($this->openAPINullablesSetToNull, 'parentStoryId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('parentStoryId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['parentStoryId'] = $parentStoryId;

        return $this;
    }

    /**
     * Gets estimate
     *
     * @return int|null
     */
    public function getEstimate()
    {
        return $this->container['estimate'];
    }

    /**
     * Sets estimate
     *
     * @param int|null $estimate The numeric point estimate of the story. Can also be null, which means unestimated.
     *
     * @return self
     */
    public function setEstimate($estimate)
    {
        if (is_null($estimate)) {
            array_push($this->openAPINullablesSetToNull, 'estimate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('estimate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['estimate'] = $estimate;

        return $this;
    }

    /**
     * Gets projectId
     *
     * @return int|null
     */
    public function getProjectId()
    {
        return $this->container['projectId'];
    }

    /**
     * Sets projectId
     *
     * @param int|null $projectId The ID of the project the story belongs to.
     *
     * @return self
     */
    public function setProjectId($projectId)
    {
        if (is_null($projectId)) {
            array_push($this->openAPINullablesSetToNull, 'projectId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('projectId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['projectId'] = $projectId;

        return $this;
    }

    /**
     * Gets linkedFileIds
     *
     * @return int[]|null
     */
    public function getLinkedFileIds()
    {
        return $this->container['linkedFileIds'];
    }

    /**
     * Sets linkedFileIds
     *
     * @param int[]|null $linkedFileIds An array of IDs of linked files attached to the story.
     *
     * @return self
     */
    public function setLinkedFileIds($linkedFileIds)
    {
        if (is_null($linkedFileIds)) {
            throw new \InvalidArgumentException('non-nullable linkedFileIds cannot be null');
        }


        $this->container['linkedFileIds'] = $linkedFileIds;

        return $this;
    }

    /**
     * Gets deadline
     *
     * @return \DateTime|null
     */
    public function getDeadline()
    {
        return $this->container['deadline'];
    }

    /**
     * Sets deadline
     *
     * @param \DateTime|null $deadline The due date of the story.
     *
     * @return self
     */
    public function setDeadline($deadline)
    {
        if (is_null($deadline)) {
            array_push($this->openAPINullablesSetToNull, 'deadline');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deadline', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['deadline'] = $deadline;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param \DateTime|null $createdAt The time/date the Story was created.
     *
     * @return self
     */
    public function setCreatedAt($createdAt)
    {
        if (is_null($createdAt)) {
            throw new \InvalidArgumentException('non-nullable createdAt cannot be null');
        }
        $this->container['createdAt'] = $createdAt;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


