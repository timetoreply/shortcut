<?php
/**
 * CreateStoryParams
 *
 * PHP version 5
 *
 * @category Class
 * @package  Timetoreply\Shortcut
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Shortcut API
 *
 * Shortcut API
 *
 * OpenAPI spec version: 3.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.43-SNAPSHOT
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Timetoreply\Shortcut\Model;

use ArrayAccess;
use DateTime;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Timetoreply\Shortcut\ObjectSerializer;

/**
 * CreateStoryParams Class Doc Comment
 *
 * @category Class
 * @description Request parameters for creating a story.
 * @package  Timetoreply\Shortcut
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CreateStoryParams implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;
    const STORY_TYPE_FEATURE = 'feature';
    const STORY_TYPE_CHORE = 'chore';
    const STORY_TYPE_BUG = 'bug';
    const MOVE_TO_LAST = 'last';
    const MOVE_TO_FIRST = 'first';
    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'CreateStoryParams';
    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'description' => 'string',
        'archived' => 'bool',
        'storyLinks' => '\Timetoreply\Shortcut\Model\CreateStoryLinkParams[]',
        'labels' => '\Timetoreply\Shortcut\Model\CreateLabelParams[]',
        'storyType' => 'string',
        'customFields' => '\Timetoreply\Shortcut\Model\CustomFieldValueParams[]',
        'moveTo' => 'string',
        'fileIds' => 'int[]',
        'completedAtOverride' => '\DateTime',
        'name' => 'string',
        'comments' => '\Timetoreply\Shortcut\Model\CreateStoryCommentParams[]',
        'epicId' => 'int',
        'storyTemplateId' => 'string',
        'externalLinks' => 'string[]',
        'requestedById' => 'string',
        'iterationId' => 'int',
        'tasks' => '\Timetoreply\Shortcut\Model\CreateTaskParams[]',
        'startedAtOverride' => '\DateTime',
        'groupId' => 'string',
        'workflowStateId' => 'int',
        'updatedAt' => '\DateTime',
        'followerIds' => 'string[]',
        'ownerIds' => 'string[]',
        'externalId' => 'string',
        'estimate' => 'int',
        'projectId' => 'int',
        'linkedFileIds' => 'int[]',
        'deadline' => '\DateTime',
        'createdAt' => '\DateTime'];
    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'description' => null,
        'archived' => null,
        'storyLinks' => null,
        'labels' => null,
        'storyType' => null,
        'customFields' => null,
        'moveTo' => null,
        'fileIds' => 'int64',
        'completedAtOverride' => 'date-time',
        'name' => null,
        'comments' => null,
        'epicId' => 'int64',
        'storyTemplateId' => 'uuid',
        'externalLinks' => null,
        'requestedById' => 'uuid',
        'iterationId' => 'int64',
        'tasks' => null,
        'startedAtOverride' => 'date-time',
        'groupId' => 'uuid',
        'workflowStateId' => 'int64',
        'updatedAt' => 'date-time',
        'followerIds' => 'uuid',
        'ownerIds' => 'uuid',
        'externalId' => null,
        'estimate' => 'int64',
        'projectId' => 'int64',
        'linkedFileIds' => 'int64',
        'deadline' => 'date-time',
        'createdAt' => 'date-time'];
    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'description' => 'description',
        'archived' => 'archived',
        'storyLinks' => 'story_links',
        'labels' => 'labels',
        'storyType' => 'story_type',
        'customFields' => 'custom_fields',
        'moveTo' => 'move_to',
        'fileIds' => 'file_ids',
        'completedAtOverride' => 'completed_at_override',
        'name' => 'name',
        'comments' => 'comments',
        'epicId' => 'epic_id',
        'storyTemplateId' => 'story_template_id',
        'externalLinks' => 'external_links',
        'requestedById' => 'requested_by_id',
        'iterationId' => 'iteration_id',
        'tasks' => 'tasks',
        'startedAtOverride' => 'started_at_override',
        'groupId' => 'group_id',
        'workflowStateId' => 'workflow_state_id',
        'updatedAt' => 'updated_at',
        'followerIds' => 'follower_ids',
        'ownerIds' => 'owner_ids',
        'externalId' => 'external_id',
        'estimate' => 'estimate',
        'projectId' => 'project_id',
        'linkedFileIds' => 'linked_file_ids',
        'deadline' => 'deadline',
        'createdAt' => 'created_at'];
    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'description' => 'setDescription',
        'archived' => 'setArchived',
        'storyLinks' => 'setStoryLinks',
        'labels' => 'setLabels',
        'storyType' => 'setStoryType',
        'customFields' => 'setCustomFields',
        'moveTo' => 'setMoveTo',
        'fileIds' => 'setFileIds',
        'completedAtOverride' => 'setCompletedAtOverride',
        'name' => 'setName',
        'comments' => 'setComments',
        'epicId' => 'setEpicId',
        'storyTemplateId' => 'setStoryTemplateId',
        'externalLinks' => 'setExternalLinks',
        'requestedById' => 'setRequestedById',
        'iterationId' => 'setIterationId',
        'tasks' => 'setTasks',
        'startedAtOverride' => 'setStartedAtOverride',
        'groupId' => 'setGroupId',
        'workflowStateId' => 'setWorkflowStateId',
        'updatedAt' => 'setUpdatedAt',
        'followerIds' => 'setFollowerIds',
        'ownerIds' => 'setOwnerIds',
        'externalId' => 'setExternalId',
        'estimate' => 'setEstimate',
        'projectId' => 'setProjectId',
        'linkedFileIds' => 'setLinkedFileIds',
        'deadline' => 'setDeadline',
        'createdAt' => 'setCreatedAt'];
    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'description' => 'getDescription',
        'archived' => 'getArchived',
        'storyLinks' => 'getStoryLinks',
        'labels' => 'getLabels',
        'storyType' => 'getStoryType',
        'customFields' => 'getCustomFields',
        'moveTo' => 'getMoveTo',
        'fileIds' => 'getFileIds',
        'completedAtOverride' => 'getCompletedAtOverride',
        'name' => 'getName',
        'comments' => 'getComments',
        'epicId' => 'getEpicId',
        'storyTemplateId' => 'getStoryTemplateId',
        'externalLinks' => 'getExternalLinks',
        'requestedById' => 'getRequestedById',
        'iterationId' => 'getIterationId',
        'tasks' => 'getTasks',
        'startedAtOverride' => 'getStartedAtOverride',
        'groupId' => 'getGroupId',
        'workflowStateId' => 'getWorkflowStateId',
        'updatedAt' => 'getUpdatedAt',
        'followerIds' => 'getFollowerIds',
        'ownerIds' => 'getOwnerIds',
        'externalId' => 'getExternalId',
        'estimate' => 'getEstimate',
        'projectId' => 'getProjectId',
        'linkedFileIds' => 'getLinkedFileIds',
        'deadline' => 'getDeadline',
        'createdAt' => 'getCreatedAt'];
    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['archived'] = isset($data['archived']) ? $data['archived'] : null;
        $this->container['storyLinks'] = isset($data['storyLinks']) ? $data['storyLinks'] : null;
        $this->container['labels'] = isset($data['labels']) ? $data['labels'] : null;
        $this->container['storyType'] = isset($data['storyType']) ? $data['storyType'] : null;
        $this->container['customFields'] = isset($data['customFields']) ? $data['customFields'] : null;
        $this->container['moveTo'] = isset($data['moveTo']) ? $data['moveTo'] : null;
        $this->container['fileIds'] = isset($data['fileIds']) ? $data['fileIds'] : null;
        $this->container['completedAtOverride'] = isset($data['completedAtOverride']) ? $data['completedAtOverride'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['comments'] = isset($data['comments']) ? $data['comments'] : null;
        $this->container['epicId'] = isset($data['epicId']) ? $data['epicId'] : null;
        $this->container['storyTemplateId'] = isset($data['storyTemplateId']) ? $data['storyTemplateId'] : null;
        $this->container['externalLinks'] = isset($data['externalLinks']) ? $data['externalLinks'] : null;
        $this->container['requestedById'] = isset($data['requestedById']) ? $data['requestedById'] : null;
        $this->container['iterationId'] = isset($data['iterationId']) ? $data['iterationId'] : null;
        $this->container['tasks'] = isset($data['tasks']) ? $data['tasks'] : null;
        $this->container['startedAtOverride'] = isset($data['startedAtOverride']) ? $data['startedAtOverride'] : null;
        $this->container['groupId'] = isset($data['groupId']) ? $data['groupId'] : null;
        $this->container['workflowStateId'] = isset($data['workflowStateId']) ? $data['workflowStateId'] : null;
        $this->container['updatedAt'] = isset($data['updatedAt']) ? $data['updatedAt'] : null;
        $this->container['followerIds'] = isset($data['followerIds']) ? $data['followerIds'] : null;
        $this->container['ownerIds'] = isset($data['ownerIds']) ? $data['ownerIds'] : null;
        $this->container['externalId'] = isset($data['externalId']) ? $data['externalId'] : null;
        $this->container['estimate'] = isset($data['estimate']) ? $data['estimate'] : null;
        $this->container['projectId'] = isset($data['projectId']) ? $data['projectId'] : null;
        $this->container['linkedFileIds'] = isset($data['linkedFileIds']) ? $data['linkedFileIds'] : null;
        $this->container['deadline'] = isset($data['deadline']) ? $data['deadline'] : null;
        $this->container['createdAt'] = isset($data['createdAt']) ? $data['createdAt'] : null;
    }

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStoryTypeAllowableValues();
        if (!is_null($this->container['storyType']) && !in_array($this->container['storyType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'storyType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMoveToAllowableValues();
        if (!is_null($this->container['moveTo']) && !in_array($this->container['moveTo'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'moveTo', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStoryTypeAllowableValues()
    {
        return [
            self::STORY_TYPE_FEATURE,
            self::STORY_TYPE_CHORE,
            self::STORY_TYPE_BUG,];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMoveToAllowableValues()
    {
        return [
            self::MOVE_TO_LAST,
            self::MOVE_TO_FIRST,];
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description The description of the story.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets archived
     *
     * @return bool
     */
    public function getArchived()
    {
        return $this->container['archived'];
    }

    /**
     * Sets archived
     *
     * @param bool $archived Controls the story's archived state.
     *
     * @return $this
     */
    public function setArchived($archived)
    {
        $this->container['archived'] = $archived;

        return $this;
    }

    /**
     * Gets storyLinks
     *
     * @return CreateStoryLinkParams[]
     */
    public function getStoryLinks()
    {
        return $this->container['storyLinks'];
    }

    /**
     * Sets storyLinks
     *
     * @param CreateStoryLinkParams[] $storyLinks An array of story links attached to the story.
     *
     * @return $this
     */
    public function setStoryLinks($storyLinks)
    {
        $this->container['storyLinks'] = $storyLinks;

        return $this;
    }

    /**
     * Gets labels
     *
     * @return CreateLabelParams[]
     */
    public function getLabels()
    {
        return $this->container['labels'];
    }

    /**
     * Sets labels
     *
     * @param CreateLabelParams[] $labels An array of labels attached to the story.
     *
     * @return $this
     */
    public function setLabels($labels)
    {
        $this->container['labels'] = $labels;

        return $this;
    }

    /**
     * Gets storyType
     *
     * @return string
     */
    public function getStoryType()
    {
        return $this->container['storyType'];
    }

    /**
     * Sets storyType
     *
     * @param string $storyType The type of story (feature, bug, chore).
     *
     * @return $this
     */
    public function setStoryType($storyType)
    {
        $allowedValues = $this->getStoryTypeAllowableValues();
        if (!is_null($storyType) && !in_array($storyType, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value for 'storyType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['storyType'] = $storyType;

        return $this;
    }

    /**
     * Gets customFields
     *
     * @return CustomFieldValueParams[]
     */
    public function getCustomFields()
    {
        return $this->container['customFields'];
    }

    /**
     * Sets customFields
     *
     * @param CustomFieldValueParams[] $customFields A map specifying a CustomField ID and CustomFieldEnumValue ID that represents an assertion of some value for a CustomField.
     *
     * @return $this
     */
    public function setCustomFields($customFields)
    {
        $this->container['customFields'] = $customFields;

        return $this;
    }

    /**
     * Gets moveTo
     *
     * @return string
     */
    public function getMoveTo()
    {
        return $this->container['moveTo'];
    }

    /**
     * Sets moveTo
     *
     * @param string $moveTo One of \"first\" or \"last\". This can be used to move the given story to the first or last position in the workflow state.
     *
     * @return $this
     */
    public function setMoveTo($moveTo)
    {
        $allowedValues = $this->getMoveToAllowableValues();
        if (!is_null($moveTo) && !in_array($moveTo, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value for 'moveTo', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['moveTo'] = $moveTo;

        return $this;
    }

    /**
     * Gets fileIds
     *
     * @return int[]
     */
    public function getFileIds()
    {
        return $this->container['fileIds'];
    }

    /**
     * Sets fileIds
     *
     * @param int[] $fileIds An array of IDs of files attached to the story.
     *
     * @return $this
     */
    public function setFileIds($fileIds)
    {
        $this->container['fileIds'] = $fileIds;

        return $this;
    }

    /**
     * Gets completedAtOverride
     *
     * @return DateTime
     */
    public function getCompletedAtOverride()
    {
        return $this->container['completedAtOverride'];
    }

    /**
     * Sets completedAtOverride
     *
     * @param DateTime $completedAtOverride A manual override for the time/date the Story was completed.
     *
     * @return $this
     */
    public function setCompletedAtOverride($completedAtOverride)
    {
        $this->container['completedAtOverride'] = $completedAtOverride;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the story.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return CreateStoryCommentParams[]
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param CreateStoryCommentParams[] $comments An array of comments to add to the story.
     *
     * @return $this
     */
    public function setComments($comments)
    {
        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets epicId
     *
     * @return int
     */
    public function getEpicId()
    {
        return $this->container['epicId'];
    }

    /**
     * Sets epicId
     *
     * @param int $epicId The ID of the epic the story belongs to.
     *
     * @return $this
     */
    public function setEpicId($epicId)
    {
        $this->container['epicId'] = $epicId;

        return $this;
    }

    /**
     * Gets storyTemplateId
     *
     * @return string
     */
    public function getStoryTemplateId()
    {
        return $this->container['storyTemplateId'];
    }

    /**
     * Sets storyTemplateId
     *
     * @param string $storyTemplateId The id of the story template used to create this story, if applicable. This is just an association; no content from the story template is inherited by the story simply by setting this field.
     *
     * @return $this
     */
    public function setStoryTemplateId($storyTemplateId)
    {
        $this->container['storyTemplateId'] = $storyTemplateId;

        return $this;
    }

    /**
     * Gets externalLinks
     *
     * @return string[]
     */
    public function getExternalLinks()
    {
        return $this->container['externalLinks'];
    }

    /**
     * Sets externalLinks
     *
     * @param string[] $externalLinks An array of External Links associated with this story.
     *
     * @return $this
     */
    public function setExternalLinks($externalLinks)
    {
        $this->container['externalLinks'] = $externalLinks;

        return $this;
    }

    /**
     * Gets requestedById
     *
     * @return string
     */
    public function getRequestedById()
    {
        return $this->container['requestedById'];
    }

    /**
     * Sets requestedById
     *
     * @param string $requestedById The ID of the member that requested the story.
     *
     * @return $this
     */
    public function setRequestedById($requestedById)
    {
        $this->container['requestedById'] = $requestedById;

        return $this;
    }

    /**
     * Gets iterationId
     *
     * @return int
     */
    public function getIterationId()
    {
        return $this->container['iterationId'];
    }

    /**
     * Sets iterationId
     *
     * @param int $iterationId The ID of the iteration the story belongs to.
     *
     * @return $this
     */
    public function setIterationId($iterationId)
    {
        $this->container['iterationId'] = $iterationId;

        return $this;
    }

    /**
     * Gets tasks
     *
     * @return CreateTaskParams[]
     */
    public function getTasks()
    {
        return $this->container['tasks'];
    }

    /**
     * Sets tasks
     *
     * @param CreateTaskParams[] $tasks An array of tasks connected to the story.
     *
     * @return $this
     */
    public function setTasks($tasks)
    {
        $this->container['tasks'] = $tasks;

        return $this;
    }

    /**
     * Gets startedAtOverride
     *
     * @return DateTime
     */
    public function getStartedAtOverride()
    {
        return $this->container['startedAtOverride'];
    }

    /**
     * Sets startedAtOverride
     *
     * @param DateTime $startedAtOverride A manual override for the time/date the Story was started.
     *
     * @return $this
     */
    public function setStartedAtOverride($startedAtOverride)
    {
        $this->container['startedAtOverride'] = $startedAtOverride;

        return $this;
    }

    /**
     * Gets groupId
     *
     * @return string
     */
    public function getGroupId()
    {
        return $this->container['groupId'];
    }

    /**
     * Sets groupId
     *
     * @param string $groupId The id of the group to associate with this story.
     *
     * @return $this
     */
    public function setGroupId($groupId)
    {
        $this->container['groupId'] = $groupId;

        return $this;
    }

    /**
     * Gets workflowStateId
     *
     * @return int
     */
    public function getWorkflowStateId()
    {
        return $this->container['workflowStateId'];
    }

    /**
     * Sets workflowStateId
     *
     * @param int $workflowStateId The ID of the workflow state the story will be in.
     *
     * @return $this
     */
    public function setWorkflowStateId($workflowStateId)
    {
        $this->container['workflowStateId'] = $workflowStateId;

        return $this;
    }

    /**
     * Gets updatedAt
     *
     * @return DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updatedAt'];
    }

    /**
     * Sets updatedAt
     *
     * @param DateTime $updatedAt The time/date the Story was updated.
     *
     * @return $this
     */
    public function setUpdatedAt($updatedAt)
    {
        $this->container['updatedAt'] = $updatedAt;

        return $this;
    }

    /**
     * Gets followerIds
     *
     * @return string[]
     */
    public function getFollowerIds()
    {
        return $this->container['followerIds'];
    }

    /**
     * Sets followerIds
     *
     * @param string[] $followerIds An array of UUIDs of the followers of this story.
     *
     * @return $this
     */
    public function setFollowerIds($followerIds)
    {
        $this->container['followerIds'] = $followerIds;

        return $this;
    }

    /**
     * Gets ownerIds
     *
     * @return string[]
     */
    public function getOwnerIds()
    {
        return $this->container['ownerIds'];
    }

    /**
     * Sets ownerIds
     *
     * @param string[] $ownerIds An array of UUIDs of the owners of this story.
     *
     * @return $this
     */
    public function setOwnerIds($ownerIds)
    {
        $this->container['ownerIds'] = $ownerIds;

        return $this;
    }

    /**
     * Gets externalId
     *
     * @return string
     */
    public function getExternalId()
    {
        return $this->container['externalId'];
    }

    /**
     * Sets externalId
     *
     * @param string $externalId This field can be set to another unique ID. In the case that the Story has been imported from another tool, the ID in the other tool can be indicated here.
     *
     * @return $this
     */
    public function setExternalId($externalId)
    {
        $this->container['externalId'] = $externalId;

        return $this;
    }

    /**
     * Gets estimate
     *
     * @return int
     */
    public function getEstimate()
    {
        return $this->container['estimate'];
    }

    /**
     * Sets estimate
     *
     * @param int $estimate The numeric point estimate of the story. Can also be null, which means unestimated.
     *
     * @return $this
     */
    public function setEstimate($estimate)
    {
        $this->container['estimate'] = $estimate;

        return $this;
    }

    /**
     * Gets projectId
     *
     * @return int
     */
    public function getProjectId()
    {
        return $this->container['projectId'];
    }

    /**
     * Sets projectId
     *
     * @param int $projectId The ID of the project the story belongs to.
     *
     * @return $this
     */
    public function setProjectId($projectId)
    {
        $this->container['projectId'] = $projectId;

        return $this;
    }

    /**
     * Gets linkedFileIds
     *
     * @return int[]
     */
    public function getLinkedFileIds()
    {
        return $this->container['linkedFileIds'];
    }

    /**
     * Sets linkedFileIds
     *
     * @param int[] $linkedFileIds An array of IDs of linked files attached to the story.
     *
     * @return $this
     */
    public function setLinkedFileIds($linkedFileIds)
    {
        $this->container['linkedFileIds'] = $linkedFileIds;

        return $this;
    }

    /**
     * Gets deadline
     *
     * @return DateTime
     */
    public function getDeadline()
    {
        return $this->container['deadline'];
    }

    /**
     * Sets deadline
     *
     * @param DateTime $deadline The due date of the story.
     *
     * @return $this
     */
    public function setDeadline($deadline)
    {
        $this->container['deadline'] = $deadline;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param DateTime $createdAt The time/date the Story was created.
     *
     * @return $this
     */
    public function setCreatedAt($createdAt)
    {
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed $value Value to be set
     *
     * @return void
     */
    #[ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
