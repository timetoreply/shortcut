<?php
/**
 * Project
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Timetoreply\Shortcut
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Shortcut API
 *
 * Shortcut API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Timetoreply\Shortcut\Model;

use \ArrayAccess;
use \Timetoreply\Shortcut\ObjectSerializer;

/**
 * Project Class Doc Comment
 *
 * @category Class
 * @description Projects typically map to teams (such as Frontend, Backend, Mobile, Devops, etc) but can represent any open-ended product, component, or initiative.
 * @package  Timetoreply\Shortcut
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Project implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Project';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'appUrl' => 'string',
        'description' => 'string',
        'archived' => 'bool',
        'entityType' => 'string',
        'daysToThermometer' => 'int',
        'color' => 'string',
        'workflowId' => 'int',
        'name' => 'string',
        'globalId' => 'string',
        'startTime' => '\DateTime',
        'updatedAt' => '\DateTime',
        'followerIds' => 'string[]',
        'externalId' => 'string',
        'id' => 'int',
        'showThermometer' => 'bool',
        'teamId' => 'int',
        'iterationLength' => 'int',
        'abbreviation' => 'string',
        'stats' => '\Timetoreply\Shortcut\Model\ProjectStats',
        'createdAt' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'appUrl' => null,
        'description' => null,
        'archived' => null,
        'entityType' => null,
        'daysToThermometer' => 'int64',
        'color' => 'css-color',
        'workflowId' => 'int64',
        'name' => null,
        'globalId' => null,
        'startTime' => 'date-time',
        'updatedAt' => 'date-time',
        'followerIds' => 'uuid',
        'externalId' => null,
        'id' => 'int64',
        'showThermometer' => null,
        'teamId' => 'int64',
        'iterationLength' => 'int64',
        'abbreviation' => null,
        'stats' => null,
        'createdAt' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'appUrl' => false,
        'description' => true,
        'archived' => false,
        'entityType' => false,
        'daysToThermometer' => false,
        'color' => true,
        'workflowId' => false,
        'name' => false,
        'globalId' => false,
        'startTime' => false,
        'updatedAt' => true,
        'followerIds' => false,
        'externalId' => true,
        'id' => false,
        'showThermometer' => false,
        'teamId' => false,
        'iterationLength' => false,
        'abbreviation' => true,
        'stats' => false,
        'createdAt' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'appUrl' => 'app_url',
        'description' => 'description',
        'archived' => 'archived',
        'entityType' => 'entity_type',
        'daysToThermometer' => 'days_to_thermometer',
        'color' => 'color',
        'workflowId' => 'workflow_id',
        'name' => 'name',
        'globalId' => 'global_id',
        'startTime' => 'start_time',
        'updatedAt' => 'updated_at',
        'followerIds' => 'follower_ids',
        'externalId' => 'external_id',
        'id' => 'id',
        'showThermometer' => 'show_thermometer',
        'teamId' => 'team_id',
        'iterationLength' => 'iteration_length',
        'abbreviation' => 'abbreviation',
        'stats' => 'stats',
        'createdAt' => 'created_at'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'appUrl' => 'setAppUrl',
        'description' => 'setDescription',
        'archived' => 'setArchived',
        'entityType' => 'setEntityType',
        'daysToThermometer' => 'setDaysToThermometer',
        'color' => 'setColor',
        'workflowId' => 'setWorkflowId',
        'name' => 'setName',
        'globalId' => 'setGlobalId',
        'startTime' => 'setStartTime',
        'updatedAt' => 'setUpdatedAt',
        'followerIds' => 'setFollowerIds',
        'externalId' => 'setExternalId',
        'id' => 'setId',
        'showThermometer' => 'setShowThermometer',
        'teamId' => 'setTeamId',
        'iterationLength' => 'setIterationLength',
        'abbreviation' => 'setAbbreviation',
        'stats' => 'setStats',
        'createdAt' => 'setCreatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'appUrl' => 'getAppUrl',
        'description' => 'getDescription',
        'archived' => 'getArchived',
        'entityType' => 'getEntityType',
        'daysToThermometer' => 'getDaysToThermometer',
        'color' => 'getColor',
        'workflowId' => 'getWorkflowId',
        'name' => 'getName',
        'globalId' => 'getGlobalId',
        'startTime' => 'getStartTime',
        'updatedAt' => 'getUpdatedAt',
        'followerIds' => 'getFollowerIds',
        'externalId' => 'getExternalId',
        'id' => 'getId',
        'showThermometer' => 'getShowThermometer',
        'teamId' => 'getTeamId',
        'iterationLength' => 'getIterationLength',
        'abbreviation' => 'getAbbreviation',
        'stats' => 'getStats',
        'createdAt' => 'getCreatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('appUrl', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('archived', $data ?? [], null);
        $this->setIfExists('entityType', $data ?? [], null);
        $this->setIfExists('daysToThermometer', $data ?? [], null);
        $this->setIfExists('color', $data ?? [], null);
        $this->setIfExists('workflowId', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('globalId', $data ?? [], null);
        $this->setIfExists('startTime', $data ?? [], null);
        $this->setIfExists('updatedAt', $data ?? [], null);
        $this->setIfExists('followerIds', $data ?? [], null);
        $this->setIfExists('externalId', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('showThermometer', $data ?? [], null);
        $this->setIfExists('teamId', $data ?? [], null);
        $this->setIfExists('iterationLength', $data ?? [], null);
        $this->setIfExists('abbreviation', $data ?? [], null);
        $this->setIfExists('stats', $data ?? [], null);
        $this->setIfExists('createdAt', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['appUrl'] === null) {
            $invalidProperties[] = "'appUrl' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ($this->container['archived'] === null) {
            $invalidProperties[] = "'archived' can't be null";
        }
        if ($this->container['entityType'] === null) {
            $invalidProperties[] = "'entityType' can't be null";
        }
        if ($this->container['daysToThermometer'] === null) {
            $invalidProperties[] = "'daysToThermometer' can't be null";
        }
        if ($this->container['color'] === null) {
            $invalidProperties[] = "'color' can't be null";
        }
        if ((mb_strlen($this->container['color']) < 1)) {
            $invalidProperties[] = "invalid value for 'color', the character length must be bigger than or equal to 1.";
        }

        if (!preg_match("/^#[a-fA-F0-9]{6}$/", $this->container['color'])) {
            $invalidProperties[] = "invalid value for 'color', must be conform to the pattern /^#[a-fA-F0-9]{6}$/.";
        }

        if ($this->container['workflowId'] === null) {
            $invalidProperties[] = "'workflowId' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['globalId'] === null) {
            $invalidProperties[] = "'globalId' can't be null";
        }
        if ($this->container['startTime'] === null) {
            $invalidProperties[] = "'startTime' can't be null";
        }
        if ($this->container['updatedAt'] === null) {
            $invalidProperties[] = "'updatedAt' can't be null";
        }
        if ($this->container['followerIds'] === null) {
            $invalidProperties[] = "'followerIds' can't be null";
        }
        if ($this->container['externalId'] === null) {
            $invalidProperties[] = "'externalId' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['showThermometer'] === null) {
            $invalidProperties[] = "'showThermometer' can't be null";
        }
        if ($this->container['teamId'] === null) {
            $invalidProperties[] = "'teamId' can't be null";
        }
        if ($this->container['iterationLength'] === null) {
            $invalidProperties[] = "'iterationLength' can't be null";
        }
        if ($this->container['abbreviation'] === null) {
            $invalidProperties[] = "'abbreviation' can't be null";
        }
        if ($this->container['stats'] === null) {
            $invalidProperties[] = "'stats' can't be null";
        }
        if ($this->container['createdAt'] === null) {
            $invalidProperties[] = "'createdAt' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets appUrl
     *
     * @return string
     */
    public function getAppUrl()
    {
        return $this->container['appUrl'];
    }

    /**
     * Sets appUrl
     *
     * @param string $appUrl The Shortcut application url for the Project.
     *
     * @return self
     */
    public function setAppUrl($appUrl)
    {
        if (is_null($appUrl)) {
            throw new \InvalidArgumentException('non-nullable appUrl cannot be null');
        }
        $this->container['appUrl'] = $appUrl;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description The description of the Project.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets archived
     *
     * @return bool
     */
    public function getArchived()
    {
        return $this->container['archived'];
    }

    /**
     * Sets archived
     *
     * @param bool $archived True/false boolean indicating whether the Project is in an Archived state.
     *
     * @return self
     */
    public function setArchived($archived)
    {
        if (is_null($archived)) {
            throw new \InvalidArgumentException('non-nullable archived cannot be null');
        }
        $this->container['archived'] = $archived;

        return $this;
    }

    /**
     * Gets entityType
     *
     * @return string
     */
    public function getEntityType()
    {
        return $this->container['entityType'];
    }

    /**
     * Sets entityType
     *
     * @param string $entityType A string description of this resource.
     *
     * @return self
     */
    public function setEntityType($entityType)
    {
        if (is_null($entityType)) {
            throw new \InvalidArgumentException('non-nullable entityType cannot be null');
        }
        $this->container['entityType'] = $entityType;

        return $this;
    }

    /**
     * Gets daysToThermometer
     *
     * @return int
     */
    public function getDaysToThermometer()
    {
        return $this->container['daysToThermometer'];
    }

    /**
     * Sets daysToThermometer
     *
     * @param int $daysToThermometer The number of days before the thermometer appears in the Story summary.
     *
     * @return self
     */
    public function setDaysToThermometer($daysToThermometer)
    {
        if (is_null($daysToThermometer)) {
            throw new \InvalidArgumentException('non-nullable daysToThermometer cannot be null');
        }
        $this->container['daysToThermometer'] = $daysToThermometer;

        return $this;
    }

    /**
     * Gets color
     *
     * @return string
     */
    public function getColor()
    {
        return $this->container['color'];
    }

    /**
     * Sets color
     *
     * @param string $color The color associated with the Project in the Shortcut member interface.
     *
     * @return self
     */
    public function setColor($color)
    {
        if (is_null($color)) {
            array_push($this->openAPINullablesSetToNull, 'color');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('color', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($color) && (mb_strlen($color) < 1)) {
            throw new \InvalidArgumentException('invalid length for $color when calling Project., must be bigger than or equal to 1.');
        }
        if (!is_null($color) && (!preg_match("/^#[a-fA-F0-9]{6}$/", ObjectSerializer::toString($color)))) {
            throw new \InvalidArgumentException("invalid value for \$color when calling Project., must conform to the pattern /^#[a-fA-F0-9]{6}$/.");
        }

        $this->container['color'] = $color;

        return $this;
    }

    /**
     * Gets workflowId
     *
     * @return int
     */
    public function getWorkflowId()
    {
        return $this->container['workflowId'];
    }

    /**
     * Sets workflowId
     *
     * @param int $workflowId The ID of the workflow the project belongs to.
     *
     * @return self
     */
    public function setWorkflowId($workflowId)
    {
        if (is_null($workflowId)) {
            throw new \InvalidArgumentException('non-nullable workflowId cannot be null');
        }
        $this->container['workflowId'] = $workflowId;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the Project
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets globalId
     *
     * @return string
     */
    public function getGlobalId()
    {
        return $this->container['globalId'];
    }

    /**
     * Sets globalId
     *
     * @param string $globalId The Global ID of the Project.
     *
     * @return self
     */
    public function setGlobalId($globalId)
    {
        if (is_null($globalId)) {
            throw new \InvalidArgumentException('non-nullable globalId cannot be null');
        }
        $this->container['globalId'] = $globalId;

        return $this;
    }

    /**
     * Gets startTime
     *
     * @return \DateTime
     */
    public function getStartTime()
    {
        return $this->container['startTime'];
    }

    /**
     * Sets startTime
     *
     * @param \DateTime $startTime The date at which the Project was started.
     *
     * @return self
     */
    public function setStartTime($startTime)
    {
        if (is_null($startTime)) {
            throw new \InvalidArgumentException('non-nullable startTime cannot be null');
        }
        $this->container['startTime'] = $startTime;

        return $this;
    }

    /**
     * Gets updatedAt
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updatedAt'];
    }

    /**
     * Sets updatedAt
     *
     * @param \DateTime $updatedAt The time/date that the Project was last updated.
     *
     * @return self
     */
    public function setUpdatedAt($updatedAt)
    {
        if (is_null($updatedAt)) {
            array_push($this->openAPINullablesSetToNull, 'updatedAt');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('updatedAt', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['updatedAt'] = $updatedAt;

        return $this;
    }

    /**
     * Gets followerIds
     *
     * @return string[]
     */
    public function getFollowerIds()
    {
        return $this->container['followerIds'];
    }

    /**
     * Sets followerIds
     *
     * @param string[] $followerIds An array of UUIDs for any Members listed as Followers.
     *
     * @return self
     */
    public function setFollowerIds($followerIds)
    {
        if (is_null($followerIds)) {
            throw new \InvalidArgumentException('non-nullable followerIds cannot be null');
        }
        $this->container['followerIds'] = $followerIds;

        return $this;
    }

    /**
     * Gets externalId
     *
     * @return string
     */
    public function getExternalId()
    {
        return $this->container['externalId'];
    }

    /**
     * Sets externalId
     *
     * @param string $externalId This field can be set to another unique ID. In the case that the Project has been imported from another tool, the ID in the other tool can be indicated here.
     *
     * @return self
     */
    public function setExternalId($externalId)
    {
        if (is_null($externalId)) {
            array_push($this->openAPINullablesSetToNull, 'externalId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('externalId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['externalId'] = $externalId;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The unique ID of the Project.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets showThermometer
     *
     * @return bool
     */
    public function getShowThermometer()
    {
        return $this->container['showThermometer'];
    }

    /**
     * Sets showThermometer
     *
     * @param bool $showThermometer Configuration to enable or disable thermometers in the Story summary.
     *
     * @return self
     */
    public function setShowThermometer($showThermometer)
    {
        if (is_null($showThermometer)) {
            throw new \InvalidArgumentException('non-nullable showThermometer cannot be null');
        }
        $this->container['showThermometer'] = $showThermometer;

        return $this;
    }

    /**
     * Gets teamId
     *
     * @return int
     */
    public function getTeamId()
    {
        return $this->container['teamId'];
    }

    /**
     * Sets teamId
     *
     * @param int $teamId The ID of the team the project belongs to.
     *
     * @return self
     */
    public function setTeamId($teamId)
    {
        if (is_null($teamId)) {
            throw new \InvalidArgumentException('non-nullable teamId cannot be null');
        }
        $this->container['teamId'] = $teamId;

        return $this;
    }

    /**
     * Gets iterationLength
     *
     * @return int
     */
    public function getIterationLength()
    {
        return $this->container['iterationLength'];
    }

    /**
     * Sets iterationLength
     *
     * @param int $iterationLength The number of weeks per iteration in this Project.
     *
     * @return self
     */
    public function setIterationLength($iterationLength)
    {
        if (is_null($iterationLength)) {
            throw new \InvalidArgumentException('non-nullable iterationLength cannot be null');
        }
        $this->container['iterationLength'] = $iterationLength;

        return $this;
    }

    /**
     * Gets abbreviation
     *
     * @return string
     */
    public function getAbbreviation()
    {
        return $this->container['abbreviation'];
    }

    /**
     * Sets abbreviation
     *
     * @param string $abbreviation The Project abbreviation used in Story summaries. Should be kept to 3 characters at most.
     *
     * @return self
     */
    public function setAbbreviation($abbreviation)
    {
        if (is_null($abbreviation)) {
            array_push($this->openAPINullablesSetToNull, 'abbreviation');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('abbreviation', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['abbreviation'] = $abbreviation;

        return $this;
    }

    /**
     * Gets stats
     *
     * @return \Timetoreply\Shortcut\Model\ProjectStats
     */
    public function getStats()
    {
        return $this->container['stats'];
    }

    /**
     * Sets stats
     *
     * @param \Timetoreply\Shortcut\Model\ProjectStats $stats stats
     *
     * @return self
     */
    public function setStats($stats)
    {
        if (is_null($stats)) {
            throw new \InvalidArgumentException('non-nullable stats cannot be null');
        }
        $this->container['stats'] = $stats;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param \DateTime $createdAt The time/date that the Project was created.
     *
     * @return self
     */
    public function setCreatedAt($createdAt)
    {
        if (is_null($createdAt)) {
            array_push($this->openAPINullablesSetToNull, 'createdAt');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('createdAt', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['createdAt'] = $createdAt;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


