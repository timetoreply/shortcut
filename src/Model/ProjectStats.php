<?php
/**
 * ProjectStats
 *
 * PHP version 5
 *
 * @category Class
 * @package  Timetoreply\Shortcut
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Shortcut API
 *
 * Shortcut API
 *
 * OpenAPI spec version: 3.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.43-SNAPSHOT
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Timetoreply\Shortcut\Model;

use ArrayAccess;
use ReturnTypeWillChange;
use Timetoreply\Shortcut\ObjectSerializer;

/**
 * ProjectStats Class Doc Comment
 *
 * @category Class
 * @description A group of calculated values for this Project.
 * @package  Timetoreply\Shortcut
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProjectStats implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'ProjectStats';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'numStories' => 'int',
        'numPoints' => 'int',
        'numRelatedDocuments' => 'int'];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'numStories' => 'int64',
        'numPoints' => 'int64',
        'numRelatedDocuments' => 'int64'];
    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'numStories' => 'num_stories',
        'numPoints' => 'num_points',
        'numRelatedDocuments' => 'num_related_documents'];
    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'numStories' => 'setNumStories',
        'numPoints' => 'setNumPoints',
        'numRelatedDocuments' => 'setNumRelatedDocuments'];
    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'numStories' => 'getNumStories',
        'numPoints' => 'getNumPoints',
        'numRelatedDocuments' => 'getNumRelatedDocuments'];
    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['numStories'] = isset($data['numStories']) ? $data['numStories'] : null;
        $this->container['numPoints'] = isset($data['numPoints']) ? $data['numPoints'] : null;
        $this->container['numRelatedDocuments'] = isset($data['numRelatedDocuments']) ? $data['numRelatedDocuments'] : null;
    }

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['numStories'] === null) {
            $invalidProperties[] = "'numStories' can't be null";
        }
        if ($this->container['numPoints'] === null) {
            $invalidProperties[] = "'numPoints' can't be null";
        }
        if ($this->container['numRelatedDocuments'] === null) {
            $invalidProperties[] = "'numRelatedDocuments' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Gets numStories
     *
     * @return int
     */
    public function getNumStories()
    {
        return $this->container['numStories'];
    }

    /**
     * Sets numStories
     *
     * @param int $numStories The total number of stories in this Project.
     *
     * @return $this
     */
    public function setNumStories($numStories)
    {
        $this->container['numStories'] = $numStories;

        return $this;
    }

    /**
     * Gets numPoints
     *
     * @return int
     */
    public function getNumPoints()
    {
        return $this->container['numPoints'];
    }

    /**
     * Sets numPoints
     *
     * @param int $numPoints The total number of points in this Project.
     *
     * @return $this
     */
    public function setNumPoints($numPoints)
    {
        $this->container['numPoints'] = $numPoints;

        return $this;
    }

    /**
     * Gets numRelatedDocuments
     *
     * @return int
     */
    public function getNumRelatedDocuments()
    {
        return $this->container['numRelatedDocuments'];
    }

    /**
     * Sets numRelatedDocuments
     *
     * @param int $numRelatedDocuments The total number of documents related to this Project
     *
     * @return $this
     */
    public function setNumRelatedDocuments($numRelatedDocuments)
    {
        $this->container['numRelatedDocuments'] = $numRelatedDocuments;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed $value Value to be set
     *
     * @return void
     */
    #[ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
