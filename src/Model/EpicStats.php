<?php
/**
 * EpicStats
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Timetoreply\Shortcut
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Shortcut API
 *
 * Shortcut API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Timetoreply\Shortcut\Model;

use \ArrayAccess;
use \Timetoreply\Shortcut\ObjectSerializer;

/**
 * EpicStats Class Doc Comment
 *
 * @category Class
 * @description A group of calculated values for this Epic.
 * @package  Timetoreply\Shortcut
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EpicStats implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'EpicStats';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'numPointsDone' => 'int',
        'numRelatedDocuments' => 'int',
        'numStoriesUnstarted' => 'int',
        'numStoriesTotal' => 'int',
        'lastStoryUpdate' => '\DateTime',
        'numPointsStarted' => 'int',
        'numPointsUnstarted' => 'int',
        'numStoriesStarted' => 'int',
        'numStoriesUnestimated' => 'int',
        'numStoriesBacklog' => 'int',
        'numPointsBacklog' => 'int',
        'numPoints' => 'int',
        'numStoriesDone' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'numPointsDone' => 'int64',
        'numRelatedDocuments' => 'int64',
        'numStoriesUnstarted' => 'int64',
        'numStoriesTotal' => 'int64',
        'lastStoryUpdate' => 'date-time',
        'numPointsStarted' => 'int64',
        'numPointsUnstarted' => 'int64',
        'numStoriesStarted' => 'int64',
        'numStoriesUnestimated' => 'int64',
        'numStoriesBacklog' => 'int64',
        'numPointsBacklog' => 'int64',
        'numPoints' => 'int64',
        'numStoriesDone' => 'int64'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'numPointsDone' => false,
        'numRelatedDocuments' => false,
        'numStoriesUnstarted' => false,
        'numStoriesTotal' => false,
        'lastStoryUpdate' => true,
        'numPointsStarted' => false,
        'numPointsUnstarted' => false,
        'numStoriesStarted' => false,
        'numStoriesUnestimated' => false,
        'numStoriesBacklog' => false,
        'numPointsBacklog' => false,
        'numPoints' => false,
        'numStoriesDone' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'numPointsDone' => 'num_points_done',
        'numRelatedDocuments' => 'num_related_documents',
        'numStoriesUnstarted' => 'num_stories_unstarted',
        'numStoriesTotal' => 'num_stories_total',
        'lastStoryUpdate' => 'last_story_update',
        'numPointsStarted' => 'num_points_started',
        'numPointsUnstarted' => 'num_points_unstarted',
        'numStoriesStarted' => 'num_stories_started',
        'numStoriesUnestimated' => 'num_stories_unestimated',
        'numStoriesBacklog' => 'num_stories_backlog',
        'numPointsBacklog' => 'num_points_backlog',
        'numPoints' => 'num_points',
        'numStoriesDone' => 'num_stories_done'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'numPointsDone' => 'setNumPointsDone',
        'numRelatedDocuments' => 'setNumRelatedDocuments',
        'numStoriesUnstarted' => 'setNumStoriesUnstarted',
        'numStoriesTotal' => 'setNumStoriesTotal',
        'lastStoryUpdate' => 'setLastStoryUpdate',
        'numPointsStarted' => 'setNumPointsStarted',
        'numPointsUnstarted' => 'setNumPointsUnstarted',
        'numStoriesStarted' => 'setNumStoriesStarted',
        'numStoriesUnestimated' => 'setNumStoriesUnestimated',
        'numStoriesBacklog' => 'setNumStoriesBacklog',
        'numPointsBacklog' => 'setNumPointsBacklog',
        'numPoints' => 'setNumPoints',
        'numStoriesDone' => 'setNumStoriesDone'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'numPointsDone' => 'getNumPointsDone',
        'numRelatedDocuments' => 'getNumRelatedDocuments',
        'numStoriesUnstarted' => 'getNumStoriesUnstarted',
        'numStoriesTotal' => 'getNumStoriesTotal',
        'lastStoryUpdate' => 'getLastStoryUpdate',
        'numPointsStarted' => 'getNumPointsStarted',
        'numPointsUnstarted' => 'getNumPointsUnstarted',
        'numStoriesStarted' => 'getNumStoriesStarted',
        'numStoriesUnestimated' => 'getNumStoriesUnestimated',
        'numStoriesBacklog' => 'getNumStoriesBacklog',
        'numPointsBacklog' => 'getNumPointsBacklog',
        'numPoints' => 'getNumPoints',
        'numStoriesDone' => 'getNumStoriesDone'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('numPointsDone', $data ?? [], null);
        $this->setIfExists('numRelatedDocuments', $data ?? [], null);
        $this->setIfExists('numStoriesUnstarted', $data ?? [], null);
        $this->setIfExists('numStoriesTotal', $data ?? [], null);
        $this->setIfExists('lastStoryUpdate', $data ?? [], null);
        $this->setIfExists('numPointsStarted', $data ?? [], null);
        $this->setIfExists('numPointsUnstarted', $data ?? [], null);
        $this->setIfExists('numStoriesStarted', $data ?? [], null);
        $this->setIfExists('numStoriesUnestimated', $data ?? [], null);
        $this->setIfExists('numStoriesBacklog', $data ?? [], null);
        $this->setIfExists('numPointsBacklog', $data ?? [], null);
        $this->setIfExists('numPoints', $data ?? [], null);
        $this->setIfExists('numStoriesDone', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['numPointsDone'] === null) {
            $invalidProperties[] = "'numPointsDone' can't be null";
        }
        if ($this->container['numRelatedDocuments'] === null) {
            $invalidProperties[] = "'numRelatedDocuments' can't be null";
        }
        if ($this->container['numStoriesUnstarted'] === null) {
            $invalidProperties[] = "'numStoriesUnstarted' can't be null";
        }
        if ($this->container['numStoriesTotal'] === null) {
            $invalidProperties[] = "'numStoriesTotal' can't be null";
        }
        if ($this->container['lastStoryUpdate'] === null) {
            $invalidProperties[] = "'lastStoryUpdate' can't be null";
        }
        if ($this->container['numPointsStarted'] === null) {
            $invalidProperties[] = "'numPointsStarted' can't be null";
        }
        if ($this->container['numPointsUnstarted'] === null) {
            $invalidProperties[] = "'numPointsUnstarted' can't be null";
        }
        if ($this->container['numStoriesStarted'] === null) {
            $invalidProperties[] = "'numStoriesStarted' can't be null";
        }
        if ($this->container['numStoriesUnestimated'] === null) {
            $invalidProperties[] = "'numStoriesUnestimated' can't be null";
        }
        if ($this->container['numStoriesBacklog'] === null) {
            $invalidProperties[] = "'numStoriesBacklog' can't be null";
        }
        if ($this->container['numPointsBacklog'] === null) {
            $invalidProperties[] = "'numPointsBacklog' can't be null";
        }
        if ($this->container['numPoints'] === null) {
            $invalidProperties[] = "'numPoints' can't be null";
        }
        if ($this->container['numStoriesDone'] === null) {
            $invalidProperties[] = "'numStoriesDone' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets numPointsDone
     *
     * @return int
     */
    public function getNumPointsDone()
    {
        return $this->container['numPointsDone'];
    }

    /**
     * Sets numPointsDone
     *
     * @param int $numPointsDone The total number of completed points in this Epic.
     *
     * @return self
     */
    public function setNumPointsDone($numPointsDone)
    {
        if (is_null($numPointsDone)) {
            throw new \InvalidArgumentException('non-nullable numPointsDone cannot be null');
        }
        $this->container['numPointsDone'] = $numPointsDone;

        return $this;
    }

    /**
     * Gets numRelatedDocuments
     *
     * @return int
     */
    public function getNumRelatedDocuments()
    {
        return $this->container['numRelatedDocuments'];
    }

    /**
     * Sets numRelatedDocuments
     *
     * @param int $numRelatedDocuments The total number of documents associated with this Epic.
     *
     * @return self
     */
    public function setNumRelatedDocuments($numRelatedDocuments)
    {
        if (is_null($numRelatedDocuments)) {
            throw new \InvalidArgumentException('non-nullable numRelatedDocuments cannot be null');
        }
        $this->container['numRelatedDocuments'] = $numRelatedDocuments;

        return $this;
    }

    /**
     * Gets numStoriesUnstarted
     *
     * @return int
     */
    public function getNumStoriesUnstarted()
    {
        return $this->container['numStoriesUnstarted'];
    }

    /**
     * Sets numStoriesUnstarted
     *
     * @param int $numStoriesUnstarted The total number of unstarted Stories in this Epic.
     *
     * @return self
     */
    public function setNumStoriesUnstarted($numStoriesUnstarted)
    {
        if (is_null($numStoriesUnstarted)) {
            throw new \InvalidArgumentException('non-nullable numStoriesUnstarted cannot be null');
        }
        $this->container['numStoriesUnstarted'] = $numStoriesUnstarted;

        return $this;
    }

    /**
     * Gets numStoriesTotal
     *
     * @return int
     */
    public function getNumStoriesTotal()
    {
        return $this->container['numStoriesTotal'];
    }

    /**
     * Sets numStoriesTotal
     *
     * @param int $numStoriesTotal The total number of Stories in this Epic.
     *
     * @return self
     */
    public function setNumStoriesTotal($numStoriesTotal)
    {
        if (is_null($numStoriesTotal)) {
            throw new \InvalidArgumentException('non-nullable numStoriesTotal cannot be null');
        }
        $this->container['numStoriesTotal'] = $numStoriesTotal;

        return $this;
    }

    /**
     * Gets lastStoryUpdate
     *
     * @return \DateTime
     */
    public function getLastStoryUpdate()
    {
        return $this->container['lastStoryUpdate'];
    }

    /**
     * Sets lastStoryUpdate
     *
     * @param \DateTime $lastStoryUpdate The date of the last update of a Story in this Epic.
     *
     * @return self
     */
    public function setLastStoryUpdate($lastStoryUpdate)
    {
        if (is_null($lastStoryUpdate)) {
            array_push($this->openAPINullablesSetToNull, 'lastStoryUpdate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('lastStoryUpdate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['lastStoryUpdate'] = $lastStoryUpdate;

        return $this;
    }

    /**
     * Gets numPointsStarted
     *
     * @return int
     */
    public function getNumPointsStarted()
    {
        return $this->container['numPointsStarted'];
    }

    /**
     * Sets numPointsStarted
     *
     * @param int $numPointsStarted The total number of started points in this Epic.
     *
     * @return self
     */
    public function setNumPointsStarted($numPointsStarted)
    {
        if (is_null($numPointsStarted)) {
            throw new \InvalidArgumentException('non-nullable numPointsStarted cannot be null');
        }
        $this->container['numPointsStarted'] = $numPointsStarted;

        return $this;
    }

    /**
     * Gets numPointsUnstarted
     *
     * @return int
     */
    public function getNumPointsUnstarted()
    {
        return $this->container['numPointsUnstarted'];
    }

    /**
     * Sets numPointsUnstarted
     *
     * @param int $numPointsUnstarted The total number of unstarted points in this Epic.
     *
     * @return self
     */
    public function setNumPointsUnstarted($numPointsUnstarted)
    {
        if (is_null($numPointsUnstarted)) {
            throw new \InvalidArgumentException('non-nullable numPointsUnstarted cannot be null');
        }
        $this->container['numPointsUnstarted'] = $numPointsUnstarted;

        return $this;
    }

    /**
     * Gets numStoriesStarted
     *
     * @return int
     */
    public function getNumStoriesStarted()
    {
        return $this->container['numStoriesStarted'];
    }

    /**
     * Sets numStoriesStarted
     *
     * @param int $numStoriesStarted The total number of started Stories in this Epic.
     *
     * @return self
     */
    public function setNumStoriesStarted($numStoriesStarted)
    {
        if (is_null($numStoriesStarted)) {
            throw new \InvalidArgumentException('non-nullable numStoriesStarted cannot be null');
        }
        $this->container['numStoriesStarted'] = $numStoriesStarted;

        return $this;
    }

    /**
     * Gets numStoriesUnestimated
     *
     * @return int
     */
    public function getNumStoriesUnestimated()
    {
        return $this->container['numStoriesUnestimated'];
    }

    /**
     * Sets numStoriesUnestimated
     *
     * @param int $numStoriesUnestimated The total number of Stories with no point estimate.
     *
     * @return self
     */
    public function setNumStoriesUnestimated($numStoriesUnestimated)
    {
        if (is_null($numStoriesUnestimated)) {
            throw new \InvalidArgumentException('non-nullable numStoriesUnestimated cannot be null');
        }
        $this->container['numStoriesUnestimated'] = $numStoriesUnestimated;

        return $this;
    }

    /**
     * Gets numStoriesBacklog
     *
     * @return int
     */
    public function getNumStoriesBacklog()
    {
        return $this->container['numStoriesBacklog'];
    }

    /**
     * Sets numStoriesBacklog
     *
     * @param int $numStoriesBacklog The total number of backlog Stories in this Epic.
     *
     * @return self
     */
    public function setNumStoriesBacklog($numStoriesBacklog)
    {
        if (is_null($numStoriesBacklog)) {
            throw new \InvalidArgumentException('non-nullable numStoriesBacklog cannot be null');
        }
        $this->container['numStoriesBacklog'] = $numStoriesBacklog;

        return $this;
    }

    /**
     * Gets numPointsBacklog
     *
     * @return int
     */
    public function getNumPointsBacklog()
    {
        return $this->container['numPointsBacklog'];
    }

    /**
     * Sets numPointsBacklog
     *
     * @param int $numPointsBacklog The total number of backlog points in this Epic.
     *
     * @return self
     */
    public function setNumPointsBacklog($numPointsBacklog)
    {
        if (is_null($numPointsBacklog)) {
            throw new \InvalidArgumentException('non-nullable numPointsBacklog cannot be null');
        }
        $this->container['numPointsBacklog'] = $numPointsBacklog;

        return $this;
    }

    /**
     * Gets numPoints
     *
     * @return int
     */
    public function getNumPoints()
    {
        return $this->container['numPoints'];
    }

    /**
     * Sets numPoints
     *
     * @param int $numPoints The total number of points in this Epic.
     *
     * @return self
     */
    public function setNumPoints($numPoints)
    {
        if (is_null($numPoints)) {
            throw new \InvalidArgumentException('non-nullable numPoints cannot be null');
        }
        $this->container['numPoints'] = $numPoints;

        return $this;
    }

    /**
     * Gets numStoriesDone
     *
     * @return int
     */
    public function getNumStoriesDone()
    {
        return $this->container['numStoriesDone'];
    }

    /**
     * Sets numStoriesDone
     *
     * @param int $numStoriesDone The total number of done Stories in this Epic.
     *
     * @return self
     */
    public function setNumStoriesDone($numStoriesDone)
    {
        if (is_null($numStoriesDone)) {
            throw new \InvalidArgumentException('non-nullable numStoriesDone cannot be null');
        }
        $this->container['numStoriesDone'] = $numStoriesDone;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


