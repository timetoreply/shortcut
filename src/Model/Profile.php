<?php
/**
 * Profile
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Timetoreply\Shortcut
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Shortcut API
 *
 * Shortcut API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Timetoreply\Shortcut\Model;

use \ArrayAccess;
use \Timetoreply\Shortcut\ObjectSerializer;

/**
 * Profile Class Doc Comment
 *
 * @category Class
 * @description A group of Member profile details.
 * @package  Timetoreply\Shortcut
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Profile implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Profile';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'entityType' => 'string',
        'deactivated' => 'bool',
        'twoFactorAuthActivated' => 'bool',
        'mentionName' => 'string',
        'name' => 'string',
        'isAgent' => 'bool',
        'gravatarHash' => 'string',
        'id' => 'string',
        'displayIcon' => '\Timetoreply\Shortcut\Model\Icon',
        'isOwner' => 'bool',
        'emailAddress' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'entityType' => null,
        'deactivated' => null,
        'twoFactorAuthActivated' => null,
        'mentionName' => null,
        'name' => null,
        'isAgent' => null,
        'gravatarHash' => null,
        'id' => 'uuid',
        'displayIcon' => null,
        'isOwner' => null,
        'emailAddress' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'entityType' => false,
        'deactivated' => false,
        'twoFactorAuthActivated' => false,
        'mentionName' => false,
        'name' => true,
        'isAgent' => false,
        'gravatarHash' => true,
        'id' => false,
        'displayIcon' => false,
        'isOwner' => false,
        'emailAddress' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'entityType' => 'entity_type',
        'deactivated' => 'deactivated',
        'twoFactorAuthActivated' => 'two_factor_auth_activated',
        'mentionName' => 'mention_name',
        'name' => 'name',
        'isAgent' => 'is_agent',
        'gravatarHash' => 'gravatar_hash',
        'id' => 'id',
        'displayIcon' => 'display_icon',
        'isOwner' => 'is_owner',
        'emailAddress' => 'email_address'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'entityType' => 'setEntityType',
        'deactivated' => 'setDeactivated',
        'twoFactorAuthActivated' => 'setTwoFactorAuthActivated',
        'mentionName' => 'setMentionName',
        'name' => 'setName',
        'isAgent' => 'setIsAgent',
        'gravatarHash' => 'setGravatarHash',
        'id' => 'setId',
        'displayIcon' => 'setDisplayIcon',
        'isOwner' => 'setIsOwner',
        'emailAddress' => 'setEmailAddress'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'entityType' => 'getEntityType',
        'deactivated' => 'getDeactivated',
        'twoFactorAuthActivated' => 'getTwoFactorAuthActivated',
        'mentionName' => 'getMentionName',
        'name' => 'getName',
        'isAgent' => 'getIsAgent',
        'gravatarHash' => 'getGravatarHash',
        'id' => 'getId',
        'displayIcon' => 'getDisplayIcon',
        'isOwner' => 'getIsOwner',
        'emailAddress' => 'getEmailAddress'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('entityType', $data ?? [], null);
        $this->setIfExists('deactivated', $data ?? [], null);
        $this->setIfExists('twoFactorAuthActivated', $data ?? [], null);
        $this->setIfExists('mentionName', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('isAgent', $data ?? [], null);
        $this->setIfExists('gravatarHash', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('displayIcon', $data ?? [], null);
        $this->setIfExists('isOwner', $data ?? [], null);
        $this->setIfExists('emailAddress', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['entityType'] === null) {
            $invalidProperties[] = "'entityType' can't be null";
        }
        if ($this->container['deactivated'] === null) {
            $invalidProperties[] = "'deactivated' can't be null";
        }
        if ($this->container['mentionName'] === null) {
            $invalidProperties[] = "'mentionName' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['gravatarHash'] === null) {
            $invalidProperties[] = "'gravatarHash' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['displayIcon'] === null) {
            $invalidProperties[] = "'displayIcon' can't be null";
        }
        if ($this->container['isOwner'] === null) {
            $invalidProperties[] = "'isOwner' can't be null";
        }
        if ($this->container['emailAddress'] === null) {
            $invalidProperties[] = "'emailAddress' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets entityType
     *
     * @return string
     */
    public function getEntityType()
    {
        return $this->container['entityType'];
    }

    /**
     * Sets entityType
     *
     * @param string $entityType A string description of this resource.
     *
     * @return self
     */
    public function setEntityType($entityType)
    {
        if (is_null($entityType)) {
            throw new \InvalidArgumentException('non-nullable entityType cannot be null');
        }
        $this->container['entityType'] = $entityType;

        return $this;
    }

    /**
     * Gets deactivated
     *
     * @return bool
     */
    public function getDeactivated()
    {
        return $this->container['deactivated'];
    }

    /**
     * Sets deactivated
     *
     * @param bool $deactivated A true/false boolean indicating whether the Member has been deactivated within Shortcut.
     *
     * @return self
     */
    public function setDeactivated($deactivated)
    {
        if (is_null($deactivated)) {
            throw new \InvalidArgumentException('non-nullable deactivated cannot be null');
        }
        $this->container['deactivated'] = $deactivated;

        return $this;
    }

    /**
     * Gets twoFactorAuthActivated
     *
     * @return bool|null
     */
    public function getTwoFactorAuthActivated()
    {
        return $this->container['twoFactorAuthActivated'];
    }

    /**
     * Sets twoFactorAuthActivated
     *
     * @param bool|null $twoFactorAuthActivated If Two Factor Authentication is activated for this User.
     *
     * @return self
     */
    public function setTwoFactorAuthActivated($twoFactorAuthActivated)
    {
        if (is_null($twoFactorAuthActivated)) {
            throw new \InvalidArgumentException('non-nullable twoFactorAuthActivated cannot be null');
        }
        $this->container['twoFactorAuthActivated'] = $twoFactorAuthActivated;

        return $this;
    }

    /**
     * Gets mentionName
     *
     * @return string
     */
    public function getMentionName()
    {
        return $this->container['mentionName'];
    }

    /**
     * Sets mentionName
     *
     * @param string $mentionName The Member's username within the Organization.
     *
     * @return self
     */
    public function setMentionName($mentionName)
    {
        if (is_null($mentionName)) {
            throw new \InvalidArgumentException('non-nullable mentionName cannot be null');
        }
        $this->container['mentionName'] = $mentionName;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The Member's name within the Organization.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets isAgent
     *
     * @return bool|null
     */
    public function getIsAgent()
    {
        return $this->container['isAgent'];
    }

    /**
     * Sets isAgent
     *
     * @param bool|null $isAgent Whether this profile is an Agent/Bot user.
     *
     * @return self
     */
    public function setIsAgent($isAgent)
    {
        if (is_null($isAgent)) {
            throw new \InvalidArgumentException('non-nullable isAgent cannot be null');
        }
        $this->container['isAgent'] = $isAgent;

        return $this;
    }

    /**
     * Gets gravatarHash
     *
     * @return string
     */
    public function getGravatarHash()
    {
        return $this->container['gravatarHash'];
    }

    /**
     * Sets gravatarHash
     *
     * @param string $gravatarHash This is the gravatar hash associated with email_address.
     *
     * @return self
     */
    public function setGravatarHash($gravatarHash)
    {
        if (is_null($gravatarHash)) {
            array_push($this->openAPINullablesSetToNull, 'gravatarHash');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('gravatarHash', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['gravatarHash'] = $gravatarHash;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The unique identifier of the profile.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets displayIcon
     *
     * @return \Timetoreply\Shortcut\Model\Icon
     */
    public function getDisplayIcon()
    {
        return $this->container['displayIcon'];
    }

    /**
     * Sets displayIcon
     *
     * @param \Timetoreply\Shortcut\Model\Icon $displayIcon displayIcon
     *
     * @return self
     */
    public function setDisplayIcon($displayIcon)
    {
        if (is_null($displayIcon)) {
            throw new \InvalidArgumentException('non-nullable displayIcon cannot be null');
        }
        $this->container['displayIcon'] = $displayIcon;

        return $this;
    }

    /**
     * Gets isOwner
     *
     * @return bool
     */
    public function getIsOwner()
    {
        return $this->container['isOwner'];
    }

    /**
     * Sets isOwner
     *
     * @param bool $isOwner A boolean indicating whether this profile is an owner at their associated organization.
     *
     * @return self
     */
    public function setIsOwner($isOwner)
    {
        if (is_null($isOwner)) {
            throw new \InvalidArgumentException('non-nullable isOwner cannot be null');
        }
        $this->container['isOwner'] = $isOwner;

        return $this;
    }

    /**
     * Gets emailAddress
     *
     * @return string
     */
    public function getEmailAddress()
    {
        return $this->container['emailAddress'];
    }

    /**
     * Sets emailAddress
     *
     * @param string $emailAddress The primary email address of the Member with the Organization.
     *
     * @return self
     */
    public function setEmailAddress($emailAddress)
    {
        if (is_null($emailAddress)) {
            array_push($this->openAPINullablesSetToNull, 'emailAddress');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('emailAddress', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['emailAddress'] = $emailAddress;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


