<?php
/**
 * Profile
 *
 * PHP version 5
 *
 * @category Class
 * @package  Timetoreply\Shortcut
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Shortcut API
 *
 * Shortcut API
 *
 * OpenAPI spec version: 3.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.43-SNAPSHOT
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Timetoreply\Shortcut\Model;

use ArrayAccess;
use ReturnTypeWillChange;
use Timetoreply\Shortcut\ObjectSerializer;

/**
 * Profile Class Doc Comment
 *
 * @category Class
 * @description A group of Member profile details.
 * @package  Timetoreply\Shortcut
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Profile implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'Profile';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'entityType' => 'string',
        'deactivated' => 'bool',
        'twoFactorAuthActivated' => 'bool',
        'mentionName' => 'string',
        'name' => 'string',
        'gravatarHash' => 'string',
        'id' => 'string',
        'displayIcon' => '\Timetoreply\Shortcut\Model\Icon',
        'isOwner' => 'bool',
        'emailAddress' => 'string'];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'entityType' => null,
        'deactivated' => null,
        'twoFactorAuthActivated' => null,
        'mentionName' => null,
        'name' => null,
        'gravatarHash' => null,
        'id' => 'uuid',
        'displayIcon' => null,
        'isOwner' => null,
        'emailAddress' => null];
    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'entityType' => 'entity_type',
        'deactivated' => 'deactivated',
        'twoFactorAuthActivated' => 'two_factor_auth_activated',
        'mentionName' => 'mention_name',
        'name' => 'name',
        'gravatarHash' => 'gravatar_hash',
        'id' => 'id',
        'displayIcon' => 'display_icon',
        'isOwner' => 'is_owner',
        'emailAddress' => 'email_address'];
    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'entityType' => 'setEntityType',
        'deactivated' => 'setDeactivated',
        'twoFactorAuthActivated' => 'setTwoFactorAuthActivated',
        'mentionName' => 'setMentionName',
        'name' => 'setName',
        'gravatarHash' => 'setGravatarHash',
        'id' => 'setId',
        'displayIcon' => 'setDisplayIcon',
        'isOwner' => 'setIsOwner',
        'emailAddress' => 'setEmailAddress'];
    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'entityType' => 'getEntityType',
        'deactivated' => 'getDeactivated',
        'twoFactorAuthActivated' => 'getTwoFactorAuthActivated',
        'mentionName' => 'getMentionName',
        'name' => 'getName',
        'gravatarHash' => 'getGravatarHash',
        'id' => 'getId',
        'displayIcon' => 'getDisplayIcon',
        'isOwner' => 'getIsOwner',
        'emailAddress' => 'getEmailAddress'];
    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['entityType'] = isset($data['entityType']) ? $data['entityType'] : null;
        $this->container['deactivated'] = isset($data['deactivated']) ? $data['deactivated'] : null;
        $this->container['twoFactorAuthActivated'] = isset($data['twoFactorAuthActivated']) ? $data['twoFactorAuthActivated'] : null;
        $this->container['mentionName'] = isset($data['mentionName']) ? $data['mentionName'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['gravatarHash'] = isset($data['gravatarHash']) ? $data['gravatarHash'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['displayIcon'] = isset($data['displayIcon']) ? $data['displayIcon'] : null;
        $this->container['isOwner'] = isset($data['isOwner']) ? $data['isOwner'] : null;
        $this->container['emailAddress'] = isset($data['emailAddress']) ? $data['emailAddress'] : null;
    }

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['entityType'] === null) {
            $invalidProperties[] = "'entityType' can't be null";
        }
        if ($this->container['deactivated'] === null) {
            $invalidProperties[] = "'deactivated' can't be null";
        }
        if ($this->container['mentionName'] === null) {
            $invalidProperties[] = "'mentionName' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['gravatarHash'] === null) {
            $invalidProperties[] = "'gravatarHash' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['displayIcon'] === null) {
            $invalidProperties[] = "'displayIcon' can't be null";
        }
        if ($this->container['isOwner'] === null) {
            $invalidProperties[] = "'isOwner' can't be null";
        }
        if ($this->container['emailAddress'] === null) {
            $invalidProperties[] = "'emailAddress' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Gets entityType
     *
     * @return string
     */
    public function getEntityType()
    {
        return $this->container['entityType'];
    }

    /**
     * Sets entityType
     *
     * @param string $entityType A string description of this resource.
     *
     * @return $this
     */
    public function setEntityType($entityType)
    {
        $this->container['entityType'] = $entityType;

        return $this;
    }

    /**
     * Gets deactivated
     *
     * @return bool
     */
    public function getDeactivated()
    {
        return $this->container['deactivated'];
    }

    /**
     * Sets deactivated
     *
     * @param bool $deactivated A true/false boolean indicating whether the Member has been deactivated within Shortcut.
     *
     * @return $this
     */
    public function setDeactivated($deactivated)
    {
        $this->container['deactivated'] = $deactivated;

        return $this;
    }

    /**
     * Gets twoFactorAuthActivated
     *
     * @return bool
     */
    public function getTwoFactorAuthActivated()
    {
        return $this->container['twoFactorAuthActivated'];
    }

    /**
     * Sets twoFactorAuthActivated
     *
     * @param bool $twoFactorAuthActivated If Two Factor Authentication is activated for this User.
     *
     * @return $this
     */
    public function setTwoFactorAuthActivated($twoFactorAuthActivated)
    {
        $this->container['twoFactorAuthActivated'] = $twoFactorAuthActivated;

        return $this;
    }

    /**
     * Gets mentionName
     *
     * @return string
     */
    public function getMentionName()
    {
        return $this->container['mentionName'];
    }

    /**
     * Sets mentionName
     *
     * @param string $mentionName The Member's username within the Organization.
     *
     * @return $this
     */
    public function setMentionName($mentionName)
    {
        $this->container['mentionName'] = $mentionName;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The Member's name within the Organization.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets gravatarHash
     *
     * @return string
     */
    public function getGravatarHash()
    {
        return $this->container['gravatarHash'];
    }

    /**
     * Sets gravatarHash
     *
     * @param string $gravatarHash This is the gravatar hash associated with email_address.
     *
     * @return $this
     */
    public function setGravatarHash($gravatarHash)
    {
        $this->container['gravatarHash'] = $gravatarHash;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The unique identifier of the profile.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets displayIcon
     *
     * @return Icon
     */
    public function getDisplayIcon()
    {
        return $this->container['displayIcon'];
    }

    /**
     * Sets displayIcon
     *
     * @param Icon $displayIcon displayIcon
     *
     * @return $this
     */
    public function setDisplayIcon($displayIcon)
    {
        $this->container['displayIcon'] = $displayIcon;

        return $this;
    }

    /**
     * Gets isOwner
     *
     * @return bool
     */
    public function getIsOwner()
    {
        return $this->container['isOwner'];
    }

    /**
     * Sets isOwner
     *
     * @param bool $isOwner A boolean indicating whether this profile is an owner at their associated organization.
     *
     * @return $this
     */
    public function setIsOwner($isOwner)
    {
        $this->container['isOwner'] = $isOwner;

        return $this;
    }

    /**
     * Gets emailAddress
     *
     * @return string
     */
    public function getEmailAddress()
    {
        return $this->container['emailAddress'];
    }

    /**
     * Sets emailAddress
     *
     * @param string $emailAddress The primary email address of the Member with the Organization.
     *
     * @return $this
     */
    public function setEmailAddress($emailAddress)
    {
        $this->container['emailAddress'] = $emailAddress;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed $value Value to be set
     *
     * @return void
     */
    #[ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
