<?php
/**
 * StorySearchResult
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Timetoreply\Shortcut
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Shortcut API
 *
 * Shortcut API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Timetoreply\Shortcut\Model;

use \ArrayAccess;
use \Timetoreply\Shortcut\ObjectSerializer;

/**
 * StorySearchResult Class Doc Comment
 *
 * @category Class
 * @description A Story in search results. This is typed differently from Story because the details&#x3D;slim search argument will omit some fields.
 * @package  Timetoreply\Shortcut
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class StorySearchResult implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'StorySearchResult';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'appUrl' => 'string',
        'description' => 'string',
        'archived' => 'bool',
        'started' => 'bool',
        'storyLinks' => '\Timetoreply\Shortcut\Model\TypedStoryLink[]',
        'entityType' => 'string',
        'labels' => '\Timetoreply\Shortcut\Model\LabelSlim[]',
        'taskIds' => 'int[]',
        'mentionIds' => 'string[]',
        'syncedItem' => '\Timetoreply\Shortcut\Model\SyncedItem',
        'memberMentionIds' => 'string[]',
        'storyType' => 'string',
        'customFields' => '\Timetoreply\Shortcut\Model\StoryCustomField[]',
        'linkedFiles' => '\Timetoreply\Shortcut\Model\LinkedFile[]',
        'fileIds' => 'int[]',
        'numTasksCompleted' => 'int',
        'workflowId' => 'int',
        'completedAtOverride' => '\DateTime',
        'startedAt' => '\DateTime',
        'completedAt' => '\DateTime',
        'name' => 'string',
        'globalId' => 'string',
        'completed' => 'bool',
        'comments' => '\Timetoreply\Shortcut\Model\StoryComment[]',
        'blocker' => 'bool',
        'branches' => '\Timetoreply\Shortcut\Model\Branch[]',
        'epicId' => 'int',
        'storyTemplateId' => 'string',
        'externalLinks' => 'string[]',
        'previousIterationIds' => 'int[]',
        'requestedById' => 'string',
        'iterationId' => 'int',
        'subTaskStoryIds' => 'int[]',
        'tasks' => '\Timetoreply\Shortcut\Model\Task[]',
        'formattedVcsBranchName' => 'string',
        'labelIds' => 'int[]',
        'startedAtOverride' => '\DateTime',
        'groupId' => 'string',
        'workflowStateId' => 'int',
        'updatedAt' => '\DateTime',
        'pullRequests' => '\Timetoreply\Shortcut\Model\PullRequest[]',
        'groupMentionIds' => 'string[]',
        'followerIds' => 'string[]',
        'ownerIds' => 'string[]',
        'externalId' => 'string',
        'id' => 'int',
        'leadTime' => 'int',
        'parentStoryId' => 'int',
        'estimate' => 'int',
        'commits' => '\Timetoreply\Shortcut\Model\Commit[]',
        'files' => '\Timetoreply\Shortcut\Model\UploadedFile[]',
        'position' => 'int',
        'blocked' => 'bool',
        'projectId' => 'int',
        'linkedFileIds' => 'int[]',
        'deadline' => '\DateTime',
        'stats' => '\Timetoreply\Shortcut\Model\StoryStats',
        'commentIds' => 'int[]',
        'cycleTime' => 'int',
        'createdAt' => '\DateTime',
        'movedAt' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'appUrl' => null,
        'description' => null,
        'archived' => null,
        'started' => null,
        'storyLinks' => null,
        'entityType' => null,
        'labels' => null,
        'taskIds' => 'int64',
        'mentionIds' => 'uuid',
        'syncedItem' => null,
        'memberMentionIds' => 'uuid',
        'storyType' => null,
        'customFields' => null,
        'linkedFiles' => null,
        'fileIds' => 'int64',
        'numTasksCompleted' => 'int64',
        'workflowId' => 'int64',
        'completedAtOverride' => 'date-time',
        'startedAt' => 'date-time',
        'completedAt' => 'date-time',
        'name' => null,
        'globalId' => null,
        'completed' => null,
        'comments' => null,
        'blocker' => null,
        'branches' => null,
        'epicId' => 'int64',
        'storyTemplateId' => 'uuid',
        'externalLinks' => null,
        'previousIterationIds' => 'int64',
        'requestedById' => 'uuid',
        'iterationId' => 'int64',
        'subTaskStoryIds' => 'int64',
        'tasks' => null,
        'formattedVcsBranchName' => null,
        'labelIds' => 'int64',
        'startedAtOverride' => 'date-time',
        'groupId' => 'uuid',
        'workflowStateId' => 'int64',
        'updatedAt' => 'date-time',
        'pullRequests' => null,
        'groupMentionIds' => 'uuid',
        'followerIds' => 'uuid',
        'ownerIds' => 'uuid',
        'externalId' => null,
        'id' => 'int64',
        'leadTime' => 'int64',
        'parentStoryId' => 'int64',
        'estimate' => 'int64',
        'commits' => null,
        'files' => null,
        'position' => 'int64',
        'blocked' => null,
        'projectId' => 'int64',
        'linkedFileIds' => 'int64',
        'deadline' => 'date-time',
        'stats' => null,
        'commentIds' => 'int64',
        'cycleTime' => 'int64',
        'createdAt' => 'date-time',
        'movedAt' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'appUrl' => false,
        'description' => false,
        'archived' => false,
        'started' => false,
        'storyLinks' => false,
        'entityType' => false,
        'labels' => false,
        'taskIds' => false,
        'mentionIds' => false,
        'syncedItem' => false,
        'memberMentionIds' => false,
        'storyType' => false,
        'customFields' => false,
        'linkedFiles' => false,
        'fileIds' => false,
        'numTasksCompleted' => false,
        'workflowId' => false,
        'completedAtOverride' => true,
        'startedAt' => true,
        'completedAt' => true,
        'name' => false,
        'globalId' => false,
        'completed' => false,
        'comments' => false,
        'blocker' => false,
        'branches' => false,
        'epicId' => true,
        'storyTemplateId' => true,
        'externalLinks' => false,
        'previousIterationIds' => false,
        'requestedById' => false,
        'iterationId' => true,
        'subTaskStoryIds' => false,
        'tasks' => false,
        'formattedVcsBranchName' => true,
        'labelIds' => false,
        'startedAtOverride' => true,
        'groupId' => true,
        'workflowStateId' => false,
        'updatedAt' => true,
        'pullRequests' => false,
        'groupMentionIds' => false,
        'followerIds' => false,
        'ownerIds' => false,
        'externalId' => true,
        'id' => false,
        'leadTime' => false,
        'parentStoryId' => true,
        'estimate' => true,
        'commits' => false,
        'files' => false,
        'position' => false,
        'blocked' => false,
        'projectId' => true,
        'linkedFileIds' => false,
        'deadline' => true,
        'stats' => false,
        'commentIds' => false,
        'cycleTime' => false,
        'createdAt' => false,
        'movedAt' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'appUrl' => 'app_url',
        'description' => 'description',
        'archived' => 'archived',
        'started' => 'started',
        'storyLinks' => 'story_links',
        'entityType' => 'entity_type',
        'labels' => 'labels',
        'taskIds' => 'task_ids',
        'mentionIds' => 'mention_ids',
        'syncedItem' => 'synced_item',
        'memberMentionIds' => 'member_mention_ids',
        'storyType' => 'story_type',
        'customFields' => 'custom_fields',
        'linkedFiles' => 'linked_files',
        'fileIds' => 'file_ids',
        'numTasksCompleted' => 'num_tasks_completed',
        'workflowId' => 'workflow_id',
        'completedAtOverride' => 'completed_at_override',
        'startedAt' => 'started_at',
        'completedAt' => 'completed_at',
        'name' => 'name',
        'globalId' => 'global_id',
        'completed' => 'completed',
        'comments' => 'comments',
        'blocker' => 'blocker',
        'branches' => 'branches',
        'epicId' => 'epic_id',
        'storyTemplateId' => 'story_template_id',
        'externalLinks' => 'external_links',
        'previousIterationIds' => 'previous_iteration_ids',
        'requestedById' => 'requested_by_id',
        'iterationId' => 'iteration_id',
        'subTaskStoryIds' => 'sub_task_story_ids',
        'tasks' => 'tasks',
        'formattedVcsBranchName' => 'formatted_vcs_branch_name',
        'labelIds' => 'label_ids',
        'startedAtOverride' => 'started_at_override',
        'groupId' => 'group_id',
        'workflowStateId' => 'workflow_state_id',
        'updatedAt' => 'updated_at',
        'pullRequests' => 'pull_requests',
        'groupMentionIds' => 'group_mention_ids',
        'followerIds' => 'follower_ids',
        'ownerIds' => 'owner_ids',
        'externalId' => 'external_id',
        'id' => 'id',
        'leadTime' => 'lead_time',
        'parentStoryId' => 'parent_story_id',
        'estimate' => 'estimate',
        'commits' => 'commits',
        'files' => 'files',
        'position' => 'position',
        'blocked' => 'blocked',
        'projectId' => 'project_id',
        'linkedFileIds' => 'linked_file_ids',
        'deadline' => 'deadline',
        'stats' => 'stats',
        'commentIds' => 'comment_ids',
        'cycleTime' => 'cycle_time',
        'createdAt' => 'created_at',
        'movedAt' => 'moved_at'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'appUrl' => 'setAppUrl',
        'description' => 'setDescription',
        'archived' => 'setArchived',
        'started' => 'setStarted',
        'storyLinks' => 'setStoryLinks',
        'entityType' => 'setEntityType',
        'labels' => 'setLabels',
        'taskIds' => 'setTaskIds',
        'mentionIds' => 'setMentionIds',
        'syncedItem' => 'setSyncedItem',
        'memberMentionIds' => 'setMemberMentionIds',
        'storyType' => 'setStoryType',
        'customFields' => 'setCustomFields',
        'linkedFiles' => 'setLinkedFiles',
        'fileIds' => 'setFileIds',
        'numTasksCompleted' => 'setNumTasksCompleted',
        'workflowId' => 'setWorkflowId',
        'completedAtOverride' => 'setCompletedAtOverride',
        'startedAt' => 'setStartedAt',
        'completedAt' => 'setCompletedAt',
        'name' => 'setName',
        'globalId' => 'setGlobalId',
        'completed' => 'setCompleted',
        'comments' => 'setComments',
        'blocker' => 'setBlocker',
        'branches' => 'setBranches',
        'epicId' => 'setEpicId',
        'storyTemplateId' => 'setStoryTemplateId',
        'externalLinks' => 'setExternalLinks',
        'previousIterationIds' => 'setPreviousIterationIds',
        'requestedById' => 'setRequestedById',
        'iterationId' => 'setIterationId',
        'subTaskStoryIds' => 'setSubTaskStoryIds',
        'tasks' => 'setTasks',
        'formattedVcsBranchName' => 'setFormattedVcsBranchName',
        'labelIds' => 'setLabelIds',
        'startedAtOverride' => 'setStartedAtOverride',
        'groupId' => 'setGroupId',
        'workflowStateId' => 'setWorkflowStateId',
        'updatedAt' => 'setUpdatedAt',
        'pullRequests' => 'setPullRequests',
        'groupMentionIds' => 'setGroupMentionIds',
        'followerIds' => 'setFollowerIds',
        'ownerIds' => 'setOwnerIds',
        'externalId' => 'setExternalId',
        'id' => 'setId',
        'leadTime' => 'setLeadTime',
        'parentStoryId' => 'setParentStoryId',
        'estimate' => 'setEstimate',
        'commits' => 'setCommits',
        'files' => 'setFiles',
        'position' => 'setPosition',
        'blocked' => 'setBlocked',
        'projectId' => 'setProjectId',
        'linkedFileIds' => 'setLinkedFileIds',
        'deadline' => 'setDeadline',
        'stats' => 'setStats',
        'commentIds' => 'setCommentIds',
        'cycleTime' => 'setCycleTime',
        'createdAt' => 'setCreatedAt',
        'movedAt' => 'setMovedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'appUrl' => 'getAppUrl',
        'description' => 'getDescription',
        'archived' => 'getArchived',
        'started' => 'getStarted',
        'storyLinks' => 'getStoryLinks',
        'entityType' => 'getEntityType',
        'labels' => 'getLabels',
        'taskIds' => 'getTaskIds',
        'mentionIds' => 'getMentionIds',
        'syncedItem' => 'getSyncedItem',
        'memberMentionIds' => 'getMemberMentionIds',
        'storyType' => 'getStoryType',
        'customFields' => 'getCustomFields',
        'linkedFiles' => 'getLinkedFiles',
        'fileIds' => 'getFileIds',
        'numTasksCompleted' => 'getNumTasksCompleted',
        'workflowId' => 'getWorkflowId',
        'completedAtOverride' => 'getCompletedAtOverride',
        'startedAt' => 'getStartedAt',
        'completedAt' => 'getCompletedAt',
        'name' => 'getName',
        'globalId' => 'getGlobalId',
        'completed' => 'getCompleted',
        'comments' => 'getComments',
        'blocker' => 'getBlocker',
        'branches' => 'getBranches',
        'epicId' => 'getEpicId',
        'storyTemplateId' => 'getStoryTemplateId',
        'externalLinks' => 'getExternalLinks',
        'previousIterationIds' => 'getPreviousIterationIds',
        'requestedById' => 'getRequestedById',
        'iterationId' => 'getIterationId',
        'subTaskStoryIds' => 'getSubTaskStoryIds',
        'tasks' => 'getTasks',
        'formattedVcsBranchName' => 'getFormattedVcsBranchName',
        'labelIds' => 'getLabelIds',
        'startedAtOverride' => 'getStartedAtOverride',
        'groupId' => 'getGroupId',
        'workflowStateId' => 'getWorkflowStateId',
        'updatedAt' => 'getUpdatedAt',
        'pullRequests' => 'getPullRequests',
        'groupMentionIds' => 'getGroupMentionIds',
        'followerIds' => 'getFollowerIds',
        'ownerIds' => 'getOwnerIds',
        'externalId' => 'getExternalId',
        'id' => 'getId',
        'leadTime' => 'getLeadTime',
        'parentStoryId' => 'getParentStoryId',
        'estimate' => 'getEstimate',
        'commits' => 'getCommits',
        'files' => 'getFiles',
        'position' => 'getPosition',
        'blocked' => 'getBlocked',
        'projectId' => 'getProjectId',
        'linkedFileIds' => 'getLinkedFileIds',
        'deadline' => 'getDeadline',
        'stats' => 'getStats',
        'commentIds' => 'getCommentIds',
        'cycleTime' => 'getCycleTime',
        'createdAt' => 'getCreatedAt',
        'movedAt' => 'getMovedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('appUrl', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('archived', $data ?? [], null);
        $this->setIfExists('started', $data ?? [], null);
        $this->setIfExists('storyLinks', $data ?? [], null);
        $this->setIfExists('entityType', $data ?? [], null);
        $this->setIfExists('labels', $data ?? [], null);
        $this->setIfExists('taskIds', $data ?? [], null);
        $this->setIfExists('mentionIds', $data ?? [], null);
        $this->setIfExists('syncedItem', $data ?? [], null);
        $this->setIfExists('memberMentionIds', $data ?? [], null);
        $this->setIfExists('storyType', $data ?? [], null);
        $this->setIfExists('customFields', $data ?? [], null);
        $this->setIfExists('linkedFiles', $data ?? [], null);
        $this->setIfExists('fileIds', $data ?? [], null);
        $this->setIfExists('numTasksCompleted', $data ?? [], null);
        $this->setIfExists('workflowId', $data ?? [], null);
        $this->setIfExists('completedAtOverride', $data ?? [], null);
        $this->setIfExists('startedAt', $data ?? [], null);
        $this->setIfExists('completedAt', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('globalId', $data ?? [], null);
        $this->setIfExists('completed', $data ?? [], null);
        $this->setIfExists('comments', $data ?? [], null);
        $this->setIfExists('blocker', $data ?? [], null);
        $this->setIfExists('branches', $data ?? [], null);
        $this->setIfExists('epicId', $data ?? [], null);
        $this->setIfExists('storyTemplateId', $data ?? [], null);
        $this->setIfExists('externalLinks', $data ?? [], null);
        $this->setIfExists('previousIterationIds', $data ?? [], null);
        $this->setIfExists('requestedById', $data ?? [], null);
        $this->setIfExists('iterationId', $data ?? [], null);
        $this->setIfExists('subTaskStoryIds', $data ?? [], null);
        $this->setIfExists('tasks', $data ?? [], null);
        $this->setIfExists('formattedVcsBranchName', $data ?? [], null);
        $this->setIfExists('labelIds', $data ?? [], null);
        $this->setIfExists('startedAtOverride', $data ?? [], null);
        $this->setIfExists('groupId', $data ?? [], null);
        $this->setIfExists('workflowStateId', $data ?? [], null);
        $this->setIfExists('updatedAt', $data ?? [], null);
        $this->setIfExists('pullRequests', $data ?? [], null);
        $this->setIfExists('groupMentionIds', $data ?? [], null);
        $this->setIfExists('followerIds', $data ?? [], null);
        $this->setIfExists('ownerIds', $data ?? [], null);
        $this->setIfExists('externalId', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('leadTime', $data ?? [], null);
        $this->setIfExists('parentStoryId', $data ?? [], null);
        $this->setIfExists('estimate', $data ?? [], null);
        $this->setIfExists('commits', $data ?? [], null);
        $this->setIfExists('files', $data ?? [], null);
        $this->setIfExists('position', $data ?? [], null);
        $this->setIfExists('blocked', $data ?? [], null);
        $this->setIfExists('projectId', $data ?? [], null);
        $this->setIfExists('linkedFileIds', $data ?? [], null);
        $this->setIfExists('deadline', $data ?? [], null);
        $this->setIfExists('stats', $data ?? [], null);
        $this->setIfExists('commentIds', $data ?? [], null);
        $this->setIfExists('cycleTime', $data ?? [], null);
        $this->setIfExists('createdAt', $data ?? [], null);
        $this->setIfExists('movedAt', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['appUrl'] === null) {
            $invalidProperties[] = "'appUrl' can't be null";
        }
        if ($this->container['archived'] === null) {
            $invalidProperties[] = "'archived' can't be null";
        }
        if ($this->container['started'] === null) {
            $invalidProperties[] = "'started' can't be null";
        }
        if ($this->container['storyLinks'] === null) {
            $invalidProperties[] = "'storyLinks' can't be null";
        }
        if ($this->container['entityType'] === null) {
            $invalidProperties[] = "'entityType' can't be null";
        }
        if ($this->container['labels'] === null) {
            $invalidProperties[] = "'labels' can't be null";
        }
        if ($this->container['mentionIds'] === null) {
            $invalidProperties[] = "'mentionIds' can't be null";
        }
        if ($this->container['memberMentionIds'] === null) {
            $invalidProperties[] = "'memberMentionIds' can't be null";
        }
        if ($this->container['storyType'] === null) {
            $invalidProperties[] = "'storyType' can't be null";
        }
        if ($this->container['workflowId'] === null) {
            $invalidProperties[] = "'workflowId' can't be null";
        }
        if ($this->container['completedAtOverride'] === null) {
            $invalidProperties[] = "'completedAtOverride' can't be null";
        }
        if ($this->container['startedAt'] === null) {
            $invalidProperties[] = "'startedAt' can't be null";
        }
        if ($this->container['completedAt'] === null) {
            $invalidProperties[] = "'completedAt' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['globalId'] === null) {
            $invalidProperties[] = "'globalId' can't be null";
        }
        if ($this->container['completed'] === null) {
            $invalidProperties[] = "'completed' can't be null";
        }
        if ($this->container['blocker'] === null) {
            $invalidProperties[] = "'blocker' can't be null";
        }
        if ($this->container['epicId'] === null) {
            $invalidProperties[] = "'epicId' can't be null";
        }
        if ($this->container['storyTemplateId'] === null) {
            $invalidProperties[] = "'storyTemplateId' can't be null";
        }
        if ($this->container['externalLinks'] === null) {
            $invalidProperties[] = "'externalLinks' can't be null";
        }
        if ($this->container['previousIterationIds'] === null) {
            $invalidProperties[] = "'previousIterationIds' can't be null";
        }
        if ($this->container['requestedById'] === null) {
            $invalidProperties[] = "'requestedById' can't be null";
        }
        if ($this->container['iterationId'] === null) {
            $invalidProperties[] = "'iterationId' can't be null";
        }
        if ($this->container['labelIds'] === null) {
            $invalidProperties[] = "'labelIds' can't be null";
        }
        if ($this->container['startedAtOverride'] === null) {
            $invalidProperties[] = "'startedAtOverride' can't be null";
        }
        if ($this->container['groupId'] === null) {
            $invalidProperties[] = "'groupId' can't be null";
        }
        if ($this->container['workflowStateId'] === null) {
            $invalidProperties[] = "'workflowStateId' can't be null";
        }
        if ($this->container['updatedAt'] === null) {
            $invalidProperties[] = "'updatedAt' can't be null";
        }
        if ($this->container['groupMentionIds'] === null) {
            $invalidProperties[] = "'groupMentionIds' can't be null";
        }
        if ($this->container['followerIds'] === null) {
            $invalidProperties[] = "'followerIds' can't be null";
        }
        if ($this->container['ownerIds'] === null) {
            $invalidProperties[] = "'ownerIds' can't be null";
        }
        if ($this->container['externalId'] === null) {
            $invalidProperties[] = "'externalId' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['estimate'] === null) {
            $invalidProperties[] = "'estimate' can't be null";
        }
        if ($this->container['position'] === null) {
            $invalidProperties[] = "'position' can't be null";
        }
        if ($this->container['blocked'] === null) {
            $invalidProperties[] = "'blocked' can't be null";
        }
        if ($this->container['projectId'] === null) {
            $invalidProperties[] = "'projectId' can't be null";
        }
        if ($this->container['deadline'] === null) {
            $invalidProperties[] = "'deadline' can't be null";
        }
        if ($this->container['stats'] === null) {
            $invalidProperties[] = "'stats' can't be null";
        }
        if ($this->container['createdAt'] === null) {
            $invalidProperties[] = "'createdAt' can't be null";
        }
        if ($this->container['movedAt'] === null) {
            $invalidProperties[] = "'movedAt' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets appUrl
     *
     * @return string
     */
    public function getAppUrl()
    {
        return $this->container['appUrl'];
    }

    /**
     * Sets appUrl
     *
     * @param string $appUrl The Shortcut application url for the Story.
     *
     * @return self
     */
    public function setAppUrl($appUrl)
    {
        if (is_null($appUrl)) {
            throw new \InvalidArgumentException('non-nullable appUrl cannot be null');
        }
        $this->container['appUrl'] = $appUrl;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description The description of the story.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets archived
     *
     * @return bool
     */
    public function getArchived()
    {
        return $this->container['archived'];
    }

    /**
     * Sets archived
     *
     * @param bool $archived True if the story has been archived or not.
     *
     * @return self
     */
    public function setArchived($archived)
    {
        if (is_null($archived)) {
            throw new \InvalidArgumentException('non-nullable archived cannot be null');
        }
        $this->container['archived'] = $archived;

        return $this;
    }

    /**
     * Gets started
     *
     * @return bool
     */
    public function getStarted()
    {
        return $this->container['started'];
    }

    /**
     * Sets started
     *
     * @param bool $started A true/false boolean indicating if the Story has been started.
     *
     * @return self
     */
    public function setStarted($started)
    {
        if (is_null($started)) {
            throw new \InvalidArgumentException('non-nullable started cannot be null');
        }
        $this->container['started'] = $started;

        return $this;
    }

    /**
     * Gets storyLinks
     *
     * @return \Timetoreply\Shortcut\Model\TypedStoryLink[]
     */
    public function getStoryLinks()
    {
        return $this->container['storyLinks'];
    }

    /**
     * Sets storyLinks
     *
     * @param \Timetoreply\Shortcut\Model\TypedStoryLink[] $storyLinks An array of story links attached to the Story.
     *
     * @return self
     */
    public function setStoryLinks($storyLinks)
    {
        if (is_null($storyLinks)) {
            throw new \InvalidArgumentException('non-nullable storyLinks cannot be null');
        }
        $this->container['storyLinks'] = $storyLinks;

        return $this;
    }

    /**
     * Gets entityType
     *
     * @return string
     */
    public function getEntityType()
    {
        return $this->container['entityType'];
    }

    /**
     * Sets entityType
     *
     * @param string $entityType A string description of this resource.
     *
     * @return self
     */
    public function setEntityType($entityType)
    {
        if (is_null($entityType)) {
            throw new \InvalidArgumentException('non-nullable entityType cannot be null');
        }
        $this->container['entityType'] = $entityType;

        return $this;
    }

    /**
     * Gets labels
     *
     * @return \Timetoreply\Shortcut\Model\LabelSlim[]
     */
    public function getLabels()
    {
        return $this->container['labels'];
    }

    /**
     * Sets labels
     *
     * @param \Timetoreply\Shortcut\Model\LabelSlim[] $labels An array of labels attached to the story.
     *
     * @return self
     */
    public function setLabels($labels)
    {
        if (is_null($labels)) {
            throw new \InvalidArgumentException('non-nullable labels cannot be null');
        }
        $this->container['labels'] = $labels;

        return $this;
    }

    /**
     * Gets taskIds
     *
     * @return int[]|null
     */
    public function getTaskIds()
    {
        return $this->container['taskIds'];
    }

    /**
     * Sets taskIds
     *
     * @param int[]|null $taskIds An array of IDs of Tasks attached to the story.
     *
     * @return self
     */
    public function setTaskIds($taskIds)
    {
        if (is_null($taskIds)) {
            throw new \InvalidArgumentException('non-nullable taskIds cannot be null');
        }
        $this->container['taskIds'] = $taskIds;

        return $this;
    }

    /**
     * Gets mentionIds
     *
     * @return string[]
     */
    public function getMentionIds()
    {
        return $this->container['mentionIds'];
    }

    /**
     * Sets mentionIds
     *
     * @param string[] $mentionIds `Deprecated:` use `member_mention_ids`.
     *
     * @return self
     */
    public function setMentionIds($mentionIds)
    {
        if (is_null($mentionIds)) {
            throw new \InvalidArgumentException('non-nullable mentionIds cannot be null');
        }
        $this->container['mentionIds'] = $mentionIds;

        return $this;
    }

    /**
     * Gets syncedItem
     *
     * @return \Timetoreply\Shortcut\Model\SyncedItem|null
     */
    public function getSyncedItem()
    {
        return $this->container['syncedItem'];
    }

    /**
     * Sets syncedItem
     *
     * @param \Timetoreply\Shortcut\Model\SyncedItem|null $syncedItem syncedItem
     *
     * @return self
     */
    public function setSyncedItem($syncedItem)
    {
        if (is_null($syncedItem)) {
            throw new \InvalidArgumentException('non-nullable syncedItem cannot be null');
        }
        $this->container['syncedItem'] = $syncedItem;

        return $this;
    }

    /**
     * Gets memberMentionIds
     *
     * @return string[]
     */
    public function getMemberMentionIds()
    {
        return $this->container['memberMentionIds'];
    }

    /**
     * Sets memberMentionIds
     *
     * @param string[] $memberMentionIds An array of Member IDs that have been mentioned in the Story description.
     *
     * @return self
     */
    public function setMemberMentionIds($memberMentionIds)
    {
        if (is_null($memberMentionIds)) {
            throw new \InvalidArgumentException('non-nullable memberMentionIds cannot be null');
        }
        $this->container['memberMentionIds'] = $memberMentionIds;

        return $this;
    }

    /**
     * Gets storyType
     *
     * @return string
     */
    public function getStoryType()
    {
        return $this->container['storyType'];
    }

    /**
     * Sets storyType
     *
     * @param string $storyType The type of story (feature, bug, chore).
     *
     * @return self
     */
    public function setStoryType($storyType)
    {
        if (is_null($storyType)) {
            throw new \InvalidArgumentException('non-nullable storyType cannot be null');
        }
        $this->container['storyType'] = $storyType;

        return $this;
    }

    /**
     * Gets customFields
     *
     * @return \Timetoreply\Shortcut\Model\StoryCustomField[]|null
     */
    public function getCustomFields()
    {
        return $this->container['customFields'];
    }

    /**
     * Sets customFields
     *
     * @param \Timetoreply\Shortcut\Model\StoryCustomField[]|null $customFields An array of CustomField value assertions for the story.
     *
     * @return self
     */
    public function setCustomFields($customFields)
    {
        if (is_null($customFields)) {
            throw new \InvalidArgumentException('non-nullable customFields cannot be null');
        }
        $this->container['customFields'] = $customFields;

        return $this;
    }

    /**
     * Gets linkedFiles
     *
     * @return \Timetoreply\Shortcut\Model\LinkedFile[]|null
     */
    public function getLinkedFiles()
    {
        return $this->container['linkedFiles'];
    }

    /**
     * Sets linkedFiles
     *
     * @param \Timetoreply\Shortcut\Model\LinkedFile[]|null $linkedFiles An array of linked files attached to the story.
     *
     * @return self
     */
    public function setLinkedFiles($linkedFiles)
    {
        if (is_null($linkedFiles)) {
            throw new \InvalidArgumentException('non-nullable linkedFiles cannot be null');
        }
        $this->container['linkedFiles'] = $linkedFiles;

        return $this;
    }

    /**
     * Gets fileIds
     *
     * @return int[]|null
     */
    public function getFileIds()
    {
        return $this->container['fileIds'];
    }

    /**
     * Sets fileIds
     *
     * @param int[]|null $fileIds An array of IDs of Files attached to the story.
     *
     * @return self
     */
    public function setFileIds($fileIds)
    {
        if (is_null($fileIds)) {
            throw new \InvalidArgumentException('non-nullable fileIds cannot be null');
        }
        $this->container['fileIds'] = $fileIds;

        return $this;
    }

    /**
     * Gets numTasksCompleted
     *
     * @return int|null
     */
    public function getNumTasksCompleted()
    {
        return $this->container['numTasksCompleted'];
    }

    /**
     * Sets numTasksCompleted
     *
     * @param int|null $numTasksCompleted The number of tasks on the story which are complete.
     *
     * @return self
     */
    public function setNumTasksCompleted($numTasksCompleted)
    {
        if (is_null($numTasksCompleted)) {
            throw new \InvalidArgumentException('non-nullable numTasksCompleted cannot be null');
        }
        $this->container['numTasksCompleted'] = $numTasksCompleted;

        return $this;
    }

    /**
     * Gets workflowId
     *
     * @return int
     */
    public function getWorkflowId()
    {
        return $this->container['workflowId'];
    }

    /**
     * Sets workflowId
     *
     * @param int $workflowId The ID of the workflow the story belongs to.
     *
     * @return self
     */
    public function setWorkflowId($workflowId)
    {
        if (is_null($workflowId)) {
            throw new \InvalidArgumentException('non-nullable workflowId cannot be null');
        }
        $this->container['workflowId'] = $workflowId;

        return $this;
    }

    /**
     * Gets completedAtOverride
     *
     * @return \DateTime
     */
    public function getCompletedAtOverride()
    {
        return $this->container['completedAtOverride'];
    }

    /**
     * Sets completedAtOverride
     *
     * @param \DateTime $completedAtOverride A manual override for the time/date the Story was completed.
     *
     * @return self
     */
    public function setCompletedAtOverride($completedAtOverride)
    {
        if (is_null($completedAtOverride)) {
            array_push($this->openAPINullablesSetToNull, 'completedAtOverride');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('completedAtOverride', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['completedAtOverride'] = $completedAtOverride;

        return $this;
    }

    /**
     * Gets startedAt
     *
     * @return \DateTime
     */
    public function getStartedAt()
    {
        return $this->container['startedAt'];
    }

    /**
     * Sets startedAt
     *
     * @param \DateTime $startedAt The time/date the Story was started.
     *
     * @return self
     */
    public function setStartedAt($startedAt)
    {
        if (is_null($startedAt)) {
            array_push($this->openAPINullablesSetToNull, 'startedAt');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('startedAt', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['startedAt'] = $startedAt;

        return $this;
    }

    /**
     * Gets completedAt
     *
     * @return \DateTime
     */
    public function getCompletedAt()
    {
        return $this->container['completedAt'];
    }

    /**
     * Sets completedAt
     *
     * @param \DateTime $completedAt The time/date the Story was completed.
     *
     * @return self
     */
    public function setCompletedAt($completedAt)
    {
        if (is_null($completedAt)) {
            array_push($this->openAPINullablesSetToNull, 'completedAt');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('completedAt', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['completedAt'] = $completedAt;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the story.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets globalId
     *
     * @return string
     */
    public function getGlobalId()
    {
        return $this->container['globalId'];
    }

    /**
     * Sets globalId
     *
     * @param string $globalId globalId
     *
     * @return self
     */
    public function setGlobalId($globalId)
    {
        if (is_null($globalId)) {
            throw new \InvalidArgumentException('non-nullable globalId cannot be null');
        }
        $this->container['globalId'] = $globalId;

        return $this;
    }

    /**
     * Gets completed
     *
     * @return bool
     */
    public function getCompleted()
    {
        return $this->container['completed'];
    }

    /**
     * Sets completed
     *
     * @param bool $completed A true/false boolean indicating if the Story has been completed.
     *
     * @return self
     */
    public function setCompleted($completed)
    {
        if (is_null($completed)) {
            throw new \InvalidArgumentException('non-nullable completed cannot be null');
        }
        $this->container['completed'] = $completed;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return \Timetoreply\Shortcut\Model\StoryComment[]|null
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param \Timetoreply\Shortcut\Model\StoryComment[]|null $comments An array of comments attached to the story.
     *
     * @return self
     */
    public function setComments($comments)
    {
        if (is_null($comments)) {
            throw new \InvalidArgumentException('non-nullable comments cannot be null');
        }
        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets blocker
     *
     * @return bool
     */
    public function getBlocker()
    {
        return $this->container['blocker'];
    }

    /**
     * Sets blocker
     *
     * @param bool $blocker A true/false boolean indicating if the Story is currently a blocker of another story.
     *
     * @return self
     */
    public function setBlocker($blocker)
    {
        if (is_null($blocker)) {
            throw new \InvalidArgumentException('non-nullable blocker cannot be null');
        }
        $this->container['blocker'] = $blocker;

        return $this;
    }

    /**
     * Gets branches
     *
     * @return \Timetoreply\Shortcut\Model\Branch[]|null
     */
    public function getBranches()
    {
        return $this->container['branches'];
    }

    /**
     * Sets branches
     *
     * @param \Timetoreply\Shortcut\Model\Branch[]|null $branches An array of Git branches attached to the story.
     *
     * @return self
     */
    public function setBranches($branches)
    {
        if (is_null($branches)) {
            throw new \InvalidArgumentException('non-nullable branches cannot be null');
        }
        $this->container['branches'] = $branches;

        return $this;
    }

    /**
     * Gets epicId
     *
     * @return int
     */
    public function getEpicId()
    {
        return $this->container['epicId'];
    }

    /**
     * Sets epicId
     *
     * @param int $epicId The ID of the epic the story belongs to.
     *
     * @return self
     */
    public function setEpicId($epicId)
    {
        if (is_null($epicId)) {
            array_push($this->openAPINullablesSetToNull, 'epicId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('epicId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['epicId'] = $epicId;

        return $this;
    }

    /**
     * Gets storyTemplateId
     *
     * @return string
     */
    public function getStoryTemplateId()
    {
        return $this->container['storyTemplateId'];
    }

    /**
     * Sets storyTemplateId
     *
     * @param string $storyTemplateId The ID of the story template used to create this story, or null if not created using a template.
     *
     * @return self
     */
    public function setStoryTemplateId($storyTemplateId)
    {
        if (is_null($storyTemplateId)) {
            array_push($this->openAPINullablesSetToNull, 'storyTemplateId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('storyTemplateId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['storyTemplateId'] = $storyTemplateId;

        return $this;
    }

    /**
     * Gets externalLinks
     *
     * @return string[]
     */
    public function getExternalLinks()
    {
        return $this->container['externalLinks'];
    }

    /**
     * Sets externalLinks
     *
     * @param string[] $externalLinks An array of external links (strings) associated with a Story
     *
     * @return self
     */
    public function setExternalLinks($externalLinks)
    {
        if (is_null($externalLinks)) {
            throw new \InvalidArgumentException('non-nullable externalLinks cannot be null');
        }
        $this->container['externalLinks'] = $externalLinks;

        return $this;
    }

    /**
     * Gets previousIterationIds
     *
     * @return int[]
     */
    public function getPreviousIterationIds()
    {
        return $this->container['previousIterationIds'];
    }

    /**
     * Sets previousIterationIds
     *
     * @param int[] $previousIterationIds The IDs of the iteration the story belongs to.
     *
     * @return self
     */
    public function setPreviousIterationIds($previousIterationIds)
    {
        if (is_null($previousIterationIds)) {
            throw new \InvalidArgumentException('non-nullable previousIterationIds cannot be null');
        }
        $this->container['previousIterationIds'] = $previousIterationIds;

        return $this;
    }

    /**
     * Gets requestedById
     *
     * @return string
     */
    public function getRequestedById()
    {
        return $this->container['requestedById'];
    }

    /**
     * Sets requestedById
     *
     * @param string $requestedById The ID of the Member that requested the story.
     *
     * @return self
     */
    public function setRequestedById($requestedById)
    {
        if (is_null($requestedById)) {
            throw new \InvalidArgumentException('non-nullable requestedById cannot be null');
        }
        $this->container['requestedById'] = $requestedById;

        return $this;
    }

    /**
     * Gets iterationId
     *
     * @return int
     */
    public function getIterationId()
    {
        return $this->container['iterationId'];
    }

    /**
     * Sets iterationId
     *
     * @param int $iterationId The ID of the iteration the story belongs to.
     *
     * @return self
     */
    public function setIterationId($iterationId)
    {
        if (is_null($iterationId)) {
            array_push($this->openAPINullablesSetToNull, 'iterationId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('iterationId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['iterationId'] = $iterationId;

        return $this;
    }

    /**
     * Gets subTaskStoryIds
     *
     * @return int[]|null
     */
    public function getSubTaskStoryIds()
    {
        return $this->container['subTaskStoryIds'];
    }

    /**
     * Sets subTaskStoryIds
     *
     * @param int[]|null $subTaskStoryIds subTaskStoryIds
     *
     * @return self
     */
    public function setSubTaskStoryIds($subTaskStoryIds)
    {
        if (is_null($subTaskStoryIds)) {
            throw new \InvalidArgumentException('non-nullable subTaskStoryIds cannot be null');
        }
        $this->container['subTaskStoryIds'] = $subTaskStoryIds;

        return $this;
    }

    /**
     * Gets tasks
     *
     * @return \Timetoreply\Shortcut\Model\Task[]|null
     */
    public function getTasks()
    {
        return $this->container['tasks'];
    }

    /**
     * Sets tasks
     *
     * @param \Timetoreply\Shortcut\Model\Task[]|null $tasks An array of tasks connected to the story.
     *
     * @return self
     */
    public function setTasks($tasks)
    {
        if (is_null($tasks)) {
            throw new \InvalidArgumentException('non-nullable tasks cannot be null');
        }
        $this->container['tasks'] = $tasks;

        return $this;
    }

    /**
     * Gets formattedVcsBranchName
     *
     * @return string|null
     */
    public function getFormattedVcsBranchName()
    {
        return $this->container['formattedVcsBranchName'];
    }

    /**
     * Sets formattedVcsBranchName
     *
     * @param string|null $formattedVcsBranchName The formatted branch name for this story.
     *
     * @return self
     */
    public function setFormattedVcsBranchName($formattedVcsBranchName)
    {
        if (is_null($formattedVcsBranchName)) {
            array_push($this->openAPINullablesSetToNull, 'formattedVcsBranchName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('formattedVcsBranchName', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['formattedVcsBranchName'] = $formattedVcsBranchName;

        return $this;
    }

    /**
     * Gets labelIds
     *
     * @return int[]
     */
    public function getLabelIds()
    {
        return $this->container['labelIds'];
    }

    /**
     * Sets labelIds
     *
     * @param int[] $labelIds An array of label ids attached to the story.
     *
     * @return self
     */
    public function setLabelIds($labelIds)
    {
        if (is_null($labelIds)) {
            throw new \InvalidArgumentException('non-nullable labelIds cannot be null');
        }
        $this->container['labelIds'] = $labelIds;

        return $this;
    }

    /**
     * Gets startedAtOverride
     *
     * @return \DateTime
     */
    public function getStartedAtOverride()
    {
        return $this->container['startedAtOverride'];
    }

    /**
     * Sets startedAtOverride
     *
     * @param \DateTime $startedAtOverride A manual override for the time/date the Story was started.
     *
     * @return self
     */
    public function setStartedAtOverride($startedAtOverride)
    {
        if (is_null($startedAtOverride)) {
            array_push($this->openAPINullablesSetToNull, 'startedAtOverride');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('startedAtOverride', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['startedAtOverride'] = $startedAtOverride;

        return $this;
    }

    /**
     * Gets groupId
     *
     * @return string
     */
    public function getGroupId()
    {
        return $this->container['groupId'];
    }

    /**
     * Sets groupId
     *
     * @param string $groupId The ID of the group associated with the story.
     *
     * @return self
     */
    public function setGroupId($groupId)
    {
        if (is_null($groupId)) {
            array_push($this->openAPINullablesSetToNull, 'groupId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('groupId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['groupId'] = $groupId;

        return $this;
    }

    /**
     * Gets workflowStateId
     *
     * @return int
     */
    public function getWorkflowStateId()
    {
        return $this->container['workflowStateId'];
    }

    /**
     * Sets workflowStateId
     *
     * @param int $workflowStateId The ID of the workflow state the story is currently in.
     *
     * @return self
     */
    public function setWorkflowStateId($workflowStateId)
    {
        if (is_null($workflowStateId)) {
            throw new \InvalidArgumentException('non-nullable workflowStateId cannot be null');
        }
        $this->container['workflowStateId'] = $workflowStateId;

        return $this;
    }

    /**
     * Gets updatedAt
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updatedAt'];
    }

    /**
     * Sets updatedAt
     *
     * @param \DateTime $updatedAt The time/date the Story was updated.
     *
     * @return self
     */
    public function setUpdatedAt($updatedAt)
    {
        if (is_null($updatedAt)) {
            array_push($this->openAPINullablesSetToNull, 'updatedAt');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('updatedAt', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['updatedAt'] = $updatedAt;

        return $this;
    }

    /**
     * Gets pullRequests
     *
     * @return \Timetoreply\Shortcut\Model\PullRequest[]|null
     */
    public function getPullRequests()
    {
        return $this->container['pullRequests'];
    }

    /**
     * Sets pullRequests
     *
     * @param \Timetoreply\Shortcut\Model\PullRequest[]|null $pullRequests An array of Pull/Merge Requests attached to the story.
     *
     * @return self
     */
    public function setPullRequests($pullRequests)
    {
        if (is_null($pullRequests)) {
            throw new \InvalidArgumentException('non-nullable pullRequests cannot be null');
        }
        $this->container['pullRequests'] = $pullRequests;

        return $this;
    }

    /**
     * Gets groupMentionIds
     *
     * @return string[]
     */
    public function getGroupMentionIds()
    {
        return $this->container['groupMentionIds'];
    }

    /**
     * Sets groupMentionIds
     *
     * @param string[] $groupMentionIds An array of Group IDs that have been mentioned in the Story description.
     *
     * @return self
     */
    public function setGroupMentionIds($groupMentionIds)
    {
        if (is_null($groupMentionIds)) {
            throw new \InvalidArgumentException('non-nullable groupMentionIds cannot be null');
        }
        $this->container['groupMentionIds'] = $groupMentionIds;

        return $this;
    }

    /**
     * Gets followerIds
     *
     * @return string[]
     */
    public function getFollowerIds()
    {
        return $this->container['followerIds'];
    }

    /**
     * Sets followerIds
     *
     * @param string[] $followerIds An array of UUIDs for any Members listed as Followers.
     *
     * @return self
     */
    public function setFollowerIds($followerIds)
    {
        if (is_null($followerIds)) {
            throw new \InvalidArgumentException('non-nullable followerIds cannot be null');
        }
        $this->container['followerIds'] = $followerIds;

        return $this;
    }

    /**
     * Gets ownerIds
     *
     * @return string[]
     */
    public function getOwnerIds()
    {
        return $this->container['ownerIds'];
    }

    /**
     * Sets ownerIds
     *
     * @param string[] $ownerIds An array of UUIDs of the owners of this story.
     *
     * @return self
     */
    public function setOwnerIds($ownerIds)
    {
        if (is_null($ownerIds)) {
            throw new \InvalidArgumentException('non-nullable ownerIds cannot be null');
        }
        $this->container['ownerIds'] = $ownerIds;

        return $this;
    }

    /**
     * Gets externalId
     *
     * @return string
     */
    public function getExternalId()
    {
        return $this->container['externalId'];
    }

    /**
     * Sets externalId
     *
     * @param string $externalId This field can be set to another unique ID. In the case that the Story has been imported from another tool, the ID in the other tool can be indicated here.
     *
     * @return self
     */
    public function setExternalId($externalId)
    {
        if (is_null($externalId)) {
            array_push($this->openAPINullablesSetToNull, 'externalId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('externalId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['externalId'] = $externalId;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The unique ID of the Story.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets leadTime
     *
     * @return int|null
     */
    public function getLeadTime()
    {
        return $this->container['leadTime'];
    }

    /**
     * Sets leadTime
     *
     * @param int|null $leadTime The lead time (in seconds) of this story when complete.
     *
     * @return self
     */
    public function setLeadTime($leadTime)
    {
        if (is_null($leadTime)) {
            throw new \InvalidArgumentException('non-nullable leadTime cannot be null');
        }
        $this->container['leadTime'] = $leadTime;

        return $this;
    }

    /**
     * Gets parentStoryId
     *
     * @return int|null
     */
    public function getParentStoryId()
    {
        return $this->container['parentStoryId'];
    }

    /**
     * Sets parentStoryId
     *
     * @param int|null $parentStoryId parentStoryId
     *
     * @return self
     */
    public function setParentStoryId($parentStoryId)
    {
        if (is_null($parentStoryId)) {
            array_push($this->openAPINullablesSetToNull, 'parentStoryId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('parentStoryId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['parentStoryId'] = $parentStoryId;

        return $this;
    }

    /**
     * Gets estimate
     *
     * @return int
     */
    public function getEstimate()
    {
        return $this->container['estimate'];
    }

    /**
     * Sets estimate
     *
     * @param int $estimate The numeric point estimate of the story. Can also be null, which means unestimated.
     *
     * @return self
     */
    public function setEstimate($estimate)
    {
        if (is_null($estimate)) {
            array_push($this->openAPINullablesSetToNull, 'estimate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('estimate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['estimate'] = $estimate;

        return $this;
    }

    /**
     * Gets commits
     *
     * @return \Timetoreply\Shortcut\Model\Commit[]|null
     */
    public function getCommits()
    {
        return $this->container['commits'];
    }

    /**
     * Sets commits
     *
     * @param \Timetoreply\Shortcut\Model\Commit[]|null $commits An array of commits attached to the story.
     *
     * @return self
     */
    public function setCommits($commits)
    {
        if (is_null($commits)) {
            throw new \InvalidArgumentException('non-nullable commits cannot be null');
        }
        $this->container['commits'] = $commits;

        return $this;
    }

    /**
     * Gets files
     *
     * @return \Timetoreply\Shortcut\Model\UploadedFile[]|null
     */
    public function getFiles()
    {
        return $this->container['files'];
    }

    /**
     * Sets files
     *
     * @param \Timetoreply\Shortcut\Model\UploadedFile[]|null $files An array of files attached to the story.
     *
     * @return self
     */
    public function setFiles($files)
    {
        if (is_null($files)) {
            throw new \InvalidArgumentException('non-nullable files cannot be null');
        }
        $this->container['files'] = $files;

        return $this;
    }

    /**
     * Gets position
     *
     * @return int
     */
    public function getPosition()
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     *
     * @param int $position A number representing the position of the story in relation to every other story in the current project.
     *
     * @return self
     */
    public function setPosition($position)
    {
        if (is_null($position)) {
            throw new \InvalidArgumentException('non-nullable position cannot be null');
        }
        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets blocked
     *
     * @return bool
     */
    public function getBlocked()
    {
        return $this->container['blocked'];
    }

    /**
     * Sets blocked
     *
     * @param bool $blocked A true/false boolean indicating if the Story is currently blocked.
     *
     * @return self
     */
    public function setBlocked($blocked)
    {
        if (is_null($blocked)) {
            throw new \InvalidArgumentException('non-nullable blocked cannot be null');
        }
        $this->container['blocked'] = $blocked;

        return $this;
    }

    /**
     * Gets projectId
     *
     * @return int
     */
    public function getProjectId()
    {
        return $this->container['projectId'];
    }

    /**
     * Sets projectId
     *
     * @param int $projectId The ID of the project the story belongs to.
     *
     * @return self
     */
    public function setProjectId($projectId)
    {
        if (is_null($projectId)) {
            array_push($this->openAPINullablesSetToNull, 'projectId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('projectId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['projectId'] = $projectId;

        return $this;
    }

    /**
     * Gets linkedFileIds
     *
     * @return int[]|null
     */
    public function getLinkedFileIds()
    {
        return $this->container['linkedFileIds'];
    }

    /**
     * Sets linkedFileIds
     *
     * @param int[]|null $linkedFileIds An array of IDs of LinkedFiles attached to the story.
     *
     * @return self
     */
    public function setLinkedFileIds($linkedFileIds)
    {
        if (is_null($linkedFileIds)) {
            throw new \InvalidArgumentException('non-nullable linkedFileIds cannot be null');
        }
        $this->container['linkedFileIds'] = $linkedFileIds;

        return $this;
    }

    /**
     * Gets deadline
     *
     * @return \DateTime
     */
    public function getDeadline()
    {
        return $this->container['deadline'];
    }

    /**
     * Sets deadline
     *
     * @param \DateTime $deadline The due date of the story.
     *
     * @return self
     */
    public function setDeadline($deadline)
    {
        if (is_null($deadline)) {
            array_push($this->openAPINullablesSetToNull, 'deadline');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deadline', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['deadline'] = $deadline;

        return $this;
    }

    /**
     * Gets stats
     *
     * @return \Timetoreply\Shortcut\Model\StoryStats
     */
    public function getStats()
    {
        return $this->container['stats'];
    }

    /**
     * Sets stats
     *
     * @param \Timetoreply\Shortcut\Model\StoryStats $stats stats
     *
     * @return self
     */
    public function setStats($stats)
    {
        if (is_null($stats)) {
            throw new \InvalidArgumentException('non-nullable stats cannot be null');
        }
        $this->container['stats'] = $stats;

        return $this;
    }

    /**
     * Gets commentIds
     *
     * @return int[]|null
     */
    public function getCommentIds()
    {
        return $this->container['commentIds'];
    }

    /**
     * Sets commentIds
     *
     * @param int[]|null $commentIds An array of IDs of Comments attached to the story.
     *
     * @return self
     */
    public function setCommentIds($commentIds)
    {
        if (is_null($commentIds)) {
            throw new \InvalidArgumentException('non-nullable commentIds cannot be null');
        }
        $this->container['commentIds'] = $commentIds;

        return $this;
    }

    /**
     * Gets cycleTime
     *
     * @return int|null
     */
    public function getCycleTime()
    {
        return $this->container['cycleTime'];
    }

    /**
     * Sets cycleTime
     *
     * @param int|null $cycleTime The cycle time (in seconds) of this story when complete.
     *
     * @return self
     */
    public function setCycleTime($cycleTime)
    {
        if (is_null($cycleTime)) {
            throw new \InvalidArgumentException('non-nullable cycleTime cannot be null');
        }
        $this->container['cycleTime'] = $cycleTime;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param \DateTime $createdAt The time/date the Story was created.
     *
     * @return self
     */
    public function setCreatedAt($createdAt)
    {
        if (is_null($createdAt)) {
            throw new \InvalidArgumentException('non-nullable createdAt cannot be null');
        }
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Gets movedAt
     *
     * @return \DateTime
     */
    public function getMovedAt()
    {
        return $this->container['movedAt'];
    }

    /**
     * Sets movedAt
     *
     * @param \DateTime $movedAt The time/date the Story was last changed workflow-state.
     *
     * @return self
     */
    public function setMovedAt($movedAt)
    {
        if (is_null($movedAt)) {
            array_push($this->openAPINullablesSetToNull, 'movedAt');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('movedAt', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['movedAt'] = $movedAt;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


