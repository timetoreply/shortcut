<?php
/**
 * StorySearchResult
 *
 * PHP version 5
 *
 * @category Class
 * @package  Timetoreply\Shortcut
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Shortcut API
 *
 * Shortcut API
 *
 * OpenAPI spec version: 3.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.43-SNAPSHOT
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Timetoreply\Shortcut\Model;

use ArrayAccess;
use DateTime;
use ReturnTypeWillChange;
use Timetoreply\Shortcut\ObjectSerializer;

/**
 * StorySearchResult Class Doc Comment
 *
 * @category Class
 * @description A Story in search results. This is typed differently from Story because the details&#x3D;slim search argument will omit some fields.
 * @package  Timetoreply\Shortcut
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class StorySearchResult implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'StorySearchResult';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'appUrl' => 'string',
        'description' => 'string',
        'archived' => 'bool',
        'started' => 'bool',
        'storyLinks' => '\Timetoreply\Shortcut\Model\TypedStoryLink[]',
        'entityType' => 'string',
        'labels' => '\Timetoreply\Shortcut\Model\LabelSlim[]',
        'taskIds' => 'int[]',
        'mentionIds' => 'string[]',
        'syncedItem' => '\Timetoreply\Shortcut\Model\SyncedItem',
        'memberMentionIds' => 'string[]',
        'storyType' => 'string',
        'customFields' => '\Timetoreply\Shortcut\Model\StoryCustomField[]',
        'linkedFiles' => '\Timetoreply\Shortcut\Model\LinkedFile[]',
        'fileIds' => 'int[]',
        'numTasksCompleted' => 'int',
        'workflowId' => 'int',
        'completedAtOverride' => '\DateTime',
        'startedAt' => '\DateTime',
        'completedAt' => '\DateTime',
        'name' => 'string',
        'globalId' => 'string',
        'completed' => 'bool',
        'comments' => '\Timetoreply\Shortcut\Model\StoryComment[]',
        'blocker' => 'bool',
        'branches' => '\Timetoreply\Shortcut\Model\Branch[]',
        'epicId' => 'int',
        'unresolvedBlockerComments' => 'int[]',
        'storyTemplateId' => 'string',
        'externalLinks' => 'string[]',
        'previousIterationIds' => 'int[]',
        'requestedById' => 'string',
        'iterationId' => 'int',
        'tasks' => '\Timetoreply\Shortcut\Model\Task[]',
        'labelIds' => 'int[]',
        'startedAtOverride' => '\DateTime',
        'groupId' => 'string',
        'workflowStateId' => 'int',
        'updatedAt' => '\DateTime',
        'pullRequests' => '\Timetoreply\Shortcut\Model\PullRequest[]',
        'groupMentionIds' => 'string[]',
        'followerIds' => 'string[]',
        'ownerIds' => 'string[]',
        'externalId' => 'string',
        'id' => 'int',
        'leadTime' => 'int',
        'estimate' => 'int',
        'commits' => '\Timetoreply\Shortcut\Model\Commit[]',
        'files' => '\Timetoreply\Shortcut\Model\UploadedFile[]',
        'position' => 'int',
        'blocked' => 'bool',
        'projectId' => 'int',
        'linkedFileIds' => 'int[]',
        'deadline' => '\DateTime',
        'stats' => '\Timetoreply\Shortcut\Model\StoryStats',
        'commentIds' => 'int[]',
        'cycleTime' => 'int',
        'createdAt' => '\DateTime',
        'movedAt' => '\DateTime'];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'appUrl' => null,
        'description' => null,
        'archived' => null,
        'started' => null,
        'storyLinks' => null,
        'entityType' => null,
        'labels' => null,
        'taskIds' => 'int64',
        'mentionIds' => 'uuid',
        'syncedItem' => null,
        'memberMentionIds' => 'uuid',
        'storyType' => null,
        'customFields' => null,
        'linkedFiles' => null,
        'fileIds' => 'int64',
        'numTasksCompleted' => 'int64',
        'workflowId' => 'int64',
        'completedAtOverride' => 'date-time',
        'startedAt' => 'date-time',
        'completedAt' => 'date-time',
        'name' => null,
        'globalId' => null,
        'completed' => null,
        'comments' => null,
        'blocker' => null,
        'branches' => null,
        'epicId' => 'int64',
        'unresolvedBlockerComments' => 'int64',
        'storyTemplateId' => 'uuid',
        'externalLinks' => null,
        'previousIterationIds' => 'int64',
        'requestedById' => 'uuid',
        'iterationId' => 'int64',
        'tasks' => null,
        'labelIds' => 'int64',
        'startedAtOverride' => 'date-time',
        'groupId' => 'uuid',
        'workflowStateId' => 'int64',
        'updatedAt' => 'date-time',
        'pullRequests' => null,
        'groupMentionIds' => 'uuid',
        'followerIds' => 'uuid',
        'ownerIds' => 'uuid',
        'externalId' => null,
        'id' => 'int64',
        'leadTime' => 'int64',
        'estimate' => 'int64',
        'commits' => null,
        'files' => null,
        'position' => 'int64',
        'blocked' => null,
        'projectId' => 'int64',
        'linkedFileIds' => 'int64',
        'deadline' => 'date-time',
        'stats' => null,
        'commentIds' => 'int64',
        'cycleTime' => 'int64',
        'createdAt' => 'date-time',
        'movedAt' => 'date-time'];
    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'appUrl' => 'app_url',
        'description' => 'description',
        'archived' => 'archived',
        'started' => 'started',
        'storyLinks' => 'story_links',
        'entityType' => 'entity_type',
        'labels' => 'labels',
        'taskIds' => 'task_ids',
        'mentionIds' => 'mention_ids',
        'syncedItem' => 'synced_item',
        'memberMentionIds' => 'member_mention_ids',
        'storyType' => 'story_type',
        'customFields' => 'custom_fields',
        'linkedFiles' => 'linked_files',
        'fileIds' => 'file_ids',
        'numTasksCompleted' => 'num_tasks_completed',
        'workflowId' => 'workflow_id',
        'completedAtOverride' => 'completed_at_override',
        'startedAt' => 'started_at',
        'completedAt' => 'completed_at',
        'name' => 'name',
        'globalId' => 'global_id',
        'completed' => 'completed',
        'comments' => 'comments',
        'blocker' => 'blocker',
        'branches' => 'branches',
        'epicId' => 'epic_id',
        'unresolvedBlockerComments' => 'unresolved_blocker_comments',
        'storyTemplateId' => 'story_template_id',
        'externalLinks' => 'external_links',
        'previousIterationIds' => 'previous_iteration_ids',
        'requestedById' => 'requested_by_id',
        'iterationId' => 'iteration_id',
        'tasks' => 'tasks',
        'labelIds' => 'label_ids',
        'startedAtOverride' => 'started_at_override',
        'groupId' => 'group_id',
        'workflowStateId' => 'workflow_state_id',
        'updatedAt' => 'updated_at',
        'pullRequests' => 'pull_requests',
        'groupMentionIds' => 'group_mention_ids',
        'followerIds' => 'follower_ids',
        'ownerIds' => 'owner_ids',
        'externalId' => 'external_id',
        'id' => 'id',
        'leadTime' => 'lead_time',
        'estimate' => 'estimate',
        'commits' => 'commits',
        'files' => 'files',
        'position' => 'position',
        'blocked' => 'blocked',
        'projectId' => 'project_id',
        'linkedFileIds' => 'linked_file_ids',
        'deadline' => 'deadline',
        'stats' => 'stats',
        'commentIds' => 'comment_ids',
        'cycleTime' => 'cycle_time',
        'createdAt' => 'created_at',
        'movedAt' => 'moved_at'];
    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'appUrl' => 'setAppUrl',
        'description' => 'setDescription',
        'archived' => 'setArchived',
        'started' => 'setStarted',
        'storyLinks' => 'setStoryLinks',
        'entityType' => 'setEntityType',
        'labels' => 'setLabels',
        'taskIds' => 'setTaskIds',
        'mentionIds' => 'setMentionIds',
        'syncedItem' => 'setSyncedItem',
        'memberMentionIds' => 'setMemberMentionIds',
        'storyType' => 'setStoryType',
        'customFields' => 'setCustomFields',
        'linkedFiles' => 'setLinkedFiles',
        'fileIds' => 'setFileIds',
        'numTasksCompleted' => 'setNumTasksCompleted',
        'workflowId' => 'setWorkflowId',
        'completedAtOverride' => 'setCompletedAtOverride',
        'startedAt' => 'setStartedAt',
        'completedAt' => 'setCompletedAt',
        'name' => 'setName',
        'globalId' => 'setGlobalId',
        'completed' => 'setCompleted',
        'comments' => 'setComments',
        'blocker' => 'setBlocker',
        'branches' => 'setBranches',
        'epicId' => 'setEpicId',
        'unresolvedBlockerComments' => 'setUnresolvedBlockerComments',
        'storyTemplateId' => 'setStoryTemplateId',
        'externalLinks' => 'setExternalLinks',
        'previousIterationIds' => 'setPreviousIterationIds',
        'requestedById' => 'setRequestedById',
        'iterationId' => 'setIterationId',
        'tasks' => 'setTasks',
        'labelIds' => 'setLabelIds',
        'startedAtOverride' => 'setStartedAtOverride',
        'groupId' => 'setGroupId',
        'workflowStateId' => 'setWorkflowStateId',
        'updatedAt' => 'setUpdatedAt',
        'pullRequests' => 'setPullRequests',
        'groupMentionIds' => 'setGroupMentionIds',
        'followerIds' => 'setFollowerIds',
        'ownerIds' => 'setOwnerIds',
        'externalId' => 'setExternalId',
        'id' => 'setId',
        'leadTime' => 'setLeadTime',
        'estimate' => 'setEstimate',
        'commits' => 'setCommits',
        'files' => 'setFiles',
        'position' => 'setPosition',
        'blocked' => 'setBlocked',
        'projectId' => 'setProjectId',
        'linkedFileIds' => 'setLinkedFileIds',
        'deadline' => 'setDeadline',
        'stats' => 'setStats',
        'commentIds' => 'setCommentIds',
        'cycleTime' => 'setCycleTime',
        'createdAt' => 'setCreatedAt',
        'movedAt' => 'setMovedAt'];
    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'appUrl' => 'getAppUrl',
        'description' => 'getDescription',
        'archived' => 'getArchived',
        'started' => 'getStarted',
        'storyLinks' => 'getStoryLinks',
        'entityType' => 'getEntityType',
        'labels' => 'getLabels',
        'taskIds' => 'getTaskIds',
        'mentionIds' => 'getMentionIds',
        'syncedItem' => 'getSyncedItem',
        'memberMentionIds' => 'getMemberMentionIds',
        'storyType' => 'getStoryType',
        'customFields' => 'getCustomFields',
        'linkedFiles' => 'getLinkedFiles',
        'fileIds' => 'getFileIds',
        'numTasksCompleted' => 'getNumTasksCompleted',
        'workflowId' => 'getWorkflowId',
        'completedAtOverride' => 'getCompletedAtOverride',
        'startedAt' => 'getStartedAt',
        'completedAt' => 'getCompletedAt',
        'name' => 'getName',
        'globalId' => 'getGlobalId',
        'completed' => 'getCompleted',
        'comments' => 'getComments',
        'blocker' => 'getBlocker',
        'branches' => 'getBranches',
        'epicId' => 'getEpicId',
        'unresolvedBlockerComments' => 'getUnresolvedBlockerComments',
        'storyTemplateId' => 'getStoryTemplateId',
        'externalLinks' => 'getExternalLinks',
        'previousIterationIds' => 'getPreviousIterationIds',
        'requestedById' => 'getRequestedById',
        'iterationId' => 'getIterationId',
        'tasks' => 'getTasks',
        'labelIds' => 'getLabelIds',
        'startedAtOverride' => 'getStartedAtOverride',
        'groupId' => 'getGroupId',
        'workflowStateId' => 'getWorkflowStateId',
        'updatedAt' => 'getUpdatedAt',
        'pullRequests' => 'getPullRequests',
        'groupMentionIds' => 'getGroupMentionIds',
        'followerIds' => 'getFollowerIds',
        'ownerIds' => 'getOwnerIds',
        'externalId' => 'getExternalId',
        'id' => 'getId',
        'leadTime' => 'getLeadTime',
        'estimate' => 'getEstimate',
        'commits' => 'getCommits',
        'files' => 'getFiles',
        'position' => 'getPosition',
        'blocked' => 'getBlocked',
        'projectId' => 'getProjectId',
        'linkedFileIds' => 'getLinkedFileIds',
        'deadline' => 'getDeadline',
        'stats' => 'getStats',
        'commentIds' => 'getCommentIds',
        'cycleTime' => 'getCycleTime',
        'createdAt' => 'getCreatedAt',
        'movedAt' => 'getMovedAt'];
    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['appUrl'] = isset($data['appUrl']) ? $data['appUrl'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['archived'] = isset($data['archived']) ? $data['archived'] : null;
        $this->container['started'] = isset($data['started']) ? $data['started'] : null;
        $this->container['storyLinks'] = isset($data['storyLinks']) ? $data['storyLinks'] : null;
        $this->container['entityType'] = isset($data['entityType']) ? $data['entityType'] : null;
        $this->container['labels'] = isset($data['labels']) ? $data['labels'] : null;
        $this->container['taskIds'] = isset($data['taskIds']) ? $data['taskIds'] : null;
        $this->container['mentionIds'] = isset($data['mentionIds']) ? $data['mentionIds'] : null;
        $this->container['syncedItem'] = isset($data['syncedItem']) ? $data['syncedItem'] : null;
        $this->container['memberMentionIds'] = isset($data['memberMentionIds']) ? $data['memberMentionIds'] : null;
        $this->container['storyType'] = isset($data['storyType']) ? $data['storyType'] : null;
        $this->container['customFields'] = isset($data['customFields']) ? $data['customFields'] : null;
        $this->container['linkedFiles'] = isset($data['linkedFiles']) ? $data['linkedFiles'] : null;
        $this->container['fileIds'] = isset($data['fileIds']) ? $data['fileIds'] : null;
        $this->container['numTasksCompleted'] = isset($data['numTasksCompleted']) ? $data['numTasksCompleted'] : null;
        $this->container['workflowId'] = isset($data['workflowId']) ? $data['workflowId'] : null;
        $this->container['completedAtOverride'] = isset($data['completedAtOverride']) ? $data['completedAtOverride'] : null;
        $this->container['startedAt'] = isset($data['startedAt']) ? $data['startedAt'] : null;
        $this->container['completedAt'] = isset($data['completedAt']) ? $data['completedAt'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['globalId'] = isset($data['globalId']) ? $data['globalId'] : null;
        $this->container['completed'] = isset($data['completed']) ? $data['completed'] : null;
        $this->container['comments'] = isset($data['comments']) ? $data['comments'] : null;
        $this->container['blocker'] = isset($data['blocker']) ? $data['blocker'] : null;
        $this->container['branches'] = isset($data['branches']) ? $data['branches'] : null;
        $this->container['epicId'] = isset($data['epicId']) ? $data['epicId'] : null;
        $this->container['unresolvedBlockerComments'] = isset($data['unresolvedBlockerComments']) ? $data['unresolvedBlockerComments'] : null;
        $this->container['storyTemplateId'] = isset($data['storyTemplateId']) ? $data['storyTemplateId'] : null;
        $this->container['externalLinks'] = isset($data['externalLinks']) ? $data['externalLinks'] : null;
        $this->container['previousIterationIds'] = isset($data['previousIterationIds']) ? $data['previousIterationIds'] : null;
        $this->container['requestedById'] = isset($data['requestedById']) ? $data['requestedById'] : null;
        $this->container['iterationId'] = isset($data['iterationId']) ? $data['iterationId'] : null;
        $this->container['tasks'] = isset($data['tasks']) ? $data['tasks'] : null;
        $this->container['labelIds'] = isset($data['labelIds']) ? $data['labelIds'] : null;
        $this->container['startedAtOverride'] = isset($data['startedAtOverride']) ? $data['startedAtOverride'] : null;
        $this->container['groupId'] = isset($data['groupId']) ? $data['groupId'] : null;
        $this->container['workflowStateId'] = isset($data['workflowStateId']) ? $data['workflowStateId'] : null;
        $this->container['updatedAt'] = isset($data['updatedAt']) ? $data['updatedAt'] : null;
        $this->container['pullRequests'] = isset($data['pullRequests']) ? $data['pullRequests'] : null;
        $this->container['groupMentionIds'] = isset($data['groupMentionIds']) ? $data['groupMentionIds'] : null;
        $this->container['followerIds'] = isset($data['followerIds']) ? $data['followerIds'] : null;
        $this->container['ownerIds'] = isset($data['ownerIds']) ? $data['ownerIds'] : null;
        $this->container['externalId'] = isset($data['externalId']) ? $data['externalId'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['leadTime'] = isset($data['leadTime']) ? $data['leadTime'] : null;
        $this->container['estimate'] = isset($data['estimate']) ? $data['estimate'] : null;
        $this->container['commits'] = isset($data['commits']) ? $data['commits'] : null;
        $this->container['files'] = isset($data['files']) ? $data['files'] : null;
        $this->container['position'] = isset($data['position']) ? $data['position'] : null;
        $this->container['blocked'] = isset($data['blocked']) ? $data['blocked'] : null;
        $this->container['projectId'] = isset($data['projectId']) ? $data['projectId'] : null;
        $this->container['linkedFileIds'] = isset($data['linkedFileIds']) ? $data['linkedFileIds'] : null;
        $this->container['deadline'] = isset($data['deadline']) ? $data['deadline'] : null;
        $this->container['stats'] = isset($data['stats']) ? $data['stats'] : null;
        $this->container['commentIds'] = isset($data['commentIds']) ? $data['commentIds'] : null;
        $this->container['cycleTime'] = isset($data['cycleTime']) ? $data['cycleTime'] : null;
        $this->container['createdAt'] = isset($data['createdAt']) ? $data['createdAt'] : null;
        $this->container['movedAt'] = isset($data['movedAt']) ? $data['movedAt'] : null;
    }

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['appUrl'] === null) {
            $invalidProperties[] = "'appUrl' can't be null";
        }
        if ($this->container['archived'] === null) {
            $invalidProperties[] = "'archived' can't be null";
        }
        if ($this->container['started'] === null) {
            $invalidProperties[] = "'started' can't be null";
        }
        if ($this->container['storyLinks'] === null) {
            $invalidProperties[] = "'storyLinks' can't be null";
        }
        if ($this->container['entityType'] === null) {
            $invalidProperties[] = "'entityType' can't be null";
        }
        if ($this->container['labels'] === null) {
            $invalidProperties[] = "'labels' can't be null";
        }
        if ($this->container['mentionIds'] === null) {
            $invalidProperties[] = "'mentionIds' can't be null";
        }
        if ($this->container['memberMentionIds'] === null) {
            $invalidProperties[] = "'memberMentionIds' can't be null";
        }
        if ($this->container['storyType'] === null) {
            $invalidProperties[] = "'storyType' can't be null";
        }
        if ($this->container['workflowId'] === null) {
            $invalidProperties[] = "'workflowId' can't be null";
        }
        if ($this->container['completedAtOverride'] === null) {
            $invalidProperties[] = "'completedAtOverride' can't be null";
        }
        if ($this->container['startedAt'] === null) {
            $invalidProperties[] = "'startedAt' can't be null";
        }
        if ($this->container['completedAt'] === null) {
            $invalidProperties[] = "'completedAt' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['globalId'] === null) {
            $invalidProperties[] = "'globalId' can't be null";
        }
        if ($this->container['completed'] === null) {
            $invalidProperties[] = "'completed' can't be null";
        }
        if ($this->container['blocker'] === null) {
            $invalidProperties[] = "'blocker' can't be null";
        }
        if ($this->container['epicId'] === null) {
            $invalidProperties[] = "'epicId' can't be null";
        }
        if ($this->container['storyTemplateId'] === null) {
            $invalidProperties[] = "'storyTemplateId' can't be null";
        }
        if ($this->container['externalLinks'] === null) {
            $invalidProperties[] = "'externalLinks' can't be null";
        }
        if ($this->container['previousIterationIds'] === null) {
            $invalidProperties[] = "'previousIterationIds' can't be null";
        }
        if ($this->container['requestedById'] === null) {
            $invalidProperties[] = "'requestedById' can't be null";
        }
        if ($this->container['iterationId'] === null) {
            $invalidProperties[] = "'iterationId' can't be null";
        }
        if ($this->container['labelIds'] === null) {
            $invalidProperties[] = "'labelIds' can't be null";
        }
        if ($this->container['startedAtOverride'] === null) {
            $invalidProperties[] = "'startedAtOverride' can't be null";
        }
        if ($this->container['groupId'] === null) {
            $invalidProperties[] = "'groupId' can't be null";
        }
        if ($this->container['workflowStateId'] === null) {
            $invalidProperties[] = "'workflowStateId' can't be null";
        }
        if ($this->container['updatedAt'] === null) {
            $invalidProperties[] = "'updatedAt' can't be null";
        }
        if ($this->container['groupMentionIds'] === null) {
            $invalidProperties[] = "'groupMentionIds' can't be null";
        }
        if ($this->container['followerIds'] === null) {
            $invalidProperties[] = "'followerIds' can't be null";
        }
        if ($this->container['ownerIds'] === null) {
            $invalidProperties[] = "'ownerIds' can't be null";
        }
        if ($this->container['externalId'] === null) {
            $invalidProperties[] = "'externalId' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['estimate'] === null) {
            $invalidProperties[] = "'estimate' can't be null";
        }
        if ($this->container['position'] === null) {
            $invalidProperties[] = "'position' can't be null";
        }
        if ($this->container['blocked'] === null) {
            $invalidProperties[] = "'blocked' can't be null";
        }
        if ($this->container['projectId'] === null) {
            $invalidProperties[] = "'projectId' can't be null";
        }
        if ($this->container['deadline'] === null) {
            $invalidProperties[] = "'deadline' can't be null";
        }
        if ($this->container['stats'] === null) {
            $invalidProperties[] = "'stats' can't be null";
        }
        if ($this->container['createdAt'] === null) {
            $invalidProperties[] = "'createdAt' can't be null";
        }
        if ($this->container['movedAt'] === null) {
            $invalidProperties[] = "'movedAt' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Gets appUrl
     *
     * @return string
     */
    public function getAppUrl()
    {
        return $this->container['appUrl'];
    }

    /**
     * Sets appUrl
     *
     * @param string $appUrl The Shortcut application url for the Story.
     *
     * @return $this
     */
    public function setAppUrl($appUrl)
    {
        $this->container['appUrl'] = $appUrl;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description The description of the story.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets archived
     *
     * @return bool
     */
    public function getArchived()
    {
        return $this->container['archived'];
    }

    /**
     * Sets archived
     *
     * @param bool $archived True if the story has been archived or not.
     *
     * @return $this
     */
    public function setArchived($archived)
    {
        $this->container['archived'] = $archived;

        return $this;
    }

    /**
     * Gets started
     *
     * @return bool
     */
    public function getStarted()
    {
        return $this->container['started'];
    }

    /**
     * Sets started
     *
     * @param bool $started A true/false boolean indicating if the Story has been started.
     *
     * @return $this
     */
    public function setStarted($started)
    {
        $this->container['started'] = $started;

        return $this;
    }

    /**
     * Gets storyLinks
     *
     * @return TypedStoryLink[]
     */
    public function getStoryLinks()
    {
        return $this->container['storyLinks'];
    }

    /**
     * Sets storyLinks
     *
     * @param TypedStoryLink[] $storyLinks An array of story links attached to the Story.
     *
     * @return $this
     */
    public function setStoryLinks($storyLinks)
    {
        $this->container['storyLinks'] = $storyLinks;

        return $this;
    }

    /**
     * Gets entityType
     *
     * @return string
     */
    public function getEntityType()
    {
        return $this->container['entityType'];
    }

    /**
     * Sets entityType
     *
     * @param string $entityType A string description of this resource.
     *
     * @return $this
     */
    public function setEntityType($entityType)
    {
        $this->container['entityType'] = $entityType;

        return $this;
    }

    /**
     * Gets labels
     *
     * @return LabelSlim[]
     */
    public function getLabels()
    {
        return $this->container['labels'];
    }

    /**
     * Sets labels
     *
     * @param LabelSlim[] $labels An array of labels attached to the story.
     *
     * @return $this
     */
    public function setLabels($labels)
    {
        $this->container['labels'] = $labels;

        return $this;
    }

    /**
     * Gets taskIds
     *
     * @return int[]
     */
    public function getTaskIds()
    {
        return $this->container['taskIds'];
    }

    /**
     * Sets taskIds
     *
     * @param int[] $taskIds An array of IDs of Tasks attached to the story.
     *
     * @return $this
     */
    public function setTaskIds($taskIds)
    {
        $this->container['taskIds'] = $taskIds;

        return $this;
    }

    /**
     * Gets mentionIds
     *
     * @return string[]
     */
    public function getMentionIds()
    {
        return $this->container['mentionIds'];
    }

    /**
     * Sets mentionIds
     *
     * @param string[] $mentionIds Deprecated: use member_mention_ids.
     *
     * @return $this
     */
    public function setMentionIds($mentionIds)
    {
        $this->container['mentionIds'] = $mentionIds;

        return $this;
    }

    /**
     * Gets syncedItem
     *
     * @return SyncedItem
     */
    public function getSyncedItem()
    {
        return $this->container['syncedItem'];
    }

    /**
     * Sets syncedItem
     *
     * @param SyncedItem $syncedItem syncedItem
     *
     * @return $this
     */
    public function setSyncedItem($syncedItem)
    {
        $this->container['syncedItem'] = $syncedItem;

        return $this;
    }

    /**
     * Gets memberMentionIds
     *
     * @return string[]
     */
    public function getMemberMentionIds()
    {
        return $this->container['memberMentionIds'];
    }

    /**
     * Sets memberMentionIds
     *
     * @param string[] $memberMentionIds An array of Member IDs that have been mentioned in the Story description.
     *
     * @return $this
     */
    public function setMemberMentionIds($memberMentionIds)
    {
        $this->container['memberMentionIds'] = $memberMentionIds;

        return $this;
    }

    /**
     * Gets storyType
     *
     * @return string
     */
    public function getStoryType()
    {
        return $this->container['storyType'];
    }

    /**
     * Sets storyType
     *
     * @param string $storyType The type of story (feature, bug, chore).
     *
     * @return $this
     */
    public function setStoryType($storyType)
    {
        $this->container['storyType'] = $storyType;

        return $this;
    }

    /**
     * Gets customFields
     *
     * @return StoryCustomField[]
     */
    public function getCustomFields()
    {
        return $this->container['customFields'];
    }

    /**
     * Sets customFields
     *
     * @param StoryCustomField[] $customFields An array of CustomField value assertions for the story.
     *
     * @return $this
     */
    public function setCustomFields($customFields)
    {
        $this->container['customFields'] = $customFields;

        return $this;
    }

    /**
     * Gets linkedFiles
     *
     * @return LinkedFile[]
     */
    public function getLinkedFiles()
    {
        return $this->container['linkedFiles'];
    }

    /**
     * Sets linkedFiles
     *
     * @param LinkedFile[] $linkedFiles An array of linked files attached to the story.
     *
     * @return $this
     */
    public function setLinkedFiles($linkedFiles)
    {
        $this->container['linkedFiles'] = $linkedFiles;

        return $this;
    }

    /**
     * Gets fileIds
     *
     * @return int[]
     */
    public function getFileIds()
    {
        return $this->container['fileIds'];
    }

    /**
     * Sets fileIds
     *
     * @param int[] $fileIds An array of IDs of Files attached to the story.
     *
     * @return $this
     */
    public function setFileIds($fileIds)
    {
        $this->container['fileIds'] = $fileIds;

        return $this;
    }

    /**
     * Gets numTasksCompleted
     *
     * @return int
     */
    public function getNumTasksCompleted()
    {
        return $this->container['numTasksCompleted'];
    }

    /**
     * Sets numTasksCompleted
     *
     * @param int $numTasksCompleted The number of tasks on the story which are complete.
     *
     * @return $this
     */
    public function setNumTasksCompleted($numTasksCompleted)
    {
        $this->container['numTasksCompleted'] = $numTasksCompleted;

        return $this;
    }

    /**
     * Gets workflowId
     *
     * @return int
     */
    public function getWorkflowId()
    {
        return $this->container['workflowId'];
    }

    /**
     * Sets workflowId
     *
     * @param int $workflowId The ID of the workflow the story belongs to.
     *
     * @return $this
     */
    public function setWorkflowId($workflowId)
    {
        $this->container['workflowId'] = $workflowId;

        return $this;
    }

    /**
     * Gets completedAtOverride
     *
     * @return DateTime
     */
    public function getCompletedAtOverride()
    {
        return $this->container['completedAtOverride'];
    }

    /**
     * Sets completedAtOverride
     *
     * @param DateTime $completedAtOverride A manual override for the time/date the Story was completed.
     *
     * @return $this
     */
    public function setCompletedAtOverride($completedAtOverride)
    {
        $this->container['completedAtOverride'] = $completedAtOverride;

        return $this;
    }

    /**
     * Gets startedAt
     *
     * @return DateTime
     */
    public function getStartedAt()
    {
        return $this->container['startedAt'];
    }

    /**
     * Sets startedAt
     *
     * @param DateTime $startedAt The time/date the Story was started.
     *
     * @return $this
     */
    public function setStartedAt($startedAt)
    {
        $this->container['startedAt'] = $startedAt;

        return $this;
    }

    /**
     * Gets completedAt
     *
     * @return DateTime
     */
    public function getCompletedAt()
    {
        return $this->container['completedAt'];
    }

    /**
     * Sets completedAt
     *
     * @param DateTime $completedAt The time/date the Story was completed.
     *
     * @return $this
     */
    public function setCompletedAt($completedAt)
    {
        $this->container['completedAt'] = $completedAt;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the story.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets globalId
     *
     * @return string
     */
    public function getGlobalId()
    {
        return $this->container['globalId'];
    }

    /**
     * Sets globalId
     *
     * @param string $globalId globalId
     *
     * @return $this
     */
    public function setGlobalId($globalId)
    {
        $this->container['globalId'] = $globalId;

        return $this;
    }

    /**
     * Gets completed
     *
     * @return bool
     */
    public function getCompleted()
    {
        return $this->container['completed'];
    }

    /**
     * Sets completed
     *
     * @param bool $completed A true/false boolean indicating if the Story has been completed.
     *
     * @return $this
     */
    public function setCompleted($completed)
    {
        $this->container['completed'] = $completed;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return StoryComment[]
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param StoryComment[] $comments An array of comments attached to the story.
     *
     * @return $this
     */
    public function setComments($comments)
    {
        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets blocker
     *
     * @return bool
     */
    public function getBlocker()
    {
        return $this->container['blocker'];
    }

    /**
     * Sets blocker
     *
     * @param bool $blocker A true/false boolean indicating if the Story is currently a blocker of another story.
     *
     * @return $this
     */
    public function setBlocker($blocker)
    {
        $this->container['blocker'] = $blocker;

        return $this;
    }

    /**
     * Gets branches
     *
     * @return Branch[]
     */
    public function getBranches()
    {
        return $this->container['branches'];
    }

    /**
     * Sets branches
     *
     * @param Branch[] $branches An array of Git branches attached to the story.
     *
     * @return $this
     */
    public function setBranches($branches)
    {
        $this->container['branches'] = $branches;

        return $this;
    }

    /**
     * Gets epicId
     *
     * @return int
     */
    public function getEpicId()
    {
        return $this->container['epicId'];
    }

    /**
     * Sets epicId
     *
     * @param int $epicId The ID of the epic the story belongs to.
     *
     * @return $this
     */
    public function setEpicId($epicId)
    {
        $this->container['epicId'] = $epicId;

        return $this;
    }

    /**
     * Gets unresolvedBlockerComments
     *
     * @return int[]
     */
    public function getUnresolvedBlockerComments()
    {
        return $this->container['unresolvedBlockerComments'];
    }

    /**
     * Sets unresolvedBlockerComments
     *
     * @param int[] $unresolvedBlockerComments The IDs of any unresolved blocker comments on the Story.
     *
     * @return $this
     */
    public function setUnresolvedBlockerComments($unresolvedBlockerComments)
    {
        $this->container['unresolvedBlockerComments'] = $unresolvedBlockerComments;

        return $this;
    }

    /**
     * Gets storyTemplateId
     *
     * @return string
     */
    public function getStoryTemplateId()
    {
        return $this->container['storyTemplateId'];
    }

    /**
     * Sets storyTemplateId
     *
     * @param string $storyTemplateId The ID of the story template used to create this story, or null if not created using a template.
     *
     * @return $this
     */
    public function setStoryTemplateId($storyTemplateId)
    {
        $this->container['storyTemplateId'] = $storyTemplateId;

        return $this;
    }

    /**
     * Gets externalLinks
     *
     * @return string[]
     */
    public function getExternalLinks()
    {
        return $this->container['externalLinks'];
    }

    /**
     * Sets externalLinks
     *
     * @param string[] $externalLinks An array of external links (strings) associated with a Story
     *
     * @return $this
     */
    public function setExternalLinks($externalLinks)
    {
        $this->container['externalLinks'] = $externalLinks;

        return $this;
    }

    /**
     * Gets previousIterationIds
     *
     * @return int[]
     */
    public function getPreviousIterationIds()
    {
        return $this->container['previousIterationIds'];
    }

    /**
     * Sets previousIterationIds
     *
     * @param int[] $previousIterationIds The IDs of the iteration the story belongs to.
     *
     * @return $this
     */
    public function setPreviousIterationIds($previousIterationIds)
    {
        $this->container['previousIterationIds'] = $previousIterationIds;

        return $this;
    }

    /**
     * Gets requestedById
     *
     * @return string
     */
    public function getRequestedById()
    {
        return $this->container['requestedById'];
    }

    /**
     * Sets requestedById
     *
     * @param string $requestedById The ID of the Member that requested the story.
     *
     * @return $this
     */
    public function setRequestedById($requestedById)
    {
        $this->container['requestedById'] = $requestedById;

        return $this;
    }

    /**
     * Gets iterationId
     *
     * @return int
     */
    public function getIterationId()
    {
        return $this->container['iterationId'];
    }

    /**
     * Sets iterationId
     *
     * @param int $iterationId The ID of the iteration the story belongs to.
     *
     * @return $this
     */
    public function setIterationId($iterationId)
    {
        $this->container['iterationId'] = $iterationId;

        return $this;
    }

    /**
     * Gets tasks
     *
     * @return Task[]
     */
    public function getTasks()
    {
        return $this->container['tasks'];
    }

    /**
     * Sets tasks
     *
     * @param Task[] $tasks An array of tasks connected to the story.
     *
     * @return $this
     */
    public function setTasks($tasks)
    {
        $this->container['tasks'] = $tasks;

        return $this;
    }

    /**
     * Gets labelIds
     *
     * @return int[]
     */
    public function getLabelIds()
    {
        return $this->container['labelIds'];
    }

    /**
     * Sets labelIds
     *
     * @param int[] $labelIds An array of label ids attached to the story.
     *
     * @return $this
     */
    public function setLabelIds($labelIds)
    {
        $this->container['labelIds'] = $labelIds;

        return $this;
    }

    /**
     * Gets startedAtOverride
     *
     * @return DateTime
     */
    public function getStartedAtOverride()
    {
        return $this->container['startedAtOverride'];
    }

    /**
     * Sets startedAtOverride
     *
     * @param DateTime $startedAtOverride A manual override for the time/date the Story was started.
     *
     * @return $this
     */
    public function setStartedAtOverride($startedAtOverride)
    {
        $this->container['startedAtOverride'] = $startedAtOverride;

        return $this;
    }

    /**
     * Gets groupId
     *
     * @return string
     */
    public function getGroupId()
    {
        return $this->container['groupId'];
    }

    /**
     * Sets groupId
     *
     * @param string $groupId The ID of the group associated with the story.
     *
     * @return $this
     */
    public function setGroupId($groupId)
    {
        $this->container['groupId'] = $groupId;

        return $this;
    }

    /**
     * Gets workflowStateId
     *
     * @return int
     */
    public function getWorkflowStateId()
    {
        return $this->container['workflowStateId'];
    }

    /**
     * Sets workflowStateId
     *
     * @param int $workflowStateId The ID of the workflow state the story is currently in.
     *
     * @return $this
     */
    public function setWorkflowStateId($workflowStateId)
    {
        $this->container['workflowStateId'] = $workflowStateId;

        return $this;
    }

    /**
     * Gets updatedAt
     *
     * @return DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updatedAt'];
    }

    /**
     * Sets updatedAt
     *
     * @param DateTime $updatedAt The time/date the Story was updated.
     *
     * @return $this
     */
    public function setUpdatedAt($updatedAt)
    {
        $this->container['updatedAt'] = $updatedAt;

        return $this;
    }

    /**
     * Gets pullRequests
     *
     * @return PullRequest[]
     */
    public function getPullRequests()
    {
        return $this->container['pullRequests'];
    }

    /**
     * Sets pullRequests
     *
     * @param PullRequest[] $pullRequests An array of Pull/Merge Requests attached to the story.
     *
     * @return $this
     */
    public function setPullRequests($pullRequests)
    {
        $this->container['pullRequests'] = $pullRequests;

        return $this;
    }

    /**
     * Gets groupMentionIds
     *
     * @return string[]
     */
    public function getGroupMentionIds()
    {
        return $this->container['groupMentionIds'];
    }

    /**
     * Sets groupMentionIds
     *
     * @param string[] $groupMentionIds An array of Group IDs that have been mentioned in the Story description.
     *
     * @return $this
     */
    public function setGroupMentionIds($groupMentionIds)
    {
        $this->container['groupMentionIds'] = $groupMentionIds;

        return $this;
    }

    /**
     * Gets followerIds
     *
     * @return string[]
     */
    public function getFollowerIds()
    {
        return $this->container['followerIds'];
    }

    /**
     * Sets followerIds
     *
     * @param string[] $followerIds An array of UUIDs for any Members listed as Followers.
     *
     * @return $this
     */
    public function setFollowerIds($followerIds)
    {
        $this->container['followerIds'] = $followerIds;

        return $this;
    }

    /**
     * Gets ownerIds
     *
     * @return string[]
     */
    public function getOwnerIds()
    {
        return $this->container['ownerIds'];
    }

    /**
     * Sets ownerIds
     *
     * @param string[] $ownerIds An array of UUIDs of the owners of this story.
     *
     * @return $this
     */
    public function setOwnerIds($ownerIds)
    {
        $this->container['ownerIds'] = $ownerIds;

        return $this;
    }

    /**
     * Gets externalId
     *
     * @return string
     */
    public function getExternalId()
    {
        return $this->container['externalId'];
    }

    /**
     * Sets externalId
     *
     * @param string $externalId This field can be set to another unique ID. In the case that the Story has been imported from another tool, the ID in the other tool can be indicated here.
     *
     * @return $this
     */
    public function setExternalId($externalId)
    {
        $this->container['externalId'] = $externalId;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The unique ID of the Story.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets leadTime
     *
     * @return int
     */
    public function getLeadTime()
    {
        return $this->container['leadTime'];
    }

    /**
     * Sets leadTime
     *
     * @param int $leadTime The lead time (in seconds) of this story when complete.
     *
     * @return $this
     */
    public function setLeadTime($leadTime)
    {
        $this->container['leadTime'] = $leadTime;

        return $this;
    }

    /**
     * Gets estimate
     *
     * @return int
     */
    public function getEstimate()
    {
        return $this->container['estimate'];
    }

    /**
     * Sets estimate
     *
     * @param int $estimate The numeric point estimate of the story. Can also be null, which means unestimated.
     *
     * @return $this
     */
    public function setEstimate($estimate)
    {
        $this->container['estimate'] = $estimate;

        return $this;
    }

    /**
     * Gets commits
     *
     * @return Commit[]
     */
    public function getCommits()
    {
        return $this->container['commits'];
    }

    /**
     * Sets commits
     *
     * @param Commit[] $commits An array of commits attached to the story.
     *
     * @return $this
     */
    public function setCommits($commits)
    {
        $this->container['commits'] = $commits;

        return $this;
    }

    /**
     * Gets files
     *
     * @return UploadedFile[]
     */
    public function getFiles()
    {
        return $this->container['files'];
    }

    /**
     * Sets files
     *
     * @param UploadedFile[] $files An array of files attached to the story.
     *
     * @return $this
     */
    public function setFiles($files)
    {
        $this->container['files'] = $files;

        return $this;
    }

    /**
     * Gets position
     *
     * @return int
     */
    public function getPosition()
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     *
     * @param int $position A number representing the position of the story in relation to every other story in the current project.
     *
     * @return $this
     */
    public function setPosition($position)
    {
        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets blocked
     *
     * @return bool
     */
    public function getBlocked()
    {
        return $this->container['blocked'];
    }

    /**
     * Sets blocked
     *
     * @param bool $blocked A true/false boolean indicating if the Story is currently blocked.
     *
     * @return $this
     */
    public function setBlocked($blocked)
    {
        $this->container['blocked'] = $blocked;

        return $this;
    }

    /**
     * Gets projectId
     *
     * @return int
     */
    public function getProjectId()
    {
        return $this->container['projectId'];
    }

    /**
     * Sets projectId
     *
     * @param int $projectId The ID of the project the story belongs to.
     *
     * @return $this
     */
    public function setProjectId($projectId)
    {
        $this->container['projectId'] = $projectId;

        return $this;
    }

    /**
     * Gets linkedFileIds
     *
     * @return int[]
     */
    public function getLinkedFileIds()
    {
        return $this->container['linkedFileIds'];
    }

    /**
     * Sets linkedFileIds
     *
     * @param int[] $linkedFileIds An array of IDs of LinkedFiles attached to the story.
     *
     * @return $this
     */
    public function setLinkedFileIds($linkedFileIds)
    {
        $this->container['linkedFileIds'] = $linkedFileIds;

        return $this;
    }

    /**
     * Gets deadline
     *
     * @return DateTime
     */
    public function getDeadline()
    {
        return $this->container['deadline'];
    }

    /**
     * Sets deadline
     *
     * @param DateTime $deadline The due date of the story.
     *
     * @return $this
     */
    public function setDeadline($deadline)
    {
        $this->container['deadline'] = $deadline;

        return $this;
    }

    /**
     * Gets stats
     *
     * @return StoryStats
     */
    public function getStats()
    {
        return $this->container['stats'];
    }

    /**
     * Sets stats
     *
     * @param StoryStats $stats stats
     *
     * @return $this
     */
    public function setStats($stats)
    {
        $this->container['stats'] = $stats;

        return $this;
    }

    /**
     * Gets commentIds
     *
     * @return int[]
     */
    public function getCommentIds()
    {
        return $this->container['commentIds'];
    }

    /**
     * Sets commentIds
     *
     * @param int[] $commentIds An array of IDs of Comments attached to the story.
     *
     * @return $this
     */
    public function setCommentIds($commentIds)
    {
        $this->container['commentIds'] = $commentIds;

        return $this;
    }

    /**
     * Gets cycleTime
     *
     * @return int
     */
    public function getCycleTime()
    {
        return $this->container['cycleTime'];
    }

    /**
     * Sets cycleTime
     *
     * @param int $cycleTime The cycle time (in seconds) of this story when complete.
     *
     * @return $this
     */
    public function setCycleTime($cycleTime)
    {
        $this->container['cycleTime'] = $cycleTime;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param DateTime $createdAt The time/date the Story was created.
     *
     * @return $this
     */
    public function setCreatedAt($createdAt)
    {
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Gets movedAt
     *
     * @return DateTime
     */
    public function getMovedAt()
    {
        return $this->container['movedAt'];
    }

    /**
     * Sets movedAt
     *
     * @param DateTime $movedAt The time/date the Story was last changed workflow-state.
     *
     * @return $this
     */
    public function setMovedAt($movedAt)
    {
        $this->container['movedAt'] = $movedAt;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed $value Value to be set
     *
     * @return void
     */
    #[ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
