<?php
/**
 * V3FilesBody
 *
 * PHP version 5
 *
 * @category Class
 * @package  Timetoreply\Shortcut
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Shortcut API
 *
 * Shortcut API
 *
 * OpenAPI spec version: 3.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.43-SNAPSHOT
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Timetoreply\Shortcut\Model;

use ArrayAccess;
use ReturnTypeWillChange;
use Timetoreply\Shortcut\ObjectSerializer;

/**
 * V3FilesBody Class Doc Comment
 *
 * @category Class
 * @package  Timetoreply\Shortcut
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class V3FilesBody implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'v3_files_body';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'storyId' => 'int',
        'file0' => 'string',
        'file1' => 'string',
        'file2' => 'string',
        'file3' => 'string'];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'storyId' => 'int64',
        'file0' => 'binary',
        'file1' => 'binary',
        'file2' => 'binary',
        'file3' => 'binary'];
    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'storyId' => 'story_id',
        'file0' => 'file0',
        'file1' => 'file1',
        'file2' => 'file2',
        'file3' => 'file3'];
    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'storyId' => 'setStoryId',
        'file0' => 'setFile0',
        'file1' => 'setFile1',
        'file2' => 'setFile2',
        'file3' => 'setFile3'];
    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'storyId' => 'getStoryId',
        'file0' => 'getFile0',
        'file1' => 'getFile1',
        'file2' => 'getFile2',
        'file3' => 'getFile3'];
    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['storyId'] = isset($data['storyId']) ? $data['storyId'] : null;
        $this->container['file0'] = isset($data['file0']) ? $data['file0'] : null;
        $this->container['file1'] = isset($data['file1']) ? $data['file1'] : null;
        $this->container['file2'] = isset($data['file2']) ? $data['file2'] : null;
        $this->container['file3'] = isset($data['file3']) ? $data['file3'] : null;
    }

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['file0'] === null) {
            $invalidProperties[] = "'file0' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Gets storyId
     *
     * @return int
     */
    public function getStoryId()
    {
        return $this->container['storyId'];
    }

    /**
     * Sets storyId
     *
     * @param int $storyId The story ID that these files will be associated with.
     *
     * @return $this
     */
    public function setStoryId($storyId)
    {
        $this->container['storyId'] = $storyId;

        return $this;
    }

    /**
     * Gets file0
     *
     * @return string
     */
    public function getFile0()
    {
        return $this->container['file0'];
    }

    /**
     * Sets file0
     *
     * @param string $file0 A file upload. At least one is required.
     *
     * @return $this
     */
    public function setFile0($file0)
    {
        $this->container['file0'] = $file0;

        return $this;
    }

    /**
     * Gets file1
     *
     * @return string
     */
    public function getFile1()
    {
        return $this->container['file1'];
    }

    /**
     * Sets file1
     *
     * @param string $file1 Optional additional files.
     *
     * @return $this
     */
    public function setFile1($file1)
    {
        $this->container['file1'] = $file1;

        return $this;
    }

    /**
     * Gets file2
     *
     * @return string
     */
    public function getFile2()
    {
        return $this->container['file2'];
    }

    /**
     * Sets file2
     *
     * @param string $file2 Optional additional files.
     *
     * @return $this
     */
    public function setFile2($file2)
    {
        $this->container['file2'] = $file2;

        return $this;
    }

    /**
     * Gets file3
     *
     * @return string
     */
    public function getFile3()
    {
        return $this->container['file3'];
    }

    /**
     * Sets file3
     *
     * @param string $file3 Optional additional files.
     *
     * @return $this
     */
    public function setFile3($file3)
    {
        $this->container['file3'] = $file3;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed $value Value to be set
     *
     * @return void
     */
    #[ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
