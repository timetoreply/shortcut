<?php
/**
 * EpicSearchResult
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Timetoreply\Shortcut
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Shortcut API
 *
 * Shortcut API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Timetoreply\Shortcut\Model;

use \ArrayAccess;
use \Timetoreply\Shortcut\ObjectSerializer;

/**
 * EpicSearchResult Class Doc Comment
 *
 * @category Class
 * @description An Epic in search results. This is typed differently from Epic because the details&#x3D;slim search argument will omit some fields.
 * @package  Timetoreply\Shortcut
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EpicSearchResult implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'EpicSearchResult';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'appUrl' => 'string',
        'description' => 'string',
        'archived' => 'bool',
        'started' => 'bool',
        'entityType' => 'string',
        'labels' => '\Timetoreply\Shortcut\Model\LabelSlim[]',
        'mentionIds' => 'string[]',
        'memberMentionIds' => 'string[]',
        'associatedGroups' => '\Timetoreply\Shortcut\Model\EpicAssociatedGroup[]',
        'projectIds' => 'int[]',
        'storiesWithoutProjects' => 'int',
        'completedAtOverride' => '\DateTime',
        'productboardPluginId' => 'string',
        'startedAt' => '\DateTime',
        'completedAt' => '\DateTime',
        'objectiveIds' => 'int[]',
        'name' => 'string',
        'globalId' => 'string',
        'completed' => 'bool',
        'comments' => '\Timetoreply\Shortcut\Model\ThreadedComment[]',
        'productboardUrl' => 'string',
        'plannedStartDate' => '\DateTime',
        'state' => 'string',
        'milestoneId' => 'int',
        'requestedById' => 'string',
        'epicStateId' => 'int',
        'labelIds' => 'int[]',
        'startedAtOverride' => '\DateTime',
        'groupId' => 'string',
        'updatedAt' => '\DateTime',
        'groupMentionIds' => 'string[]',
        'productboardId' => 'string',
        'followerIds' => 'string[]',
        'groupIds' => 'string[]',
        'ownerIds' => 'string[]',
        'externalId' => 'string',
        'id' => 'int',
        'health' => '\Timetoreply\Shortcut\Model\Health',
        'position' => 'int',
        'productboardName' => 'string',
        'deadline' => '\DateTime',
        'stats' => '\Timetoreply\Shortcut\Model\EpicStats',
        'createdAt' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'appUrl' => null,
        'description' => null,
        'archived' => null,
        'started' => null,
        'entityType' => null,
        'labels' => null,
        'mentionIds' => 'uuid',
        'memberMentionIds' => 'uuid',
        'associatedGroups' => null,
        'projectIds' => 'int64',
        'storiesWithoutProjects' => 'int64',
        'completedAtOverride' => 'date-time',
        'productboardPluginId' => 'uuid',
        'startedAt' => 'date-time',
        'completedAt' => 'date-time',
        'objectiveIds' => 'int64',
        'name' => null,
        'globalId' => null,
        'completed' => null,
        'comments' => null,
        'productboardUrl' => null,
        'plannedStartDate' => 'date-time',
        'state' => null,
        'milestoneId' => 'int64',
        'requestedById' => 'uuid',
        'epicStateId' => 'int64',
        'labelIds' => 'int64',
        'startedAtOverride' => 'date-time',
        'groupId' => 'uuid',
        'updatedAt' => 'date-time',
        'groupMentionIds' => 'uuid',
        'productboardId' => 'uuid',
        'followerIds' => 'uuid',
        'groupIds' => 'uuid',
        'ownerIds' => 'uuid',
        'externalId' => null,
        'id' => 'int64',
        'health' => null,
        'position' => 'int64',
        'productboardName' => null,
        'deadline' => 'date-time',
        'stats' => null,
        'createdAt' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'appUrl' => false,
        'description' => false,
        'archived' => false,
        'started' => false,
        'entityType' => false,
        'labels' => false,
        'mentionIds' => false,
        'memberMentionIds' => false,
        'associatedGroups' => false,
        'projectIds' => false,
        'storiesWithoutProjects' => false,
        'completedAtOverride' => true,
        'productboardPluginId' => true,
        'startedAt' => true,
        'completedAt' => true,
        'objectiveIds' => false,
        'name' => false,
        'globalId' => false,
        'completed' => false,
        'comments' => false,
        'productboardUrl' => true,
        'plannedStartDate' => true,
        'state' => false,
        'milestoneId' => true,
        'requestedById' => false,
        'epicStateId' => false,
        'labelIds' => false,
        'startedAtOverride' => true,
        'groupId' => true,
        'updatedAt' => true,
        'groupMentionIds' => false,
        'productboardId' => true,
        'followerIds' => false,
        'groupIds' => false,
        'ownerIds' => false,
        'externalId' => true,
        'id' => false,
        'health' => false,
        'position' => false,
        'productboardName' => true,
        'deadline' => true,
        'stats' => false,
        'createdAt' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'appUrl' => 'app_url',
        'description' => 'description',
        'archived' => 'archived',
        'started' => 'started',
        'entityType' => 'entity_type',
        'labels' => 'labels',
        'mentionIds' => 'mention_ids',
        'memberMentionIds' => 'member_mention_ids',
        'associatedGroups' => 'associated_groups',
        'projectIds' => 'project_ids',
        'storiesWithoutProjects' => 'stories_without_projects',
        'completedAtOverride' => 'completed_at_override',
        'productboardPluginId' => 'productboard_plugin_id',
        'startedAt' => 'started_at',
        'completedAt' => 'completed_at',
        'objectiveIds' => 'objective_ids',
        'name' => 'name',
        'globalId' => 'global_id',
        'completed' => 'completed',
        'comments' => 'comments',
        'productboardUrl' => 'productboard_url',
        'plannedStartDate' => 'planned_start_date',
        'state' => 'state',
        'milestoneId' => 'milestone_id',
        'requestedById' => 'requested_by_id',
        'epicStateId' => 'epic_state_id',
        'labelIds' => 'label_ids',
        'startedAtOverride' => 'started_at_override',
        'groupId' => 'group_id',
        'updatedAt' => 'updated_at',
        'groupMentionIds' => 'group_mention_ids',
        'productboardId' => 'productboard_id',
        'followerIds' => 'follower_ids',
        'groupIds' => 'group_ids',
        'ownerIds' => 'owner_ids',
        'externalId' => 'external_id',
        'id' => 'id',
        'health' => 'health',
        'position' => 'position',
        'productboardName' => 'productboard_name',
        'deadline' => 'deadline',
        'stats' => 'stats',
        'createdAt' => 'created_at'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'appUrl' => 'setAppUrl',
        'description' => 'setDescription',
        'archived' => 'setArchived',
        'started' => 'setStarted',
        'entityType' => 'setEntityType',
        'labels' => 'setLabels',
        'mentionIds' => 'setMentionIds',
        'memberMentionIds' => 'setMemberMentionIds',
        'associatedGroups' => 'setAssociatedGroups',
        'projectIds' => 'setProjectIds',
        'storiesWithoutProjects' => 'setStoriesWithoutProjects',
        'completedAtOverride' => 'setCompletedAtOverride',
        'productboardPluginId' => 'setProductboardPluginId',
        'startedAt' => 'setStartedAt',
        'completedAt' => 'setCompletedAt',
        'objectiveIds' => 'setObjectiveIds',
        'name' => 'setName',
        'globalId' => 'setGlobalId',
        'completed' => 'setCompleted',
        'comments' => 'setComments',
        'productboardUrl' => 'setProductboardUrl',
        'plannedStartDate' => 'setPlannedStartDate',
        'state' => 'setState',
        'milestoneId' => 'setMilestoneId',
        'requestedById' => 'setRequestedById',
        'epicStateId' => 'setEpicStateId',
        'labelIds' => 'setLabelIds',
        'startedAtOverride' => 'setStartedAtOverride',
        'groupId' => 'setGroupId',
        'updatedAt' => 'setUpdatedAt',
        'groupMentionIds' => 'setGroupMentionIds',
        'productboardId' => 'setProductboardId',
        'followerIds' => 'setFollowerIds',
        'groupIds' => 'setGroupIds',
        'ownerIds' => 'setOwnerIds',
        'externalId' => 'setExternalId',
        'id' => 'setId',
        'health' => 'setHealth',
        'position' => 'setPosition',
        'productboardName' => 'setProductboardName',
        'deadline' => 'setDeadline',
        'stats' => 'setStats',
        'createdAt' => 'setCreatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'appUrl' => 'getAppUrl',
        'description' => 'getDescription',
        'archived' => 'getArchived',
        'started' => 'getStarted',
        'entityType' => 'getEntityType',
        'labels' => 'getLabels',
        'mentionIds' => 'getMentionIds',
        'memberMentionIds' => 'getMemberMentionIds',
        'associatedGroups' => 'getAssociatedGroups',
        'projectIds' => 'getProjectIds',
        'storiesWithoutProjects' => 'getStoriesWithoutProjects',
        'completedAtOverride' => 'getCompletedAtOverride',
        'productboardPluginId' => 'getProductboardPluginId',
        'startedAt' => 'getStartedAt',
        'completedAt' => 'getCompletedAt',
        'objectiveIds' => 'getObjectiveIds',
        'name' => 'getName',
        'globalId' => 'getGlobalId',
        'completed' => 'getCompleted',
        'comments' => 'getComments',
        'productboardUrl' => 'getProductboardUrl',
        'plannedStartDate' => 'getPlannedStartDate',
        'state' => 'getState',
        'milestoneId' => 'getMilestoneId',
        'requestedById' => 'getRequestedById',
        'epicStateId' => 'getEpicStateId',
        'labelIds' => 'getLabelIds',
        'startedAtOverride' => 'getStartedAtOverride',
        'groupId' => 'getGroupId',
        'updatedAt' => 'getUpdatedAt',
        'groupMentionIds' => 'getGroupMentionIds',
        'productboardId' => 'getProductboardId',
        'followerIds' => 'getFollowerIds',
        'groupIds' => 'getGroupIds',
        'ownerIds' => 'getOwnerIds',
        'externalId' => 'getExternalId',
        'id' => 'getId',
        'health' => 'getHealth',
        'position' => 'getPosition',
        'productboardName' => 'getProductboardName',
        'deadline' => 'getDeadline',
        'stats' => 'getStats',
        'createdAt' => 'getCreatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('appUrl', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('archived', $data ?? [], null);
        $this->setIfExists('started', $data ?? [], null);
        $this->setIfExists('entityType', $data ?? [], null);
        $this->setIfExists('labels', $data ?? [], null);
        $this->setIfExists('mentionIds', $data ?? [], null);
        $this->setIfExists('memberMentionIds', $data ?? [], null);
        $this->setIfExists('associatedGroups', $data ?? [], null);
        $this->setIfExists('projectIds', $data ?? [], null);
        $this->setIfExists('storiesWithoutProjects', $data ?? [], null);
        $this->setIfExists('completedAtOverride', $data ?? [], null);
        $this->setIfExists('productboardPluginId', $data ?? [], null);
        $this->setIfExists('startedAt', $data ?? [], null);
        $this->setIfExists('completedAt', $data ?? [], null);
        $this->setIfExists('objectiveIds', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('globalId', $data ?? [], null);
        $this->setIfExists('completed', $data ?? [], null);
        $this->setIfExists('comments', $data ?? [], null);
        $this->setIfExists('productboardUrl', $data ?? [], null);
        $this->setIfExists('plannedStartDate', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('milestoneId', $data ?? [], null);
        $this->setIfExists('requestedById', $data ?? [], null);
        $this->setIfExists('epicStateId', $data ?? [], null);
        $this->setIfExists('labelIds', $data ?? [], null);
        $this->setIfExists('startedAtOverride', $data ?? [], null);
        $this->setIfExists('groupId', $data ?? [], null);
        $this->setIfExists('updatedAt', $data ?? [], null);
        $this->setIfExists('groupMentionIds', $data ?? [], null);
        $this->setIfExists('productboardId', $data ?? [], null);
        $this->setIfExists('followerIds', $data ?? [], null);
        $this->setIfExists('groupIds', $data ?? [], null);
        $this->setIfExists('ownerIds', $data ?? [], null);
        $this->setIfExists('externalId', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('health', $data ?? [], null);
        $this->setIfExists('position', $data ?? [], null);
        $this->setIfExists('productboardName', $data ?? [], null);
        $this->setIfExists('deadline', $data ?? [], null);
        $this->setIfExists('stats', $data ?? [], null);
        $this->setIfExists('createdAt', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['appUrl'] === null) {
            $invalidProperties[] = "'appUrl' can't be null";
        }
        if ($this->container['archived'] === null) {
            $invalidProperties[] = "'archived' can't be null";
        }
        if ($this->container['started'] === null) {
            $invalidProperties[] = "'started' can't be null";
        }
        if ($this->container['entityType'] === null) {
            $invalidProperties[] = "'entityType' can't be null";
        }
        if ($this->container['labels'] === null) {
            $invalidProperties[] = "'labels' can't be null";
        }
        if ($this->container['mentionIds'] === null) {
            $invalidProperties[] = "'mentionIds' can't be null";
        }
        if ($this->container['memberMentionIds'] === null) {
            $invalidProperties[] = "'memberMentionIds' can't be null";
        }
        if ($this->container['associatedGroups'] === null) {
            $invalidProperties[] = "'associatedGroups' can't be null";
        }
        if ($this->container['projectIds'] === null) {
            $invalidProperties[] = "'projectIds' can't be null";
        }
        if ($this->container['storiesWithoutProjects'] === null) {
            $invalidProperties[] = "'storiesWithoutProjects' can't be null";
        }
        if ($this->container['completedAtOverride'] === null) {
            $invalidProperties[] = "'completedAtOverride' can't be null";
        }
        if ($this->container['productboardPluginId'] === null) {
            $invalidProperties[] = "'productboardPluginId' can't be null";
        }
        if ($this->container['startedAt'] === null) {
            $invalidProperties[] = "'startedAt' can't be null";
        }
        if ($this->container['completedAt'] === null) {
            $invalidProperties[] = "'completedAt' can't be null";
        }
        if ($this->container['objectiveIds'] === null) {
            $invalidProperties[] = "'objectiveIds' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['globalId'] === null) {
            $invalidProperties[] = "'globalId' can't be null";
        }
        if ($this->container['completed'] === null) {
            $invalidProperties[] = "'completed' can't be null";
        }
        if ($this->container['productboardUrl'] === null) {
            $invalidProperties[] = "'productboardUrl' can't be null";
        }
        if ($this->container['plannedStartDate'] === null) {
            $invalidProperties[] = "'plannedStartDate' can't be null";
        }
        if ($this->container['state'] === null) {
            $invalidProperties[] = "'state' can't be null";
        }
        if ($this->container['milestoneId'] === null) {
            $invalidProperties[] = "'milestoneId' can't be null";
        }
        if ($this->container['requestedById'] === null) {
            $invalidProperties[] = "'requestedById' can't be null";
        }
        if ($this->container['epicStateId'] === null) {
            $invalidProperties[] = "'epicStateId' can't be null";
        }
        if ($this->container['labelIds'] === null) {
            $invalidProperties[] = "'labelIds' can't be null";
        }
        if ($this->container['startedAtOverride'] === null) {
            $invalidProperties[] = "'startedAtOverride' can't be null";
        }
        if ($this->container['groupId'] === null) {
            $invalidProperties[] = "'groupId' can't be null";
        }
        if ($this->container['updatedAt'] === null) {
            $invalidProperties[] = "'updatedAt' can't be null";
        }
        if ($this->container['groupMentionIds'] === null) {
            $invalidProperties[] = "'groupMentionIds' can't be null";
        }
        if ($this->container['productboardId'] === null) {
            $invalidProperties[] = "'productboardId' can't be null";
        }
        if ($this->container['followerIds'] === null) {
            $invalidProperties[] = "'followerIds' can't be null";
        }
        if ($this->container['groupIds'] === null) {
            $invalidProperties[] = "'groupIds' can't be null";
        }
        if ($this->container['ownerIds'] === null) {
            $invalidProperties[] = "'ownerIds' can't be null";
        }
        if ($this->container['externalId'] === null) {
            $invalidProperties[] = "'externalId' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['position'] === null) {
            $invalidProperties[] = "'position' can't be null";
        }
        if ($this->container['productboardName'] === null) {
            $invalidProperties[] = "'productboardName' can't be null";
        }
        if ($this->container['deadline'] === null) {
            $invalidProperties[] = "'deadline' can't be null";
        }
        if ($this->container['stats'] === null) {
            $invalidProperties[] = "'stats' can't be null";
        }
        if ($this->container['createdAt'] === null) {
            $invalidProperties[] = "'createdAt' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets appUrl
     *
     * @return string
     */
    public function getAppUrl()
    {
        return $this->container['appUrl'];
    }

    /**
     * Sets appUrl
     *
     * @param string $appUrl The Shortcut application url for the Epic.
     *
     * @return self
     */
    public function setAppUrl($appUrl)
    {
        if (is_null($appUrl)) {
            throw new \InvalidArgumentException('non-nullable appUrl cannot be null');
        }
        $this->container['appUrl'] = $appUrl;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description The Epic's description.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets archived
     *
     * @return bool
     */
    public function getArchived()
    {
        return $this->container['archived'];
    }

    /**
     * Sets archived
     *
     * @param bool $archived True/false boolean that indicates whether the Epic is archived or not.
     *
     * @return self
     */
    public function setArchived($archived)
    {
        if (is_null($archived)) {
            throw new \InvalidArgumentException('non-nullable archived cannot be null');
        }
        $this->container['archived'] = $archived;

        return $this;
    }

    /**
     * Gets started
     *
     * @return bool
     */
    public function getStarted()
    {
        return $this->container['started'];
    }

    /**
     * Sets started
     *
     * @param bool $started A true/false boolean indicating if the Epic has been started.
     *
     * @return self
     */
    public function setStarted($started)
    {
        if (is_null($started)) {
            throw new \InvalidArgumentException('non-nullable started cannot be null');
        }
        $this->container['started'] = $started;

        return $this;
    }

    /**
     * Gets entityType
     *
     * @return string
     */
    public function getEntityType()
    {
        return $this->container['entityType'];
    }

    /**
     * Sets entityType
     *
     * @param string $entityType A string description of this resource.
     *
     * @return self
     */
    public function setEntityType($entityType)
    {
        if (is_null($entityType)) {
            throw new \InvalidArgumentException('non-nullable entityType cannot be null');
        }
        $this->container['entityType'] = $entityType;

        return $this;
    }

    /**
     * Gets labels
     *
     * @return \Timetoreply\Shortcut\Model\LabelSlim[]
     */
    public function getLabels()
    {
        return $this->container['labels'];
    }

    /**
     * Sets labels
     *
     * @param \Timetoreply\Shortcut\Model\LabelSlim[] $labels An array of Labels attached to the Epic.
     *
     * @return self
     */
    public function setLabels($labels)
    {
        if (is_null($labels)) {
            throw new \InvalidArgumentException('non-nullable labels cannot be null');
        }
        $this->container['labels'] = $labels;

        return $this;
    }

    /**
     * Gets mentionIds
     *
     * @return string[]
     */
    public function getMentionIds()
    {
        return $this->container['mentionIds'];
    }

    /**
     * Sets mentionIds
     *
     * @param string[] $mentionIds `Deprecated:` use `member_mention_ids`.
     *
     * @return self
     */
    public function setMentionIds($mentionIds)
    {
        if (is_null($mentionIds)) {
            throw new \InvalidArgumentException('non-nullable mentionIds cannot be null');
        }
        $this->container['mentionIds'] = $mentionIds;

        return $this;
    }

    /**
     * Gets memberMentionIds
     *
     * @return string[]
     */
    public function getMemberMentionIds()
    {
        return $this->container['memberMentionIds'];
    }

    /**
     * Sets memberMentionIds
     *
     * @param string[] $memberMentionIds An array of Member IDs that have been mentioned in the Epic description.
     *
     * @return self
     */
    public function setMemberMentionIds($memberMentionIds)
    {
        if (is_null($memberMentionIds)) {
            throw new \InvalidArgumentException('non-nullable memberMentionIds cannot be null');
        }
        $this->container['memberMentionIds'] = $memberMentionIds;

        return $this;
    }

    /**
     * Gets associatedGroups
     *
     * @return \Timetoreply\Shortcut\Model\EpicAssociatedGroup[]
     */
    public function getAssociatedGroups()
    {
        return $this->container['associatedGroups'];
    }

    /**
     * Sets associatedGroups
     *
     * @param \Timetoreply\Shortcut\Model\EpicAssociatedGroup[] $associatedGroups An array containing Group IDs and Group-owned story counts for the Epic's associated groups.
     *
     * @return self
     */
    public function setAssociatedGroups($associatedGroups)
    {
        if (is_null($associatedGroups)) {
            throw new \InvalidArgumentException('non-nullable associatedGroups cannot be null');
        }
        $this->container['associatedGroups'] = $associatedGroups;

        return $this;
    }

    /**
     * Gets projectIds
     *
     * @return int[]
     */
    public function getProjectIds()
    {
        return $this->container['projectIds'];
    }

    /**
     * Sets projectIds
     *
     * @param int[] $projectIds The IDs of Projects related to this Epic.
     *
     * @return self
     */
    public function setProjectIds($projectIds)
    {
        if (is_null($projectIds)) {
            throw new \InvalidArgumentException('non-nullable projectIds cannot be null');
        }
        $this->container['projectIds'] = $projectIds;

        return $this;
    }

    /**
     * Gets storiesWithoutProjects
     *
     * @return int
     */
    public function getStoriesWithoutProjects()
    {
        return $this->container['storiesWithoutProjects'];
    }

    /**
     * Sets storiesWithoutProjects
     *
     * @param int $storiesWithoutProjects The number of stories in this epic which are not associated with a project.
     *
     * @return self
     */
    public function setStoriesWithoutProjects($storiesWithoutProjects)
    {
        if (is_null($storiesWithoutProjects)) {
            throw new \InvalidArgumentException('non-nullable storiesWithoutProjects cannot be null');
        }
        $this->container['storiesWithoutProjects'] = $storiesWithoutProjects;

        return $this;
    }

    /**
     * Gets completedAtOverride
     *
     * @return \DateTime
     */
    public function getCompletedAtOverride()
    {
        return $this->container['completedAtOverride'];
    }

    /**
     * Sets completedAtOverride
     *
     * @param \DateTime $completedAtOverride A manual override for the time/date the Epic was completed.
     *
     * @return self
     */
    public function setCompletedAtOverride($completedAtOverride)
    {
        if (is_null($completedAtOverride)) {
            array_push($this->openAPINullablesSetToNull, 'completedAtOverride');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('completedAtOverride', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['completedAtOverride'] = $completedAtOverride;

        return $this;
    }

    /**
     * Gets productboardPluginId
     *
     * @return string
     */
    public function getProductboardPluginId()
    {
        return $this->container['productboardPluginId'];
    }

    /**
     * Sets productboardPluginId
     *
     * @param string $productboardPluginId The ID of the associated productboard integration.
     *
     * @return self
     */
    public function setProductboardPluginId($productboardPluginId)
    {
        if (is_null($productboardPluginId)) {
            array_push($this->openAPINullablesSetToNull, 'productboardPluginId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('productboardPluginId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['productboardPluginId'] = $productboardPluginId;

        return $this;
    }

    /**
     * Gets startedAt
     *
     * @return \DateTime
     */
    public function getStartedAt()
    {
        return $this->container['startedAt'];
    }

    /**
     * Sets startedAt
     *
     * @param \DateTime $startedAt The time/date the Epic was started.
     *
     * @return self
     */
    public function setStartedAt($startedAt)
    {
        if (is_null($startedAt)) {
            array_push($this->openAPINullablesSetToNull, 'startedAt');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('startedAt', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['startedAt'] = $startedAt;

        return $this;
    }

    /**
     * Gets completedAt
     *
     * @return \DateTime
     */
    public function getCompletedAt()
    {
        return $this->container['completedAt'];
    }

    /**
     * Sets completedAt
     *
     * @param \DateTime $completedAt The time/date the Epic was completed.
     *
     * @return self
     */
    public function setCompletedAt($completedAt)
    {
        if (is_null($completedAt)) {
            array_push($this->openAPINullablesSetToNull, 'completedAt');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('completedAt', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['completedAt'] = $completedAt;

        return $this;
    }

    /**
     * Gets objectiveIds
     *
     * @return int[]
     */
    public function getObjectiveIds()
    {
        return $this->container['objectiveIds'];
    }

    /**
     * Sets objectiveIds
     *
     * @param int[] $objectiveIds An array of IDs for Objectives to which this epic is related.
     *
     * @return self
     */
    public function setObjectiveIds($objectiveIds)
    {
        if (is_null($objectiveIds)) {
            throw new \InvalidArgumentException('non-nullable objectiveIds cannot be null');
        }
        $this->container['objectiveIds'] = $objectiveIds;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the Epic.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets globalId
     *
     * @return string
     */
    public function getGlobalId()
    {
        return $this->container['globalId'];
    }

    /**
     * Sets globalId
     *
     * @param string $globalId globalId
     *
     * @return self
     */
    public function setGlobalId($globalId)
    {
        if (is_null($globalId)) {
            throw new \InvalidArgumentException('non-nullable globalId cannot be null');
        }
        $this->container['globalId'] = $globalId;

        return $this;
    }

    /**
     * Gets completed
     *
     * @return bool
     */
    public function getCompleted()
    {
        return $this->container['completed'];
    }

    /**
     * Sets completed
     *
     * @param bool $completed A true/false boolean indicating if the Epic has been completed.
     *
     * @return self
     */
    public function setCompleted($completed)
    {
        if (is_null($completed)) {
            throw new \InvalidArgumentException('non-nullable completed cannot be null');
        }
        $this->container['completed'] = $completed;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return \Timetoreply\Shortcut\Model\ThreadedComment[]|null
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param \Timetoreply\Shortcut\Model\ThreadedComment[]|null $comments A nested array of threaded comments.
     *
     * @return self
     */
    public function setComments($comments)
    {
        if (is_null($comments)) {
            throw new \InvalidArgumentException('non-nullable comments cannot be null');
        }
        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets productboardUrl
     *
     * @return string
     */
    public function getProductboardUrl()
    {
        return $this->container['productboardUrl'];
    }

    /**
     * Sets productboardUrl
     *
     * @param string $productboardUrl The URL of the associated productboard feature.
     *
     * @return self
     */
    public function setProductboardUrl($productboardUrl)
    {
        if (is_null($productboardUrl)) {
            array_push($this->openAPINullablesSetToNull, 'productboardUrl');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('productboardUrl', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['productboardUrl'] = $productboardUrl;

        return $this;
    }

    /**
     * Gets plannedStartDate
     *
     * @return \DateTime
     */
    public function getPlannedStartDate()
    {
        return $this->container['plannedStartDate'];
    }

    /**
     * Sets plannedStartDate
     *
     * @param \DateTime $plannedStartDate The Epic's planned start date.
     *
     * @return self
     */
    public function setPlannedStartDate($plannedStartDate)
    {
        if (is_null($plannedStartDate)) {
            array_push($this->openAPINullablesSetToNull, 'plannedStartDate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('plannedStartDate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['plannedStartDate'] = $plannedStartDate;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state `Deprecated` The workflow state that the Epic is in.
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets milestoneId
     *
     * @return int
     */
    public function getMilestoneId()
    {
        return $this->container['milestoneId'];
    }

    /**
     * Sets milestoneId
     *
     * @param int $milestoneId `Deprecated` The ID of the Objective this Epic is related to. Use `objective_ids`.
     *
     * @return self
     */
    public function setMilestoneId($milestoneId)
    {
        if (is_null($milestoneId)) {
            array_push($this->openAPINullablesSetToNull, 'milestoneId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('milestoneId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['milestoneId'] = $milestoneId;

        return $this;
    }

    /**
     * Gets requestedById
     *
     * @return string
     */
    public function getRequestedById()
    {
        return $this->container['requestedById'];
    }

    /**
     * Sets requestedById
     *
     * @param string $requestedById The ID of the Member that requested the epic.
     *
     * @return self
     */
    public function setRequestedById($requestedById)
    {
        if (is_null($requestedById)) {
            throw new \InvalidArgumentException('non-nullable requestedById cannot be null');
        }
        $this->container['requestedById'] = $requestedById;

        return $this;
    }

    /**
     * Gets epicStateId
     *
     * @return int
     */
    public function getEpicStateId()
    {
        return $this->container['epicStateId'];
    }

    /**
     * Sets epicStateId
     *
     * @param int $epicStateId The ID of the Epic State.
     *
     * @return self
     */
    public function setEpicStateId($epicStateId)
    {
        if (is_null($epicStateId)) {
            throw new \InvalidArgumentException('non-nullable epicStateId cannot be null');
        }
        $this->container['epicStateId'] = $epicStateId;

        return $this;
    }

    /**
     * Gets labelIds
     *
     * @return int[]
     */
    public function getLabelIds()
    {
        return $this->container['labelIds'];
    }

    /**
     * Sets labelIds
     *
     * @param int[] $labelIds An array of Label ids attached to the Epic.
     *
     * @return self
     */
    public function setLabelIds($labelIds)
    {
        if (is_null($labelIds)) {
            throw new \InvalidArgumentException('non-nullable labelIds cannot be null');
        }
        $this->container['labelIds'] = $labelIds;

        return $this;
    }

    /**
     * Gets startedAtOverride
     *
     * @return \DateTime
     */
    public function getStartedAtOverride()
    {
        return $this->container['startedAtOverride'];
    }

    /**
     * Sets startedAtOverride
     *
     * @param \DateTime $startedAtOverride A manual override for the time/date the Epic was started.
     *
     * @return self
     */
    public function setStartedAtOverride($startedAtOverride)
    {
        if (is_null($startedAtOverride)) {
            array_push($this->openAPINullablesSetToNull, 'startedAtOverride');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('startedAtOverride', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['startedAtOverride'] = $startedAtOverride;

        return $this;
    }

    /**
     * Gets groupId
     *
     * @return string
     */
    public function getGroupId()
    {
        return $this->container['groupId'];
    }

    /**
     * Sets groupId
     *
     * @param string $groupId `Deprecated` The ID of the group to associate with the epic. Use `group_ids`.
     *
     * @return self
     */
    public function setGroupId($groupId)
    {
        if (is_null($groupId)) {
            array_push($this->openAPINullablesSetToNull, 'groupId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('groupId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['groupId'] = $groupId;

        return $this;
    }

    /**
     * Gets updatedAt
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updatedAt'];
    }

    /**
     * Sets updatedAt
     *
     * @param \DateTime $updatedAt The time/date the Epic was updated.
     *
     * @return self
     */
    public function setUpdatedAt($updatedAt)
    {
        if (is_null($updatedAt)) {
            array_push($this->openAPINullablesSetToNull, 'updatedAt');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('updatedAt', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['updatedAt'] = $updatedAt;

        return $this;
    }

    /**
     * Gets groupMentionIds
     *
     * @return string[]
     */
    public function getGroupMentionIds()
    {
        return $this->container['groupMentionIds'];
    }

    /**
     * Sets groupMentionIds
     *
     * @param string[] $groupMentionIds An array of Group IDs that have been mentioned in the Epic description.
     *
     * @return self
     */
    public function setGroupMentionIds($groupMentionIds)
    {
        if (is_null($groupMentionIds)) {
            throw new \InvalidArgumentException('non-nullable groupMentionIds cannot be null');
        }
        $this->container['groupMentionIds'] = $groupMentionIds;

        return $this;
    }

    /**
     * Gets productboardId
     *
     * @return string
     */
    public function getProductboardId()
    {
        return $this->container['productboardId'];
    }

    /**
     * Sets productboardId
     *
     * @param string $productboardId The ID of the associated productboard feature.
     *
     * @return self
     */
    public function setProductboardId($productboardId)
    {
        if (is_null($productboardId)) {
            array_push($this->openAPINullablesSetToNull, 'productboardId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('productboardId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['productboardId'] = $productboardId;

        return $this;
    }

    /**
     * Gets followerIds
     *
     * @return string[]
     */
    public function getFollowerIds()
    {
        return $this->container['followerIds'];
    }

    /**
     * Sets followerIds
     *
     * @param string[] $followerIds An array of UUIDs for any Members you want to add as Followers on this Epic.
     *
     * @return self
     */
    public function setFollowerIds($followerIds)
    {
        if (is_null($followerIds)) {
            throw new \InvalidArgumentException('non-nullable followerIds cannot be null');
        }
        $this->container['followerIds'] = $followerIds;

        return $this;
    }

    /**
     * Gets groupIds
     *
     * @return string[]
     */
    public function getGroupIds()
    {
        return $this->container['groupIds'];
    }

    /**
     * Sets groupIds
     *
     * @param string[] $groupIds An array of UUIDS for Groups to which this Epic is related.
     *
     * @return self
     */
    public function setGroupIds($groupIds)
    {
        if (is_null($groupIds)) {
            throw new \InvalidArgumentException('non-nullable groupIds cannot be null');
        }
        $this->container['groupIds'] = $groupIds;

        return $this;
    }

    /**
     * Gets ownerIds
     *
     * @return string[]
     */
    public function getOwnerIds()
    {
        return $this->container['ownerIds'];
    }

    /**
     * Sets ownerIds
     *
     * @param string[] $ownerIds An array of UUIDs for any members you want to add as Owners on this new Epic.
     *
     * @return self
     */
    public function setOwnerIds($ownerIds)
    {
        if (is_null($ownerIds)) {
            throw new \InvalidArgumentException('non-nullable ownerIds cannot be null');
        }
        $this->container['ownerIds'] = $ownerIds;

        return $this;
    }

    /**
     * Gets externalId
     *
     * @return string
     */
    public function getExternalId()
    {
        return $this->container['externalId'];
    }

    /**
     * Sets externalId
     *
     * @param string $externalId This field can be set to another unique ID. In the case that the Epic has been imported from another tool, the ID in the other tool can be indicated here.
     *
     * @return self
     */
    public function setExternalId($externalId)
    {
        if (is_null($externalId)) {
            array_push($this->openAPINullablesSetToNull, 'externalId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('externalId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['externalId'] = $externalId;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The unique ID of the Epic.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets health
     *
     * @return \Timetoreply\Shortcut\Model\Health|null
     */
    public function getHealth()
    {
        return $this->container['health'];
    }

    /**
     * Sets health
     *
     * @param \Timetoreply\Shortcut\Model\Health|null $health health
     *
     * @return self
     */
    public function setHealth($health)
    {
        if (is_null($health)) {
            throw new \InvalidArgumentException('non-nullable health cannot be null');
        }
        $this->container['health'] = $health;

        return $this;
    }

    /**
     * Gets position
     *
     * @return int
     */
    public function getPosition()
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     *
     * @param int $position The Epic's relative position in the Epic workflow state.
     *
     * @return self
     */
    public function setPosition($position)
    {
        if (is_null($position)) {
            throw new \InvalidArgumentException('non-nullable position cannot be null');
        }
        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets productboardName
     *
     * @return string
     */
    public function getProductboardName()
    {
        return $this->container['productboardName'];
    }

    /**
     * Sets productboardName
     *
     * @param string $productboardName The name of the associated productboard feature.
     *
     * @return self
     */
    public function setProductboardName($productboardName)
    {
        if (is_null($productboardName)) {
            array_push($this->openAPINullablesSetToNull, 'productboardName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('productboardName', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['productboardName'] = $productboardName;

        return $this;
    }

    /**
     * Gets deadline
     *
     * @return \DateTime
     */
    public function getDeadline()
    {
        return $this->container['deadline'];
    }

    /**
     * Sets deadline
     *
     * @param \DateTime $deadline The Epic's deadline.
     *
     * @return self
     */
    public function setDeadline($deadline)
    {
        if (is_null($deadline)) {
            array_push($this->openAPINullablesSetToNull, 'deadline');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deadline', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['deadline'] = $deadline;

        return $this;
    }

    /**
     * Gets stats
     *
     * @return \Timetoreply\Shortcut\Model\EpicStats
     */
    public function getStats()
    {
        return $this->container['stats'];
    }

    /**
     * Sets stats
     *
     * @param \Timetoreply\Shortcut\Model\EpicStats $stats stats
     *
     * @return self
     */
    public function setStats($stats)
    {
        if (is_null($stats)) {
            throw new \InvalidArgumentException('non-nullable stats cannot be null');
        }
        $this->container['stats'] = $stats;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param \DateTime $createdAt The time/date the Epic was created.
     *
     * @return self
     */
    public function setCreatedAt($createdAt)
    {
        if (is_null($createdAt)) {
            array_push($this->openAPINullablesSetToNull, 'createdAt');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('createdAt', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['createdAt'] = $createdAt;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


